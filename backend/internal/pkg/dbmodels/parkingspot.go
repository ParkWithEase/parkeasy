// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/govalues/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Parkingspot is an object representing the database table.
type Parkingspot struct {
	Parkingspotid      int64           `db:"parkingspotid,pk" `
	Userid             int64           `db:"userid" `
	Parkingspotuuid    uuid.UUID       `db:"parkingspotuuid" `
	Postalcode         string          `db:"postalcode" `
	Countrycode        string          `db:"countrycode" `
	City               string          `db:"city" `
	State              string          `db:"state" `
	Streetaddress      string          `db:"streetaddress" `
	Longitude          decimal.Decimal `db:"longitude" `
	Latitude           decimal.Decimal `db:"latitude" `
	Hasshelter         bool            `db:"hasshelter" `
	Hasplugin          bool            `db:"hasplugin" `
	Haschargingstation bool            `db:"haschargingstation" `
	Priceperhour       decimal.Decimal `db:"priceperhour" `

	R parkingspotR `db:"-" `
}

// ParkingspotSlice is an alias for a slice of pointers to Parkingspot.
// This should almost always be used instead of []*Parkingspot.
type ParkingspotSlice []*Parkingspot

// Parkingspots contains methods to work with the parkingspot table
var Parkingspots = psql.NewTablex[*Parkingspot, ParkingspotSlice, *ParkingspotSetter]("", "parkingspot")

// ParkingspotsQuery is a query on the parkingspot table
type ParkingspotsQuery = *psql.ViewQuery[*Parkingspot, ParkingspotSlice]

// parkingspotR is where relationships are stored.
type parkingspotR struct {
	ParkingspotidBookings        BookingSlice        // booking.booking_parkingspotid_fkey
	UseridUser                   *User               // parkingspot.parkingspot_userid_fkey
	ParkingspotidPreferencespots PreferencespotSlice // preferencespot.preferencespot_parkingspotid_fkey
	ParkingspotidTimeunits       TimeunitSlice       // timeunit.timeunit_parkingspotid_fkey
}

type parkingspotColumnNames struct {
	Parkingspotid      string
	Userid             string
	Parkingspotuuid    string
	Postalcode         string
	Countrycode        string
	City               string
	State              string
	Streetaddress      string
	Longitude          string
	Latitude           string
	Hasshelter         string
	Hasplugin          string
	Haschargingstation string
	Priceperhour       string
}

var ParkingspotColumns = buildParkingspotColumns("parkingspot")

type parkingspotColumns struct {
	tableAlias         string
	Parkingspotid      psql.Expression
	Userid             psql.Expression
	Parkingspotuuid    psql.Expression
	Postalcode         psql.Expression
	Countrycode        psql.Expression
	City               psql.Expression
	State              psql.Expression
	Streetaddress      psql.Expression
	Longitude          psql.Expression
	Latitude           psql.Expression
	Hasshelter         psql.Expression
	Hasplugin          psql.Expression
	Haschargingstation psql.Expression
	Priceperhour       psql.Expression
}

func (c parkingspotColumns) Alias() string {
	return c.tableAlias
}

func (parkingspotColumns) AliasedAs(alias string) parkingspotColumns {
	return buildParkingspotColumns(alias)
}

func buildParkingspotColumns(alias string) parkingspotColumns {
	return parkingspotColumns{
		tableAlias:         alias,
		Parkingspotid:      psql.Quote(alias, "parkingspotid"),
		Userid:             psql.Quote(alias, "userid"),
		Parkingspotuuid:    psql.Quote(alias, "parkingspotuuid"),
		Postalcode:         psql.Quote(alias, "postalcode"),
		Countrycode:        psql.Quote(alias, "countrycode"),
		City:               psql.Quote(alias, "city"),
		State:              psql.Quote(alias, "state"),
		Streetaddress:      psql.Quote(alias, "streetaddress"),
		Longitude:          psql.Quote(alias, "longitude"),
		Latitude:           psql.Quote(alias, "latitude"),
		Hasshelter:         psql.Quote(alias, "hasshelter"),
		Hasplugin:          psql.Quote(alias, "hasplugin"),
		Haschargingstation: psql.Quote(alias, "haschargingstation"),
		Priceperhour:       psql.Quote(alias, "priceperhour"),
	}
}

type parkingspotWhere[Q psql.Filterable] struct {
	Parkingspotid      psql.WhereMod[Q, int64]
	Userid             psql.WhereMod[Q, int64]
	Parkingspotuuid    psql.WhereMod[Q, uuid.UUID]
	Postalcode         psql.WhereMod[Q, string]
	Countrycode        psql.WhereMod[Q, string]
	City               psql.WhereMod[Q, string]
	State              psql.WhereMod[Q, string]
	Streetaddress      psql.WhereMod[Q, string]
	Longitude          psql.WhereMod[Q, decimal.Decimal]
	Latitude           psql.WhereMod[Q, decimal.Decimal]
	Hasshelter         psql.WhereMod[Q, bool]
	Hasplugin          psql.WhereMod[Q, bool]
	Haschargingstation psql.WhereMod[Q, bool]
	Priceperhour       psql.WhereMod[Q, decimal.Decimal]
}

func (parkingspotWhere[Q]) AliasedAs(alias string) parkingspotWhere[Q] {
	return buildParkingspotWhere[Q](buildParkingspotColumns(alias))
}

func buildParkingspotWhere[Q psql.Filterable](cols parkingspotColumns) parkingspotWhere[Q] {
	return parkingspotWhere[Q]{
		Parkingspotid:      psql.Where[Q, int64](cols.Parkingspotid),
		Userid:             psql.Where[Q, int64](cols.Userid),
		Parkingspotuuid:    psql.Where[Q, uuid.UUID](cols.Parkingspotuuid),
		Postalcode:         psql.Where[Q, string](cols.Postalcode),
		Countrycode:        psql.Where[Q, string](cols.Countrycode),
		City:               psql.Where[Q, string](cols.City),
		State:              psql.Where[Q, string](cols.State),
		Streetaddress:      psql.Where[Q, string](cols.Streetaddress),
		Longitude:          psql.Where[Q, decimal.Decimal](cols.Longitude),
		Latitude:           psql.Where[Q, decimal.Decimal](cols.Latitude),
		Hasshelter:         psql.Where[Q, bool](cols.Hasshelter),
		Hasplugin:          psql.Where[Q, bool](cols.Hasplugin),
		Haschargingstation: psql.Where[Q, bool](cols.Haschargingstation),
		Priceperhour:       psql.Where[Q, decimal.Decimal](cols.Priceperhour),
	}
}

var ParkingspotErrors = &parkingspotErrors{
	ErrUniqueParkingspotuuid: &errUniqueConstraint{s: "parkingspot_parkingspotuuid_key"},
}

type parkingspotErrors struct {
	ErrUniqueParkingspotuuid error
}

// ParkingspotSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ParkingspotSetter struct {
	Parkingspotid      omit.Val[int64]           `db:"parkingspotid,pk" `
	Userid             omit.Val[int64]           `db:"userid" `
	Parkingspotuuid    omit.Val[uuid.UUID]       `db:"parkingspotuuid" `
	Postalcode         omit.Val[string]          `db:"postalcode" `
	Countrycode        omit.Val[string]          `db:"countrycode" `
	City               omit.Val[string]          `db:"city" `
	State              omit.Val[string]          `db:"state" `
	Streetaddress      omit.Val[string]          `db:"streetaddress" `
	Longitude          omit.Val[decimal.Decimal] `db:"longitude" `
	Latitude           omit.Val[decimal.Decimal] `db:"latitude" `
	Hasshelter         omit.Val[bool]            `db:"hasshelter" `
	Hasplugin          omit.Val[bool]            `db:"hasplugin" `
	Haschargingstation omit.Val[bool]            `db:"haschargingstation" `
	Priceperhour       omit.Val[decimal.Decimal] `db:"priceperhour" `
}

func (s ParkingspotSetter) SetColumns() []string {
	vals := make([]string, 0, 14)
	if !s.Parkingspotid.IsUnset() {
		vals = append(vals, "parkingspotid")
	}

	if !s.Userid.IsUnset() {
		vals = append(vals, "userid")
	}

	if !s.Parkingspotuuid.IsUnset() {
		vals = append(vals, "parkingspotuuid")
	}

	if !s.Postalcode.IsUnset() {
		vals = append(vals, "postalcode")
	}

	if !s.Countrycode.IsUnset() {
		vals = append(vals, "countrycode")
	}

	if !s.City.IsUnset() {
		vals = append(vals, "city")
	}

	if !s.State.IsUnset() {
		vals = append(vals, "state")
	}

	if !s.Streetaddress.IsUnset() {
		vals = append(vals, "streetaddress")
	}

	if !s.Longitude.IsUnset() {
		vals = append(vals, "longitude")
	}

	if !s.Latitude.IsUnset() {
		vals = append(vals, "latitude")
	}

	if !s.Hasshelter.IsUnset() {
		vals = append(vals, "hasshelter")
	}

	if !s.Hasplugin.IsUnset() {
		vals = append(vals, "hasplugin")
	}

	if !s.Haschargingstation.IsUnset() {
		vals = append(vals, "haschargingstation")
	}

	if !s.Priceperhour.IsUnset() {
		vals = append(vals, "priceperhour")
	}

	return vals
}

func (s ParkingspotSetter) Overwrite(t *Parkingspot) {
	if !s.Parkingspotid.IsUnset() {
		t.Parkingspotid, _ = s.Parkingspotid.Get()
	}
	if !s.Userid.IsUnset() {
		t.Userid, _ = s.Userid.Get()
	}
	if !s.Parkingspotuuid.IsUnset() {
		t.Parkingspotuuid, _ = s.Parkingspotuuid.Get()
	}
	if !s.Postalcode.IsUnset() {
		t.Postalcode, _ = s.Postalcode.Get()
	}
	if !s.Countrycode.IsUnset() {
		t.Countrycode, _ = s.Countrycode.Get()
	}
	if !s.City.IsUnset() {
		t.City, _ = s.City.Get()
	}
	if !s.State.IsUnset() {
		t.State, _ = s.State.Get()
	}
	if !s.Streetaddress.IsUnset() {
		t.Streetaddress, _ = s.Streetaddress.Get()
	}
	if !s.Longitude.IsUnset() {
		t.Longitude, _ = s.Longitude.Get()
	}
	if !s.Latitude.IsUnset() {
		t.Latitude, _ = s.Latitude.Get()
	}
	if !s.Hasshelter.IsUnset() {
		t.Hasshelter, _ = s.Hasshelter.Get()
	}
	if !s.Hasplugin.IsUnset() {
		t.Hasplugin, _ = s.Hasplugin.Get()
	}
	if !s.Haschargingstation.IsUnset() {
		t.Haschargingstation, _ = s.Haschargingstation.Get()
	}
	if !s.Priceperhour.IsUnset() {
		t.Priceperhour, _ = s.Priceperhour.Get()
	}
}

func (s *ParkingspotSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Parkingspots.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 14)
		if s.Parkingspotid.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.Parkingspotid)
		}

		if s.Userid.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Userid)
		}

		if s.Parkingspotuuid.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Parkingspotuuid)
		}

		if s.Postalcode.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Postalcode)
		}

		if s.Countrycode.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Countrycode)
		}

		if s.City.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.City)
		}

		if s.State.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.State)
		}

		if s.Streetaddress.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.Streetaddress)
		}

		if s.Longitude.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.Longitude)
		}

		if s.Latitude.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.Latitude)
		}

		if s.Hasshelter.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.Hasshelter)
		}

		if s.Hasplugin.IsUnset() {
			vals[11] = psql.Raw("DEFAULT")
		} else {
			vals[11] = psql.Arg(s.Hasplugin)
		}

		if s.Haschargingstation.IsUnset() {
			vals[12] = psql.Raw("DEFAULT")
		} else {
			vals[12] = psql.Arg(s.Haschargingstation)
		}

		if s.Priceperhour.IsUnset() {
			vals[13] = psql.Raw("DEFAULT")
		} else {
			vals[13] = psql.Arg(s.Priceperhour)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ParkingspotSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ParkingspotSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 14)

	if !s.Parkingspotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotid")...),
			psql.Arg(s.Parkingspotid),
		}})
	}

	if !s.Userid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "userid")...),
			psql.Arg(s.Userid),
		}})
	}

	if !s.Parkingspotuuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotuuid")...),
			psql.Arg(s.Parkingspotuuid),
		}})
	}

	if !s.Postalcode.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "postalcode")...),
			psql.Arg(s.Postalcode),
		}})
	}

	if !s.Countrycode.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "countrycode")...),
			psql.Arg(s.Countrycode),
		}})
	}

	if !s.City.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "city")...),
			psql.Arg(s.City),
		}})
	}

	if !s.State.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "state")...),
			psql.Arg(s.State),
		}})
	}

	if !s.Streetaddress.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "streetaddress")...),
			psql.Arg(s.Streetaddress),
		}})
	}

	if !s.Longitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "longitude")...),
			psql.Arg(s.Longitude),
		}})
	}

	if !s.Latitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "latitude")...),
			psql.Arg(s.Latitude),
		}})
	}

	if !s.Hasshelter.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "hasshelter")...),
			psql.Arg(s.Hasshelter),
		}})
	}

	if !s.Hasplugin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "hasplugin")...),
			psql.Arg(s.Hasplugin),
		}})
	}

	if !s.Haschargingstation.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "haschargingstation")...),
			psql.Arg(s.Haschargingstation),
		}})
	}

	if !s.Priceperhour.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "priceperhour")...),
			psql.Arg(s.Priceperhour),
		}})
	}

	return exprs
}

// FindParkingspot retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindParkingspot(ctx context.Context, exec bob.Executor, ParkingspotidPK int64, cols ...string) (*Parkingspot, error) {
	if len(cols) == 0 {
		return Parkingspots.Query(
			SelectWhere.Parkingspots.Parkingspotid.EQ(ParkingspotidPK),
		).One(ctx, exec)
	}

	return Parkingspots.Query(
		SelectWhere.Parkingspots.Parkingspotid.EQ(ParkingspotidPK),
		sm.Columns(Parkingspots.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ParkingspotExists checks the presence of a single record by primary key
func ParkingspotExists(ctx context.Context, exec bob.Executor, ParkingspotidPK int64) (bool, error) {
	return Parkingspots.Query(
		SelectWhere.Parkingspots.Parkingspotid.EQ(ParkingspotidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Parkingspot is retrieved from the database
func (o *Parkingspot) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Parkingspots.AfterSelectHooks.RunHooks(ctx, exec, ParkingspotSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Parkingspots.AfterInsertHooks.RunHooks(ctx, exec, ParkingspotSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Parkingspots.AfterUpdateHooks.RunHooks(ctx, exec, ParkingspotSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Parkingspots.AfterDeleteHooks.RunHooks(ctx, exec, ParkingspotSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Parkingspot
func (o *Parkingspot) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Parkingspotid)
}

func (o *Parkingspot) pkEQ() dialect.Expression {
	return psql.Quote("parkingspot", "parkingspotid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Parkingspot
func (o *Parkingspot) Update(ctx context.Context, exec bob.Executor, s *ParkingspotSetter) error {
	v, err := Parkingspots.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Parkingspot record with an executor
func (o *Parkingspot) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Parkingspots.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Parkingspot using the executor
func (o *Parkingspot) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Parkingspots.Query(
		SelectWhere.Parkingspots.Parkingspotid.EQ(o.Parkingspotid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ParkingspotSlice is retrieved from the database
func (o ParkingspotSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Parkingspots.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Parkingspots.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Parkingspots.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Parkingspots.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ParkingspotSlice) pkIN() dialect.Expression {
	return psql.Quote("parkingspot", "parkingspotid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ParkingspotSlice) copyMatchingRows(from ...*Parkingspot) {
	for i, old := range o {
		for _, new := range from {
			if new.Parkingspotid != old.Parkingspotid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ParkingspotSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Parkingspots.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Parkingspot:
				o.copyMatchingRows(retrieved)
			case []*Parkingspot:
				o.copyMatchingRows(retrieved...)
			case ParkingspotSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Parkingspot or a slice of Parkingspot
				// then run the AfterUpdateHooks on the slice
				_, err = Parkingspots.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ParkingspotSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Parkingspots.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Parkingspot:
				o.copyMatchingRows(retrieved)
			case []*Parkingspot:
				o.copyMatchingRows(retrieved...)
			case ParkingspotSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Parkingspot or a slice of Parkingspot
				// then run the AfterDeleteHooks on the slice
				_, err = Parkingspots.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ParkingspotSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ParkingspotSetter) error {
	_, err := Parkingspots.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ParkingspotSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	_, err := Parkingspots.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ParkingspotSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	o2, err := Parkingspots.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type parkingspotJoins[Q dialect.Joinable] struct {
	typ                          string
	ParkingspotidBookings        func(context.Context) modAs[Q, bookingColumns]
	UseridUser                   func(context.Context) modAs[Q, userColumns]
	ParkingspotidPreferencespots func(context.Context) modAs[Q, preferencespotColumns]
	ParkingspotidTimeunits       func(context.Context) modAs[Q, timeunitColumns]
}

func (j parkingspotJoins[Q]) aliasedAs(alias string) parkingspotJoins[Q] {
	return buildParkingspotJoins[Q](buildParkingspotColumns(alias), j.typ)
}

func buildParkingspotJoins[Q dialect.Joinable](cols parkingspotColumns, typ string) parkingspotJoins[Q] {
	return parkingspotJoins[Q]{
		typ:                          typ,
		ParkingspotidBookings:        parkingspotsJoinParkingspotidBookings[Q](cols, typ),
		UseridUser:                   parkingspotsJoinUseridUser[Q](cols, typ),
		ParkingspotidPreferencespots: parkingspotsJoinParkingspotidPreferencespots[Q](cols, typ),
		ParkingspotidTimeunits:       parkingspotsJoinParkingspotidTimeunits[Q](cols, typ),
	}
}

func parkingspotsJoinParkingspotidBookings[Q dialect.Joinable](from parkingspotColumns, typ string) func(context.Context) modAs[Q, bookingColumns] {
	return func(ctx context.Context) modAs[Q, bookingColumns] {
		return modAs[Q, bookingColumns]{
			c: BookingColumns,
			f: func(to bookingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Bookings.Name().As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

func parkingspotsJoinUseridUser[Q dialect.Joinable](from parkingspotColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func parkingspotsJoinParkingspotidPreferencespots[Q dialect.Joinable](from parkingspotColumns, typ string) func(context.Context) modAs[Q, preferencespotColumns] {
	return func(ctx context.Context) modAs[Q, preferencespotColumns] {
		return modAs[Q, preferencespotColumns]{
			c: PreferencespotColumns,
			f: func(to preferencespotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Preferencespots.Name().As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

func parkingspotsJoinParkingspotidTimeunits[Q dialect.Joinable](from parkingspotColumns, typ string) func(context.Context) modAs[Q, timeunitColumns] {
	return func(ctx context.Context) modAs[Q, timeunitColumns] {
		return modAs[Q, timeunitColumns]{
			c: TimeunitColumns,
			f: func(to timeunitColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Timeunits.Name().As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

// ParkingspotidBookings starts a query for related objects on booking
func (o *Parkingspot) ParkingspotidBookings(mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	return Bookings.Query(append(mods,
		sm.Where(BookingColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os ParkingspotSlice) ParkingspotidBookings(mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Bookings.Query(append(mods,
		sm.Where(psql.Group(BookingColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

// UseridUser starts a query for related objects on users
func (o *Parkingspot) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os ParkingspotSlice) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Userid).In(PKArgs...)),
	)...)
}

// ParkingspotidPreferencespots starts a query for related objects on preferencespot
func (o *Parkingspot) ParkingspotidPreferencespots(mods ...bob.Mod[*dialect.SelectQuery]) PreferencespotsQuery {
	return Preferencespots.Query(append(mods,
		sm.Where(PreferencespotColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os ParkingspotSlice) ParkingspotidPreferencespots(mods ...bob.Mod[*dialect.SelectQuery]) PreferencespotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Preferencespots.Query(append(mods,
		sm.Where(psql.Group(PreferencespotColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

// ParkingspotidTimeunits starts a query for related objects on timeunit
func (o *Parkingspot) ParkingspotidTimeunits(mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	return Timeunits.Query(append(mods,
		sm.Where(TimeunitColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os ParkingspotSlice) ParkingspotidTimeunits(mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Timeunits.Query(append(mods,
		sm.Where(psql.Group(TimeunitColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

func (o *Parkingspot) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ParkingspotidBookings":
		rels, ok := retrieved.(BookingSlice)
		if !ok {
			return fmt.Errorf("parkingspot cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidBookings = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ParkingspotidParkingspot = o
			}
		}
		return nil
	case "UseridUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("parkingspot cannot load %T as %q", retrieved, name)
		}

		o.R.UseridUser = rel

		if rel != nil {
			rel.R.UseridParkingspots = ParkingspotSlice{o}
		}
		return nil
	case "ParkingspotidPreferencespots":
		rels, ok := retrieved.(PreferencespotSlice)
		if !ok {
			return fmt.Errorf("parkingspot cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidPreferencespots = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ParkingspotidParkingspot = o
			}
		}
		return nil
	case "ParkingspotidTimeunits":
		rels, ok := retrieved.(TimeunitSlice)
		if !ok {
			return fmt.Errorf("parkingspot cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidTimeunits = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ParkingspotidParkingspot = o
			}
		}
		return nil
	default:
		return fmt.Errorf("parkingspot has no relationship %q", name)
	}
}

func ThenLoadParkingspotParkingspotidBookings(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadParkingspotParkingspotidBookings(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ParkingspotParkingspotidBookings", retrieved)
		}

		err := loader.LoadParkingspotParkingspotidBookings(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadParkingspotParkingspotidBookings loads the parkingspot's ParkingspotidBookings into the .R struct
func (o *Parkingspot) LoadParkingspotParkingspotidBookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidBookings = nil

	related, err := o.ParkingspotidBookings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = o
	}

	o.R.ParkingspotidBookings = related
	return nil
}

// LoadParkingspotParkingspotidBookings loads the parkingspot's ParkingspotidBookings into the .R struct
func (os ParkingspotSlice) LoadParkingspotParkingspotidBookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	bookings, err := os.ParkingspotidBookings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ParkingspotidBookings = nil
	}

	for _, o := range os {
		for _, rel := range bookings {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidParkingspot = o

			o.R.ParkingspotidBookings = append(o.R.ParkingspotidBookings, rel)
		}
	}

	return nil
}

func PreloadParkingspotUseridUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "UseridUser",
		Sides: []orm.RelSide{
			{
				From: TableNames.Parkingspots,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Parkingspots.Userid,
				},
				ToColumns: []string{
					ColumnNames.Users.Userid,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadParkingspotUseridUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadParkingspotUseridUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ParkingspotUseridUser", retrieved)
		}

		err := loader.LoadParkingspotUseridUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadParkingspotUseridUser loads the parkingspot's UseridUser into the .R struct
func (o *Parkingspot) LoadParkingspotUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridUser = nil

	related, err := o.UseridUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UseridParkingspots = ParkingspotSlice{o}

	o.R.UseridUser = related
	return nil
}

// LoadParkingspotUseridUser loads the parkingspot's UseridUser into the .R struct
func (os ParkingspotSlice) LoadParkingspotUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UseridUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridParkingspots = append(rel.R.UseridParkingspots, o)

			o.R.UseridUser = rel
			break
		}
	}

	return nil
}

func ThenLoadParkingspotParkingspotidPreferencespots(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadParkingspotParkingspotidPreferencespots(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ParkingspotParkingspotidPreferencespots", retrieved)
		}

		err := loader.LoadParkingspotParkingspotidPreferencespots(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadParkingspotParkingspotidPreferencespots loads the parkingspot's ParkingspotidPreferencespots into the .R struct
func (o *Parkingspot) LoadParkingspotParkingspotidPreferencespots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidPreferencespots = nil

	related, err := o.ParkingspotidPreferencespots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = o
	}

	o.R.ParkingspotidPreferencespots = related
	return nil
}

// LoadParkingspotParkingspotidPreferencespots loads the parkingspot's ParkingspotidPreferencespots into the .R struct
func (os ParkingspotSlice) LoadParkingspotParkingspotidPreferencespots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	preferencespots, err := os.ParkingspotidPreferencespots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ParkingspotidPreferencespots = nil
	}

	for _, o := range os {
		for _, rel := range preferencespots {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidParkingspot = o

			o.R.ParkingspotidPreferencespots = append(o.R.ParkingspotidPreferencespots, rel)
		}
	}

	return nil
}

func ThenLoadParkingspotParkingspotidTimeunits(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadParkingspotParkingspotidTimeunits(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ParkingspotParkingspotidTimeunits", retrieved)
		}

		err := loader.LoadParkingspotParkingspotidTimeunits(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadParkingspotParkingspotidTimeunits loads the parkingspot's ParkingspotidTimeunits into the .R struct
func (o *Parkingspot) LoadParkingspotParkingspotidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidTimeunits = nil

	related, err := o.ParkingspotidTimeunits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = o
	}

	o.R.ParkingspotidTimeunits = related
	return nil
}

// LoadParkingspotParkingspotidTimeunits loads the parkingspot's ParkingspotidTimeunits into the .R struct
func (os ParkingspotSlice) LoadParkingspotParkingspotidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	timeunits, err := os.ParkingspotidTimeunits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ParkingspotidTimeunits = nil
	}

	for _, o := range os {
		for _, rel := range timeunits {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidParkingspot = o

			o.R.ParkingspotidTimeunits = append(o.R.ParkingspotidTimeunits, rel)
		}
	}

	return nil
}

func insertParkingspotParkingspotidBookings0(ctx context.Context, exec bob.Executor, bookings1 []*BookingSetter, parkingspot0 *Parkingspot) (BookingSlice, error) {
	for i := range bookings1 {
		bookings1[i].Parkingspotid = omit.From(parkingspot0.Parkingspotid)
	}

	ret, err := Bookings.Insert(bob.ToMods(bookings1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertParkingspotParkingspotidBookings0: %w", err)
	}

	return ret, nil
}

func attachParkingspotParkingspotidBookings0(ctx context.Context, exec bob.Executor, count int, bookings1 BookingSlice, parkingspot0 *Parkingspot) (BookingSlice, error) {
	setter := &BookingSetter{
		Parkingspotid: omit.From(parkingspot0.Parkingspotid),
	}

	err := bookings1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachParkingspotParkingspotidBookings0: %w", err)
	}

	return bookings1, nil
}

func (parkingspot0 *Parkingspot) InsertParkingspotidBookings(ctx context.Context, exec bob.Executor, related ...*BookingSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	bookings1, err := insertParkingspotParkingspotidBookings0(ctx, exec, related, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidBookings = append(parkingspot0.R.ParkingspotidBookings, bookings1...)

	for _, rel := range bookings1 {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}
	return nil
}

func (parkingspot0 *Parkingspot) AttachParkingspotidBookings(ctx context.Context, exec bob.Executor, related ...*Booking) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	bookings1 := BookingSlice(related)

	_, err = attachParkingspotParkingspotidBookings0(ctx, exec, len(related), bookings1, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidBookings = append(parkingspot0.R.ParkingspotidBookings, bookings1...)

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}

	return nil
}

func attachParkingspotUseridUser0(ctx context.Context, exec bob.Executor, count int, parkingspot0 *Parkingspot, user1 *User) (*Parkingspot, error) {
	setter := &ParkingspotSetter{
		Userid: omit.From(user1.Userid),
	}

	err := parkingspot0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachParkingspotUseridUser0: %w", err)
	}

	return parkingspot0, nil
}

func (parkingspot0 *Parkingspot) InsertUseridUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachParkingspotUseridUser0(ctx, exec, 1, parkingspot0, user1)
	if err != nil {
		return err
	}

	parkingspot0.R.UseridUser = user1

	user1.R.UseridParkingspots = append(user1.R.UseridParkingspots, parkingspot0)

	return nil
}

func (parkingspot0 *Parkingspot) AttachUseridUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachParkingspotUseridUser0(ctx, exec, 1, parkingspot0, user1)
	if err != nil {
		return err
	}

	parkingspot0.R.UseridUser = user1

	user1.R.UseridParkingspots = append(user1.R.UseridParkingspots, parkingspot0)

	return nil
}

func insertParkingspotParkingspotidPreferencespots0(ctx context.Context, exec bob.Executor, preferencespots1 []*PreferencespotSetter, parkingspot0 *Parkingspot) (PreferencespotSlice, error) {
	for i := range preferencespots1 {
		preferencespots1[i].Parkingspotid = omit.From(parkingspot0.Parkingspotid)
	}

	ret, err := Preferencespots.Insert(bob.ToMods(preferencespots1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertParkingspotParkingspotidPreferencespots0: %w", err)
	}

	return ret, nil
}

func attachParkingspotParkingspotidPreferencespots0(ctx context.Context, exec bob.Executor, count int, preferencespots1 PreferencespotSlice, parkingspot0 *Parkingspot) (PreferencespotSlice, error) {
	setter := &PreferencespotSetter{
		Parkingspotid: omit.From(parkingspot0.Parkingspotid),
	}

	err := preferencespots1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachParkingspotParkingspotidPreferencespots0: %w", err)
	}

	return preferencespots1, nil
}

func (parkingspot0 *Parkingspot) InsertParkingspotidPreferencespots(ctx context.Context, exec bob.Executor, related ...*PreferencespotSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	preferencespots1, err := insertParkingspotParkingspotidPreferencespots0(ctx, exec, related, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidPreferencespots = append(parkingspot0.R.ParkingspotidPreferencespots, preferencespots1...)

	for _, rel := range preferencespots1 {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}
	return nil
}

func (parkingspot0 *Parkingspot) AttachParkingspotidPreferencespots(ctx context.Context, exec bob.Executor, related ...*Preferencespot) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	preferencespots1 := PreferencespotSlice(related)

	_, err = attachParkingspotParkingspotidPreferencespots0(ctx, exec, len(related), preferencespots1, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidPreferencespots = append(parkingspot0.R.ParkingspotidPreferencespots, preferencespots1...)

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}

	return nil
}

func insertParkingspotParkingspotidTimeunits0(ctx context.Context, exec bob.Executor, timeunits1 []*TimeunitSetter, parkingspot0 *Parkingspot) (TimeunitSlice, error) {
	for i := range timeunits1 {
		timeunits1[i].Parkingspotid = omit.From(parkingspot0.Parkingspotid)
	}

	ret, err := Timeunits.Insert(bob.ToMods(timeunits1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertParkingspotParkingspotidTimeunits0: %w", err)
	}

	return ret, nil
}

func attachParkingspotParkingspotidTimeunits0(ctx context.Context, exec bob.Executor, count int, timeunits1 TimeunitSlice, parkingspot0 *Parkingspot) (TimeunitSlice, error) {
	setter := &TimeunitSetter{
		Parkingspotid: omit.From(parkingspot0.Parkingspotid),
	}

	err := timeunits1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachParkingspotParkingspotidTimeunits0: %w", err)
	}

	return timeunits1, nil
}

func (parkingspot0 *Parkingspot) InsertParkingspotidTimeunits(ctx context.Context, exec bob.Executor, related ...*TimeunitSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	timeunits1, err := insertParkingspotParkingspotidTimeunits0(ctx, exec, related, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidTimeunits = append(parkingspot0.R.ParkingspotidTimeunits, timeunits1...)

	for _, rel := range timeunits1 {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}
	return nil
}

func (parkingspot0 *Parkingspot) AttachParkingspotidTimeunits(ctx context.Context, exec bob.Executor, related ...*Timeunit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	timeunits1 := TimeunitSlice(related)

	_, err = attachParkingspotParkingspotidTimeunits0(ctx, exec, len(related), timeunits1, parkingspot0)
	if err != nil {
		return err
	}

	parkingspot0.R.ParkingspotidTimeunits = append(parkingspot0.R.ParkingspotidTimeunits, timeunits1...)

	for _, rel := range related {
		rel.R.ParkingspotidParkingspot = parkingspot0
	}

	return nil
}
