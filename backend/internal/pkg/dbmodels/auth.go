// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Auth is an object representing the database table.
type Auth struct {
	Authid       int32     `db:"authid,pk" `
	Authuuid     uuid.UUID `db:"authuuid" `
	Email        string    `db:"email" `
	Passwordhash string    `db:"passwordhash" `

	R authR `db:"-" `
}

// AuthSlice is an alias for a slice of pointers to Auth.
// This should almost always be used instead of []*Auth.
type AuthSlice []*Auth

// Auths contains methods to work with the auth table
var Auths = psql.NewTablex[*Auth, AuthSlice, *AuthSetter]("", "auth")

// AuthsQuery is a query on the auth table
type AuthsQuery = *psql.ViewQuery[*Auth, AuthSlice]

// authR is where relationships are stored.
type authR struct {
	AuthuuidResettoken *Resettoken // resettoken.resettoken_authuuid_fkey
	AuthuuidUser       *User       // users.users_authuuid_fkey
}

type authColumnNames struct {
	Authid       string
	Authuuid     string
	Email        string
	Passwordhash string
}

var AuthColumns = buildAuthColumns("auth")

type authColumns struct {
	tableAlias   string
	Authid       psql.Expression
	Authuuid     psql.Expression
	Email        psql.Expression
	Passwordhash psql.Expression
}

func (c authColumns) Alias() string {
	return c.tableAlias
}

func (authColumns) AliasedAs(alias string) authColumns {
	return buildAuthColumns(alias)
}

func buildAuthColumns(alias string) authColumns {
	return authColumns{
		tableAlias:   alias,
		Authid:       psql.Quote(alias, "authid"),
		Authuuid:     psql.Quote(alias, "authuuid"),
		Email:        psql.Quote(alias, "email"),
		Passwordhash: psql.Quote(alias, "passwordhash"),
	}
}

type authWhere[Q psql.Filterable] struct {
	Authid       psql.WhereMod[Q, int32]
	Authuuid     psql.WhereMod[Q, uuid.UUID]
	Email        psql.WhereMod[Q, string]
	Passwordhash psql.WhereMod[Q, string]
}

func (authWhere[Q]) AliasedAs(alias string) authWhere[Q] {
	return buildAuthWhere[Q](buildAuthColumns(alias))
}

func buildAuthWhere[Q psql.Filterable](cols authColumns) authWhere[Q] {
	return authWhere[Q]{
		Authid:       psql.Where[Q, int32](cols.Authid),
		Authuuid:     psql.Where[Q, uuid.UUID](cols.Authuuid),
		Email:        psql.Where[Q, string](cols.Email),
		Passwordhash: psql.Where[Q, string](cols.Passwordhash),
	}
}

var AuthErrors = &authErrors{
	ErrUniqueAuthuuid: &errUniqueConstraint{s: "auth_authuuid_key"},

	ErrUniqueEmail: &errUniqueConstraint{s: "auth_email_key"},
}

type authErrors struct {
	ErrUniqueAuthuuid error

	ErrUniqueEmail error
}

// AuthSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AuthSetter struct {
	Authid       omit.Val[int32]     `db:"authid,pk" `
	Authuuid     omit.Val[uuid.UUID] `db:"authuuid" `
	Email        omit.Val[string]    `db:"email" `
	Passwordhash omit.Val[string]    `db:"passwordhash" `
}

func (s AuthSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.Authid.IsUnset() {
		vals = append(vals, "authid")
	}

	if !s.Authuuid.IsUnset() {
		vals = append(vals, "authuuid")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	if !s.Passwordhash.IsUnset() {
		vals = append(vals, "passwordhash")
	}

	return vals
}

func (s AuthSetter) Overwrite(t *Auth) {
	if !s.Authid.IsUnset() {
		t.Authid, _ = s.Authid.Get()
	}
	if !s.Authuuid.IsUnset() {
		t.Authuuid, _ = s.Authuuid.Get()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.Get()
	}
	if !s.Passwordhash.IsUnset() {
		t.Passwordhash, _ = s.Passwordhash.Get()
	}
}

func (s *AuthSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Auths.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.Authid.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.Authid)
		}

		if s.Authuuid.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Authuuid)
		}

		if s.Email.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Email)
		}

		if s.Passwordhash.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Passwordhash)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AuthSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AuthSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.Authid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "authid")...),
			psql.Arg(s.Authid),
		}})
	}

	if !s.Authuuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "authuuid")...),
			psql.Arg(s.Authuuid),
		}})
	}

	if !s.Email.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if !s.Passwordhash.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "passwordhash")...),
			psql.Arg(s.Passwordhash),
		}})
	}

	return exprs
}

// FindAuth retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAuth(ctx context.Context, exec bob.Executor, AuthidPK int32, cols ...string) (*Auth, error) {
	if len(cols) == 0 {
		return Auths.Query(
			SelectWhere.Auths.Authid.EQ(AuthidPK),
		).One(ctx, exec)
	}

	return Auths.Query(
		SelectWhere.Auths.Authid.EQ(AuthidPK),
		sm.Columns(Auths.Columns().Only(cols...)),
	).One(ctx, exec)
}

// AuthExists checks the presence of a single record by primary key
func AuthExists(ctx context.Context, exec bob.Executor, AuthidPK int32) (bool, error) {
	return Auths.Query(
		SelectWhere.Auths.Authid.EQ(AuthidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Auth is retrieved from the database
func (o *Auth) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Auths.AfterSelectHooks.RunHooks(ctx, exec, AuthSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Auths.AfterInsertHooks.RunHooks(ctx, exec, AuthSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Auths.AfterUpdateHooks.RunHooks(ctx, exec, AuthSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Auths.AfterDeleteHooks.RunHooks(ctx, exec, AuthSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Auth
func (o *Auth) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Authid)
}

func (o *Auth) pkEQ() dialect.Expression {
	return psql.Quote("auth", "authid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Auth
func (o *Auth) Update(ctx context.Context, exec bob.Executor, s *AuthSetter) error {
	v, err := Auths.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Auth record with an executor
func (o *Auth) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Auths.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Auth using the executor
func (o *Auth) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Auths.Query(
		SelectWhere.Auths.Authid.EQ(o.Authid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after AuthSlice is retrieved from the database
func (o AuthSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Auths.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Auths.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Auths.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Auths.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AuthSlice) pkIN() dialect.Expression {
	return psql.Quote("auth", "authid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AuthSlice) copyMatchingRows(from ...*Auth) {
	for i, old := range o {
		for _, new := range from {
			if new.Authid != old.Authid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AuthSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Auths.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Auth:
				o.copyMatchingRows(retrieved)
			case []*Auth:
				o.copyMatchingRows(retrieved...)
			case AuthSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Auth or a slice of Auth
				// then run the AfterUpdateHooks on the slice
				_, err = Auths.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AuthSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Auths.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Auth:
				o.copyMatchingRows(retrieved)
			case []*Auth:
				o.copyMatchingRows(retrieved...)
			case AuthSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Auth or a slice of Auth
				// then run the AfterDeleteHooks on the slice
				_, err = Auths.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AuthSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AuthSetter) error {
	_, err := Auths.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AuthSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	_, err := Auths.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AuthSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	o2, err := Auths.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type authJoins[Q dialect.Joinable] struct {
	typ                string
	AuthuuidResettoken func(context.Context) modAs[Q, resettokenColumns]
	AuthuuidUser       func(context.Context) modAs[Q, userColumns]
}

func (j authJoins[Q]) aliasedAs(alias string) authJoins[Q] {
	return buildAuthJoins[Q](buildAuthColumns(alias), j.typ)
}

func buildAuthJoins[Q dialect.Joinable](cols authColumns, typ string) authJoins[Q] {
	return authJoins[Q]{
		typ:                typ,
		AuthuuidResettoken: authsJoinAuthuuidResettoken[Q](cols, typ),
		AuthuuidUser:       authsJoinAuthuuidUser[Q](cols, typ),
	}
}

func authsJoinAuthuuidResettoken[Q dialect.Joinable](from authColumns, typ string) func(context.Context) modAs[Q, resettokenColumns] {
	return func(ctx context.Context) modAs[Q, resettokenColumns] {
		return modAs[Q, resettokenColumns]{
			c: ResettokenColumns,
			f: func(to resettokenColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Resettokens.Name().As(to.Alias())).On(
						to.Authuuid.EQ(from.Authuuid),
					))
				}

				return mods
			},
		}
	}
}

func authsJoinAuthuuidUser[Q dialect.Joinable](from authColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Authuuid.EQ(from.Authuuid),
					))
				}

				return mods
			},
		}
	}
}

// AuthuuidResettoken starts a query for related objects on resettoken
func (o *Auth) AuthuuidResettoken(mods ...bob.Mod[*dialect.SelectQuery]) ResettokensQuery {
	return Resettokens.Query(append(mods,
		sm.Where(ResettokenColumns.Authuuid.EQ(psql.Arg(o.Authuuid))),
	)...)
}

func (os AuthSlice) AuthuuidResettoken(mods ...bob.Mod[*dialect.SelectQuery]) ResettokensQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Authuuid)
	}

	return Resettokens.Query(append(mods,
		sm.Where(psql.Group(ResettokenColumns.Authuuid).In(PKArgs...)),
	)...)
}

// AuthuuidUser starts a query for related objects on users
func (o *Auth) AuthuuidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Authuuid.EQ(psql.Arg(o.Authuuid))),
	)...)
}

func (os AuthSlice) AuthuuidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Authuuid)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Authuuid).In(PKArgs...)),
	)...)
}

func (o *Auth) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AuthuuidResettoken":
		rel, ok := retrieved.(*Resettoken)
		if !ok {
			return fmt.Errorf("auth cannot load %T as %q", retrieved, name)
		}

		o.R.AuthuuidResettoken = rel

		if rel != nil {
			rel.R.AuthuuidAuth = o
		}
		return nil
	case "AuthuuidUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("auth cannot load %T as %q", retrieved, name)
		}

		o.R.AuthuuidUser = rel

		if rel != nil {
			rel.R.AuthuuidAuth = o
		}
		return nil
	default:
		return fmt.Errorf("auth has no relationship %q", name)
	}
}

func PreloadAuthAuthuuidResettoken(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Resettoken, ResettokenSlice](orm.Relationship{
		Name: "AuthuuidResettoken",
		Sides: []orm.RelSide{
			{
				From: TableNames.Auths,
				To:   TableNames.Resettokens,
				FromColumns: []string{
					ColumnNames.Auths.Authuuid,
				},
				ToColumns: []string{
					ColumnNames.Resettokens.Authuuid,
				},
			},
		},
	}, Resettokens.Columns().Names(), opts...)
}

func ThenLoadAuthAuthuuidResettoken(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAuthAuthuuidResettoken(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AuthAuthuuidResettoken", retrieved)
		}

		err := loader.LoadAuthAuthuuidResettoken(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAuthAuthuuidResettoken loads the auth's AuthuuidResettoken into the .R struct
func (o *Auth) LoadAuthAuthuuidResettoken(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthuuidResettoken = nil

	related, err := o.AuthuuidResettoken(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AuthuuidAuth = o

	o.R.AuthuuidResettoken = related
	return nil
}

// LoadAuthAuthuuidResettoken loads the auth's AuthuuidResettoken into the .R struct
func (os AuthSlice) LoadAuthAuthuuidResettoken(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	resettokens, err := os.AuthuuidResettoken(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range resettokens {
			if o.Authuuid != rel.Authuuid {
				continue
			}

			rel.R.AuthuuidAuth = o

			o.R.AuthuuidResettoken = rel
			break
		}
	}

	return nil
}

func PreloadAuthAuthuuidUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "AuthuuidUser",
		Sides: []orm.RelSide{
			{
				From: TableNames.Auths,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Auths.Authuuid,
				},
				ToColumns: []string{
					ColumnNames.Users.Authuuid,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAuthAuthuuidUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAuthAuthuuidUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AuthAuthuuidUser", retrieved)
		}

		err := loader.LoadAuthAuthuuidUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAuthAuthuuidUser loads the auth's AuthuuidUser into the .R struct
func (o *Auth) LoadAuthAuthuuidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthuuidUser = nil

	related, err := o.AuthuuidUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AuthuuidAuth = o

	o.R.AuthuuidUser = related
	return nil
}

// LoadAuthAuthuuidUser loads the auth's AuthuuidUser into the .R struct
func (os AuthSlice) LoadAuthAuthuuidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.AuthuuidUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.Authuuid != rel.Authuuid {
				continue
			}

			rel.R.AuthuuidAuth = o

			o.R.AuthuuidUser = rel
			break
		}
	}

	return nil
}

func insertAuthAuthuuidResettoken0(ctx context.Context, exec bob.Executor, resettoken1 *ResettokenSetter, auth0 *Auth) (*Resettoken, error) {
	resettoken1.Authuuid = omit.From(auth0.Authuuid)

	ret, err := Resettokens.Insert(resettoken1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertAuthAuthuuidResettoken0: %w", err)
	}

	return ret, nil
}

func attachAuthAuthuuidResettoken0(ctx context.Context, exec bob.Executor, count int, resettoken1 *Resettoken, auth0 *Auth) (*Resettoken, error) {
	setter := &ResettokenSetter{
		Authuuid: omit.From(auth0.Authuuid),
	}

	err := resettoken1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAuthAuthuuidResettoken0: %w", err)
	}

	return resettoken1, nil
}

func (auth0 *Auth) InsertAuthuuidResettoken(ctx context.Context, exec bob.Executor, related *ResettokenSetter) error {
	resettoken1, err := insertAuthAuthuuidResettoken0(ctx, exec, related, auth0)
	if err != nil {
		return err
	}

	auth0.R.AuthuuidResettoken = resettoken1

	resettoken1.R.AuthuuidAuth = auth0

	return nil
}

func (auth0 *Auth) AttachAuthuuidResettoken(ctx context.Context, exec bob.Executor, resettoken1 *Resettoken) error {
	var err error

	_, err = attachAuthAuthuuidResettoken0(ctx, exec, 1, resettoken1, auth0)
	if err != nil {
		return err
	}

	auth0.R.AuthuuidResettoken = resettoken1

	resettoken1.R.AuthuuidAuth = auth0

	return nil
}

func insertAuthAuthuuidUser0(ctx context.Context, exec bob.Executor, user1 *UserSetter, auth0 *Auth) (*User, error) {
	user1.Authuuid = omit.From(auth0.Authuuid)

	ret, err := Users.Insert(user1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertAuthAuthuuidUser0: %w", err)
	}

	return ret, nil
}

func attachAuthAuthuuidUser0(ctx context.Context, exec bob.Executor, count int, user1 *User, auth0 *Auth) (*User, error) {
	setter := &UserSetter{
		Authuuid: omit.From(auth0.Authuuid),
	}

	err := user1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachAuthAuthuuidUser0: %w", err)
	}

	return user1, nil
}

func (auth0 *Auth) InsertAuthuuidUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := insertAuthAuthuuidUser0(ctx, exec, related, auth0)
	if err != nil {
		return err
	}

	auth0.R.AuthuuidUser = user1

	user1.R.AuthuuidAuth = auth0

	return nil
}

func (auth0 *Auth) AttachAuthuuidUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachAuthAuthuuidUser0(ctx, exec, 1, user1, auth0)
	if err != nil {
		return err
	}

	auth0.R.AuthuuidUser = user1

	user1.R.AuthuuidAuth = auth0

	return nil
}
