// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Preferencespot is an object representing the database table.
type Preferencespot struct {
	Preferencespotid int64 `db:"preferencespotid,pk" `
	Userid           int64 `db:"userid" `
	Parkingspotid    int64 `db:"parkingspotid" `

	R preferencespotR `db:"-" `
}

// PreferencespotSlice is an alias for a slice of pointers to Preferencespot.
// This should almost always be used instead of []*Preferencespot.
type PreferencespotSlice []*Preferencespot

// Preferencespots contains methods to work with the preferencespot table
var Preferencespots = psql.NewTablex[*Preferencespot, PreferencespotSlice, *PreferencespotSetter]("", "preferencespot")

// PreferencespotsQuery is a query on the preferencespot table
type PreferencespotsQuery = *psql.ViewQuery[*Preferencespot, PreferencespotSlice]

// preferencespotR is where relationships are stored.
type preferencespotR struct {
	ParkingspotidParkingspot *Parkingspot // preferencespot.preferencespot_parkingspotid_fkey
	UseridUser               *User        // preferencespot.preferencespot_userid_fkey
}

type preferencespotColumnNames struct {
	Preferencespotid string
	Userid           string
	Parkingspotid    string
}

var PreferencespotColumns = buildPreferencespotColumns("preferencespot")

type preferencespotColumns struct {
	tableAlias       string
	Preferencespotid psql.Expression
	Userid           psql.Expression
	Parkingspotid    psql.Expression
}

func (c preferencespotColumns) Alias() string {
	return c.tableAlias
}

func (preferencespotColumns) AliasedAs(alias string) preferencespotColumns {
	return buildPreferencespotColumns(alias)
}

func buildPreferencespotColumns(alias string) preferencespotColumns {
	return preferencespotColumns{
		tableAlias:       alias,
		Preferencespotid: psql.Quote(alias, "preferencespotid"),
		Userid:           psql.Quote(alias, "userid"),
		Parkingspotid:    psql.Quote(alias, "parkingspotid"),
	}
}

type preferencespotWhere[Q psql.Filterable] struct {
	Preferencespotid psql.WhereMod[Q, int64]
	Userid           psql.WhereMod[Q, int64]
	Parkingspotid    psql.WhereMod[Q, int64]
}

func (preferencespotWhere[Q]) AliasedAs(alias string) preferencespotWhere[Q] {
	return buildPreferencespotWhere[Q](buildPreferencespotColumns(alias))
}

func buildPreferencespotWhere[Q psql.Filterable](cols preferencespotColumns) preferencespotWhere[Q] {
	return preferencespotWhere[Q]{
		Preferencespotid: psql.Where[Q, int64](cols.Preferencespotid),
		Userid:           psql.Where[Q, int64](cols.Userid),
		Parkingspotid:    psql.Where[Q, int64](cols.Parkingspotid),
	}
}

// PreferencespotSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PreferencespotSetter struct {
	Preferencespotid omit.Val[int64] `db:"preferencespotid,pk" `
	Userid           omit.Val[int64] `db:"userid" `
	Parkingspotid    omit.Val[int64] `db:"parkingspotid" `
}

func (s PreferencespotSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.Preferencespotid.IsUnset() {
		vals = append(vals, "preferencespotid")
	}

	if !s.Userid.IsUnset() {
		vals = append(vals, "userid")
	}

	if !s.Parkingspotid.IsUnset() {
		vals = append(vals, "parkingspotid")
	}

	return vals
}

func (s PreferencespotSetter) Overwrite(t *Preferencespot) {
	if !s.Preferencespotid.IsUnset() {
		t.Preferencespotid, _ = s.Preferencespotid.Get()
	}
	if !s.Userid.IsUnset() {
		t.Userid, _ = s.Userid.Get()
	}
	if !s.Parkingspotid.IsUnset() {
		t.Parkingspotid, _ = s.Parkingspotid.Get()
	}
}

func (s *PreferencespotSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Preferencespots.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 3)
		if s.Preferencespotid.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.Preferencespotid)
		}

		if s.Userid.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Userid)
		}

		if s.Parkingspotid.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Parkingspotid)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PreferencespotSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PreferencespotSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.Preferencespotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "preferencespotid")...),
			psql.Arg(s.Preferencespotid),
		}})
	}

	if !s.Userid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "userid")...),
			psql.Arg(s.Userid),
		}})
	}

	if !s.Parkingspotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotid")...),
			psql.Arg(s.Parkingspotid),
		}})
	}

	return exprs
}

// FindPreferencespot retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPreferencespot(ctx context.Context, exec bob.Executor, PreferencespotidPK int64, cols ...string) (*Preferencespot, error) {
	if len(cols) == 0 {
		return Preferencespots.Query(
			SelectWhere.Preferencespots.Preferencespotid.EQ(PreferencespotidPK),
		).One(ctx, exec)
	}

	return Preferencespots.Query(
		SelectWhere.Preferencespots.Preferencespotid.EQ(PreferencespotidPK),
		sm.Columns(Preferencespots.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PreferencespotExists checks the presence of a single record by primary key
func PreferencespotExists(ctx context.Context, exec bob.Executor, PreferencespotidPK int64) (bool, error) {
	return Preferencespots.Query(
		SelectWhere.Preferencespots.Preferencespotid.EQ(PreferencespotidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Preferencespot is retrieved from the database
func (o *Preferencespot) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Preferencespots.AfterSelectHooks.RunHooks(ctx, exec, PreferencespotSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Preferencespots.AfterInsertHooks.RunHooks(ctx, exec, PreferencespotSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Preferencespots.AfterUpdateHooks.RunHooks(ctx, exec, PreferencespotSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Preferencespots.AfterDeleteHooks.RunHooks(ctx, exec, PreferencespotSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Preferencespot
func (o *Preferencespot) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Preferencespotid)
}

func (o *Preferencespot) pkEQ() dialect.Expression {
	return psql.Quote("preferencespot", "preferencespotid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Preferencespot
func (o *Preferencespot) Update(ctx context.Context, exec bob.Executor, s *PreferencespotSetter) error {
	v, err := Preferencespots.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Preferencespot record with an executor
func (o *Preferencespot) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Preferencespots.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Preferencespot using the executor
func (o *Preferencespot) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Preferencespots.Query(
		SelectWhere.Preferencespots.Preferencespotid.EQ(o.Preferencespotid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PreferencespotSlice is retrieved from the database
func (o PreferencespotSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Preferencespots.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Preferencespots.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Preferencespots.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Preferencespots.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PreferencespotSlice) pkIN() dialect.Expression {
	return psql.Quote("preferencespot", "preferencespotid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PreferencespotSlice) copyMatchingRows(from ...*Preferencespot) {
	for i, old := range o {
		for _, new := range from {
			if new.Preferencespotid != old.Preferencespotid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PreferencespotSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Preferencespots.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Preferencespot:
				o.copyMatchingRows(retrieved)
			case []*Preferencespot:
				o.copyMatchingRows(retrieved...)
			case PreferencespotSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Preferencespot or a slice of Preferencespot
				// then run the AfterUpdateHooks on the slice
				_, err = Preferencespots.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PreferencespotSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Preferencespots.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Preferencespot:
				o.copyMatchingRows(retrieved)
			case []*Preferencespot:
				o.copyMatchingRows(retrieved...)
			case PreferencespotSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Preferencespot or a slice of Preferencespot
				// then run the AfterDeleteHooks on the slice
				_, err = Preferencespots.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PreferencespotSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PreferencespotSetter) error {
	_, err := Preferencespots.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PreferencespotSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	_, err := Preferencespots.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PreferencespotSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	o2, err := Preferencespots.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type preferencespotJoins[Q dialect.Joinable] struct {
	typ                      string
	ParkingspotidParkingspot func(context.Context) modAs[Q, parkingspotColumns]
	UseridUser               func(context.Context) modAs[Q, userColumns]
}

func (j preferencespotJoins[Q]) aliasedAs(alias string) preferencespotJoins[Q] {
	return buildPreferencespotJoins[Q](buildPreferencespotColumns(alias), j.typ)
}

func buildPreferencespotJoins[Q dialect.Joinable](cols preferencespotColumns, typ string) preferencespotJoins[Q] {
	return preferencespotJoins[Q]{
		typ:                      typ,
		ParkingspotidParkingspot: preferencespotsJoinParkingspotidParkingspot[Q](cols, typ),
		UseridUser:               preferencespotsJoinUseridUser[Q](cols, typ),
	}
}

func preferencespotsJoinParkingspotidParkingspot[Q dialect.Joinable](from preferencespotColumns, typ string) func(context.Context) modAs[Q, parkingspotColumns] {
	return func(ctx context.Context) modAs[Q, parkingspotColumns] {
		return modAs[Q, parkingspotColumns]{
			c: ParkingspotColumns,
			f: func(to parkingspotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Parkingspots.Name().As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

func preferencespotsJoinUseridUser[Q dialect.Joinable](from preferencespotColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

// ParkingspotidParkingspot starts a query for related objects on parkingspot
func (o *Preferencespot) ParkingspotidParkingspot(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	return Parkingspots.Query(append(mods,
		sm.Where(ParkingspotColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os PreferencespotSlice) ParkingspotidParkingspot(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Parkingspots.Query(append(mods,
		sm.Where(psql.Group(ParkingspotColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

// UseridUser starts a query for related objects on users
func (o *Preferencespot) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os PreferencespotSlice) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Userid).In(PKArgs...)),
	)...)
}

func (o *Preferencespot) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ParkingspotidParkingspot":
		rel, ok := retrieved.(*Parkingspot)
		if !ok {
			return fmt.Errorf("preferencespot cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidParkingspot = rel

		if rel != nil {
			rel.R.ParkingspotidPreferencespots = PreferencespotSlice{o}
		}
		return nil
	case "UseridUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("preferencespot cannot load %T as %q", retrieved, name)
		}

		o.R.UseridUser = rel

		if rel != nil {
			rel.R.UseridPreferencespots = PreferencespotSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("preferencespot has no relationship %q", name)
	}
}

func PreloadPreferencespotParkingspotidParkingspot(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Parkingspot, ParkingspotSlice](orm.Relationship{
		Name: "ParkingspotidParkingspot",
		Sides: []orm.RelSide{
			{
				From: TableNames.Preferencespots,
				To:   TableNames.Parkingspots,
				FromColumns: []string{
					ColumnNames.Preferencespots.Parkingspotid,
				},
				ToColumns: []string{
					ColumnNames.Parkingspots.Parkingspotid,
				},
			},
		},
	}, Parkingspots.Columns().Names(), opts...)
}

func ThenLoadPreferencespotParkingspotidParkingspot(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPreferencespotParkingspotidParkingspot(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PreferencespotParkingspotidParkingspot", retrieved)
		}

		err := loader.LoadPreferencespotParkingspotidParkingspot(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPreferencespotParkingspotidParkingspot loads the preferencespot's ParkingspotidParkingspot into the .R struct
func (o *Preferencespot) LoadPreferencespotParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidParkingspot = nil

	related, err := o.ParkingspotidParkingspot(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ParkingspotidPreferencespots = PreferencespotSlice{o}

	o.R.ParkingspotidParkingspot = related
	return nil
}

// LoadPreferencespotParkingspotidParkingspot loads the preferencespot's ParkingspotidParkingspot into the .R struct
func (os PreferencespotSlice) LoadPreferencespotParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	parkingspots, err := os.ParkingspotidParkingspot(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range parkingspots {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidPreferencespots = append(rel.R.ParkingspotidPreferencespots, o)

			o.R.ParkingspotidParkingspot = rel
			break
		}
	}

	return nil
}

func PreloadPreferencespotUseridUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "UseridUser",
		Sides: []orm.RelSide{
			{
				From: TableNames.Preferencespots,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Preferencespots.Userid,
				},
				ToColumns: []string{
					ColumnNames.Users.Userid,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadPreferencespotUseridUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPreferencespotUseridUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PreferencespotUseridUser", retrieved)
		}

		err := loader.LoadPreferencespotUseridUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPreferencespotUseridUser loads the preferencespot's UseridUser into the .R struct
func (o *Preferencespot) LoadPreferencespotUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridUser = nil

	related, err := o.UseridUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UseridPreferencespots = PreferencespotSlice{o}

	o.R.UseridUser = related
	return nil
}

// LoadPreferencespotUseridUser loads the preferencespot's UseridUser into the .R struct
func (os PreferencespotSlice) LoadPreferencespotUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UseridUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridPreferencespots = append(rel.R.UseridPreferencespots, o)

			o.R.UseridUser = rel
			break
		}
	}

	return nil
}

func attachPreferencespotParkingspotidParkingspot0(ctx context.Context, exec bob.Executor, count int, preferencespot0 *Preferencespot, parkingspot1 *Parkingspot) (*Preferencespot, error) {
	setter := &PreferencespotSetter{
		Parkingspotid: omit.From(parkingspot1.Parkingspotid),
	}

	err := preferencespot0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPreferencespotParkingspotidParkingspot0: %w", err)
	}

	return preferencespot0, nil
}

func (preferencespot0 *Preferencespot) InsertParkingspotidParkingspot(ctx context.Context, exec bob.Executor, related *ParkingspotSetter) error {
	parkingspot1, err := Parkingspots.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPreferencespotParkingspotidParkingspot0(ctx, exec, 1, preferencespot0, parkingspot1)
	if err != nil {
		return err
	}

	preferencespot0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidPreferencespots = append(parkingspot1.R.ParkingspotidPreferencespots, preferencespot0)

	return nil
}

func (preferencespot0 *Preferencespot) AttachParkingspotidParkingspot(ctx context.Context, exec bob.Executor, parkingspot1 *Parkingspot) error {
	var err error

	_, err = attachPreferencespotParkingspotidParkingspot0(ctx, exec, 1, preferencespot0, parkingspot1)
	if err != nil {
		return err
	}

	preferencespot0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidPreferencespots = append(parkingspot1.R.ParkingspotidPreferencespots, preferencespot0)

	return nil
}

func attachPreferencespotUseridUser0(ctx context.Context, exec bob.Executor, count int, preferencespot0 *Preferencespot, user1 *User) (*Preferencespot, error) {
	setter := &PreferencespotSetter{
		Userid: omit.From(user1.Userid),
	}

	err := preferencespot0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPreferencespotUseridUser0: %w", err)
	}

	return preferencespot0, nil
}

func (preferencespot0 *Preferencespot) InsertUseridUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPreferencespotUseridUser0(ctx, exec, 1, preferencespot0, user1)
	if err != nil {
		return err
	}

	preferencespot0.R.UseridUser = user1

	user1.R.UseridPreferencespots = append(user1.R.UseridPreferencespots, preferencespot0)

	return nil
}

func (preferencespot0 *Preferencespot) AttachUseridUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachPreferencespotUseridUser0(ctx, exec, 1, preferencespot0, user1)
	if err != nil {
		return err
	}

	preferencespot0.R.UseridUser = user1

	user1.R.UseridPreferencespots = append(user1.R.UseridPreferencespots, preferencespot0)

	return nil
}
