// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"github.com/aarondl/opt/null"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
)

// Demo is an object representing the database table.
type Demo struct {
	Demostring null.Val[string] `db:"demostring" `
}

// DemoSlice is an alias for a slice of pointers to Demo.
// This should almost always be used instead of []*Demo.
type DemoSlice []*Demo

// Demos contains methods to work with the demo view
var Demos = psql.NewViewx[*Demo, DemoSlice]("", "demo")

// DemosQuery is a query on the demo view
type DemosQuery = *psql.ViewQuery[*Demo, DemoSlice]

// DemosStmt is a prepared statment on demo
type DemosStmt = bob.QueryStmt[*Demo, DemoSlice]

type demoColumnNames struct {
	Demostring string
}

var DemoColumns = buildDemoColumns("demo")

type demoColumns struct {
	tableAlias string
	Demostring psql.Expression
}

func (c demoColumns) Alias() string {
	return c.tableAlias
}

func (demoColumns) AliasedAs(alias string) demoColumns {
	return buildDemoColumns(alias)
}

func buildDemoColumns(alias string) demoColumns {
	return demoColumns{
		tableAlias: alias,
		Demostring: psql.Quote(alias, "demostring"),
	}
}

type demoWhere[Q psql.Filterable] struct {
	Demostring psql.WhereNullMod[Q, string]
}

func (demoWhere[Q]) AliasedAs(alias string) demoWhere[Q] {
	return buildDemoWhere[Q](buildDemoColumns(alias))
}

func buildDemoWhere[Q psql.Filterable](cols demoColumns) demoWhere[Q] {
	return demoWhere[Q]{
		Demostring: psql.WhereNull[Q, string](cols.Demostring),
	}
}
