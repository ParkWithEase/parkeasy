// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/govalues/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Booking is an object representing the database table.
type Booking struct {
	Bookingid     int64           `db:"bookingid,pk" `
	Bookinguuid   uuid.UUID       `db:"bookinguuid" `
	Userid        int64           `db:"userid" `
	Parkingspotid int64           `db:"parkingspotid" `
	Carid         int64           `db:"carid" `
	Paidamount    decimal.Decimal `db:"paidamount" `
	Createdat     time.Time       `db:"createdat" `

	R bookingR `db:"-" `
}

// BookingSlice is an alias for a slice of pointers to Booking.
// This should almost always be used instead of []*Booking.
type BookingSlice []*Booking

// Bookings contains methods to work with the booking table
var Bookings = psql.NewTablex[*Booking, BookingSlice, *BookingSetter]("", "booking")

// BookingsQuery is a query on the booking table
type BookingsQuery = *psql.ViewQuery[*Booking, BookingSlice]

// bookingR is where relationships are stored.
type bookingR struct {
	CaridCar                 *Car          // booking.booking_carid_fkey
	ParkingspotidParkingspot *Parkingspot  // booking.booking_parkingspotid_fkey
	UseridUser               *User         // booking.booking_userid_fkey
	BookingidTimeunits       TimeunitSlice // timeunit.timeunit_bookingid_fkey
}

type bookingColumnNames struct {
	Bookingid     string
	Bookinguuid   string
	Userid        string
	Parkingspotid string
	Carid         string
	Paidamount    string
	Createdat     string
}

var BookingColumns = buildBookingColumns("booking")

type bookingColumns struct {
	tableAlias    string
	Bookingid     psql.Expression
	Bookinguuid   psql.Expression
	Userid        psql.Expression
	Parkingspotid psql.Expression
	Carid         psql.Expression
	Paidamount    psql.Expression
	Createdat     psql.Expression
}

func (c bookingColumns) Alias() string {
	return c.tableAlias
}

func (bookingColumns) AliasedAs(alias string) bookingColumns {
	return buildBookingColumns(alias)
}

func buildBookingColumns(alias string) bookingColumns {
	return bookingColumns{
		tableAlias:    alias,
		Bookingid:     psql.Quote(alias, "bookingid"),
		Bookinguuid:   psql.Quote(alias, "bookinguuid"),
		Userid:        psql.Quote(alias, "userid"),
		Parkingspotid: psql.Quote(alias, "parkingspotid"),
		Carid:         psql.Quote(alias, "carid"),
		Paidamount:    psql.Quote(alias, "paidamount"),
		Createdat:     psql.Quote(alias, "createdat"),
	}
}

type bookingWhere[Q psql.Filterable] struct {
	Bookingid     psql.WhereMod[Q, int64]
	Bookinguuid   psql.WhereMod[Q, uuid.UUID]
	Userid        psql.WhereMod[Q, int64]
	Parkingspotid psql.WhereMod[Q, int64]
	Carid         psql.WhereMod[Q, int64]
	Paidamount    psql.WhereMod[Q, decimal.Decimal]
	Createdat     psql.WhereMod[Q, time.Time]
}

func (bookingWhere[Q]) AliasedAs(alias string) bookingWhere[Q] {
	return buildBookingWhere[Q](buildBookingColumns(alias))
}

func buildBookingWhere[Q psql.Filterable](cols bookingColumns) bookingWhere[Q] {
	return bookingWhere[Q]{
		Bookingid:     psql.Where[Q, int64](cols.Bookingid),
		Bookinguuid:   psql.Where[Q, uuid.UUID](cols.Bookinguuid),
		Userid:        psql.Where[Q, int64](cols.Userid),
		Parkingspotid: psql.Where[Q, int64](cols.Parkingspotid),
		Carid:         psql.Where[Q, int64](cols.Carid),
		Paidamount:    psql.Where[Q, decimal.Decimal](cols.Paidamount),
		Createdat:     psql.Where[Q, time.Time](cols.Createdat),
	}
}

var BookingErrors = &bookingErrors{
	ErrUniqueBookinguuid: &errUniqueConstraint{s: "booking_bookinguuid_key"},
}

type bookingErrors struct {
	ErrUniqueBookinguuid error
}

// BookingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BookingSetter struct {
	Bookingid     omit.Val[int64]           `db:"bookingid,pk" `
	Bookinguuid   omit.Val[uuid.UUID]       `db:"bookinguuid" `
	Userid        omit.Val[int64]           `db:"userid" `
	Parkingspotid omit.Val[int64]           `db:"parkingspotid" `
	Carid         omit.Val[int64]           `db:"carid" `
	Paidamount    omit.Val[decimal.Decimal] `db:"paidamount" `
	Createdat     omit.Val[time.Time]       `db:"createdat" `
}

func (s BookingSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.Bookingid.IsUnset() {
		vals = append(vals, "bookingid")
	}

	if !s.Bookinguuid.IsUnset() {
		vals = append(vals, "bookinguuid")
	}

	if !s.Userid.IsUnset() {
		vals = append(vals, "userid")
	}

	if !s.Parkingspotid.IsUnset() {
		vals = append(vals, "parkingspotid")
	}

	if !s.Carid.IsUnset() {
		vals = append(vals, "carid")
	}

	if !s.Paidamount.IsUnset() {
		vals = append(vals, "paidamount")
	}

	if !s.Createdat.IsUnset() {
		vals = append(vals, "createdat")
	}

	return vals
}

func (s BookingSetter) Overwrite(t *Booking) {
	if !s.Bookingid.IsUnset() {
		t.Bookingid, _ = s.Bookingid.Get()
	}
	if !s.Bookinguuid.IsUnset() {
		t.Bookinguuid, _ = s.Bookinguuid.Get()
	}
	if !s.Userid.IsUnset() {
		t.Userid, _ = s.Userid.Get()
	}
	if !s.Parkingspotid.IsUnset() {
		t.Parkingspotid, _ = s.Parkingspotid.Get()
	}
	if !s.Carid.IsUnset() {
		t.Carid, _ = s.Carid.Get()
	}
	if !s.Paidamount.IsUnset() {
		t.Paidamount, _ = s.Paidamount.Get()
	}
	if !s.Createdat.IsUnset() {
		t.Createdat, _ = s.Createdat.Get()
	}
}

func (s *BookingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Bookings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.Bookingid.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.Bookingid)
		}

		if s.Bookinguuid.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Bookinguuid)
		}

		if s.Userid.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Userid)
		}

		if s.Parkingspotid.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Parkingspotid)
		}

		if s.Carid.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Carid)
		}

		if s.Paidamount.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Paidamount)
		}

		if s.Createdat.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Createdat)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s BookingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s BookingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.Bookingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bookingid")...),
			psql.Arg(s.Bookingid),
		}})
	}

	if !s.Bookinguuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bookinguuid")...),
			psql.Arg(s.Bookinguuid),
		}})
	}

	if !s.Userid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "userid")...),
			psql.Arg(s.Userid),
		}})
	}

	if !s.Parkingspotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotid")...),
			psql.Arg(s.Parkingspotid),
		}})
	}

	if !s.Carid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "carid")...),
			psql.Arg(s.Carid),
		}})
	}

	if !s.Paidamount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "paidamount")...),
			psql.Arg(s.Paidamount),
		}})
	}

	if !s.Createdat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "createdat")...),
			psql.Arg(s.Createdat),
		}})
	}

	return exprs
}

// FindBooking retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec bob.Executor, BookingidPK int64, cols ...string) (*Booking, error) {
	if len(cols) == 0 {
		return Bookings.Query(
			SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
		).One(ctx, exec)
	}

	return Bookings.Query(
		SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
		sm.Columns(Bookings.Columns().Only(cols...)),
	).One(ctx, exec)
}

// BookingExists checks the presence of a single record by primary key
func BookingExists(ctx context.Context, exec bob.Executor, BookingidPK int64) (bool, error) {
	return Bookings.Query(
		SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Booking is retrieved from the database
func (o *Booking) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Bookings.AfterSelectHooks.RunHooks(ctx, exec, BookingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Bookings.AfterInsertHooks.RunHooks(ctx, exec, BookingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Bookings.AfterUpdateHooks.RunHooks(ctx, exec, BookingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Bookings.AfterDeleteHooks.RunHooks(ctx, exec, BookingSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Booking
func (o *Booking) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Bookingid)
}

func (o *Booking) pkEQ() dialect.Expression {
	return psql.Quote("booking", "bookingid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Booking
func (o *Booking) Update(ctx context.Context, exec bob.Executor, s *BookingSetter) error {
	v, err := Bookings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Booking record with an executor
func (o *Booking) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Bookings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Booking using the executor
func (o *Booking) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Bookings.Query(
		SelectWhere.Bookings.Bookingid.EQ(o.Bookingid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after BookingSlice is retrieved from the database
func (o BookingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Bookings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Bookings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Bookings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Bookings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o BookingSlice) pkIN() dialect.Expression {
	return psql.Quote("booking", "bookingid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o BookingSlice) copyMatchingRows(from ...*Booking) {
	for i, old := range o {
		for _, new := range from {
			if new.Bookingid != old.Bookingid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o BookingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Bookings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Booking:
				o.copyMatchingRows(retrieved)
			case []*Booking:
				o.copyMatchingRows(retrieved...)
			case BookingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Booking or a slice of Booking
				// then run the AfterUpdateHooks on the slice
				_, err = Bookings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o BookingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Bookings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Booking:
				o.copyMatchingRows(retrieved)
			case []*Booking:
				o.copyMatchingRows(retrieved...)
			case BookingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Booking or a slice of Booking
				// then run the AfterDeleteHooks on the slice
				_, err = Bookings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o BookingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BookingSetter) error {
	_, err := Bookings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o BookingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	_, err := Bookings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o BookingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	o2, err := Bookings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type bookingJoins[Q dialect.Joinable] struct {
	typ                      string
	CaridCar                 func(context.Context) modAs[Q, carColumns]
	ParkingspotidParkingspot func(context.Context) modAs[Q, parkingspotColumns]
	UseridUser               func(context.Context) modAs[Q, userColumns]
	BookingidTimeunits       func(context.Context) modAs[Q, timeunitColumns]
}

func (j bookingJoins[Q]) aliasedAs(alias string) bookingJoins[Q] {
	return buildBookingJoins[Q](buildBookingColumns(alias), j.typ)
}

func buildBookingJoins[Q dialect.Joinable](cols bookingColumns, typ string) bookingJoins[Q] {
	return bookingJoins[Q]{
		typ:                      typ,
		CaridCar:                 bookingsJoinCaridCar[Q](cols, typ),
		ParkingspotidParkingspot: bookingsJoinParkingspotidParkingspot[Q](cols, typ),
		UseridUser:               bookingsJoinUseridUser[Q](cols, typ),
		BookingidTimeunits:       bookingsJoinBookingidTimeunits[Q](cols, typ),
	}
}

func bookingsJoinCaridCar[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, carColumns] {
	return func(ctx context.Context) modAs[Q, carColumns] {
		return modAs[Q, carColumns]{
			c: CarColumns,
			f: func(to carColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Cars.Name().As(to.Alias())).On(
						to.Carid.EQ(from.Carid),
					))
				}

				return mods
			},
		}
	}
}

func bookingsJoinParkingspotidParkingspot[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, parkingspotColumns] {
	return func(ctx context.Context) modAs[Q, parkingspotColumns] {
		return modAs[Q, parkingspotColumns]{
			c: ParkingspotColumns,
			f: func(to parkingspotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Parkingspots.Name().As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

func bookingsJoinUseridUser[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func bookingsJoinBookingidTimeunits[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, timeunitColumns] {
	return func(ctx context.Context) modAs[Q, timeunitColumns] {
		return modAs[Q, timeunitColumns]{
			c: TimeunitColumns,
			f: func(to timeunitColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Timeunits.Name().As(to.Alias())).On(
						to.Bookingid.EQ(from.Bookingid),
					))
				}

				return mods
			},
		}
	}
}

// CaridCar starts a query for related objects on car
func (o *Booking) CaridCar(mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	return Cars.Query(append(mods,
		sm.Where(CarColumns.Carid.EQ(psql.Arg(o.Carid))),
	)...)
}

func (os BookingSlice) CaridCar(mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Carid)
	}

	return Cars.Query(append(mods,
		sm.Where(psql.Group(CarColumns.Carid).In(PKArgs...)),
	)...)
}

// ParkingspotidParkingspot starts a query for related objects on parkingspot
func (o *Booking) ParkingspotidParkingspot(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	return Parkingspots.Query(append(mods,
		sm.Where(ParkingspotColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os BookingSlice) ParkingspotidParkingspot(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Parkingspots.Query(append(mods,
		sm.Where(psql.Group(ParkingspotColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

// UseridUser starts a query for related objects on users
func (o *Booking) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os BookingSlice) UseridUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Userid).In(PKArgs...)),
	)...)
}

// BookingidTimeunits starts a query for related objects on timeunit
func (o *Booking) BookingidTimeunits(mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	return Timeunits.Query(append(mods,
		sm.Where(TimeunitColumns.Bookingid.EQ(psql.Arg(o.Bookingid))),
	)...)
}

func (os BookingSlice) BookingidTimeunits(mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Bookingid)
	}

	return Timeunits.Query(append(mods,
		sm.Where(psql.Group(TimeunitColumns.Bookingid).In(PKArgs...)),
	)...)
}

func (o *Booking) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CaridCar":
		rel, ok := retrieved.(*Car)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.CaridCar = rel

		if rel != nil {
			rel.R.CaridBookings = BookingSlice{o}
		}
		return nil
	case "ParkingspotidParkingspot":
		rel, ok := retrieved.(*Parkingspot)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidParkingspot = rel

		if rel != nil {
			rel.R.ParkingspotidBookings = BookingSlice{o}
		}
		return nil
	case "UseridUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.UseridUser = rel

		if rel != nil {
			rel.R.UseridBookings = BookingSlice{o}
		}
		return nil
	case "BookingidTimeunits":
		rels, ok := retrieved.(TimeunitSlice)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.BookingidTimeunits = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.BookingidBooking = o
			}
		}
		return nil
	default:
		return fmt.Errorf("booking has no relationship %q", name)
	}
}

func PreloadBookingCaridCar(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Car, CarSlice](orm.Relationship{
		Name: "CaridCar",
		Sides: []orm.RelSide{
			{
				From: TableNames.Bookings,
				To:   TableNames.Cars,
				FromColumns: []string{
					ColumnNames.Bookings.Carid,
				},
				ToColumns: []string{
					ColumnNames.Cars.Carid,
				},
			},
		},
	}, Cars.Columns().Names(), opts...)
}

func ThenLoadBookingCaridCar(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingCaridCar(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingCaridCar", retrieved)
		}

		err := loader.LoadBookingCaridCar(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingCaridCar loads the booking's CaridCar into the .R struct
func (o *Booking) LoadBookingCaridCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CaridCar = nil

	related, err := o.CaridCar(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CaridBookings = BookingSlice{o}

	o.R.CaridCar = related
	return nil
}

// LoadBookingCaridCar loads the booking's CaridCar into the .R struct
func (os BookingSlice) LoadBookingCaridCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cars, err := os.CaridCar(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range cars {
			if o.Carid != rel.Carid {
				continue
			}

			rel.R.CaridBookings = append(rel.R.CaridBookings, o)

			o.R.CaridCar = rel
			break
		}
	}

	return nil
}

func PreloadBookingParkingspotidParkingspot(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Parkingspot, ParkingspotSlice](orm.Relationship{
		Name: "ParkingspotidParkingspot",
		Sides: []orm.RelSide{
			{
				From: TableNames.Bookings,
				To:   TableNames.Parkingspots,
				FromColumns: []string{
					ColumnNames.Bookings.Parkingspotid,
				},
				ToColumns: []string{
					ColumnNames.Parkingspots.Parkingspotid,
				},
			},
		},
	}, Parkingspots.Columns().Names(), opts...)
}

func ThenLoadBookingParkingspotidParkingspot(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingParkingspotidParkingspot(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingParkingspotidParkingspot", retrieved)
		}

		err := loader.LoadBookingParkingspotidParkingspot(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingParkingspotidParkingspot loads the booking's ParkingspotidParkingspot into the .R struct
func (o *Booking) LoadBookingParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidParkingspot = nil

	related, err := o.ParkingspotidParkingspot(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ParkingspotidBookings = BookingSlice{o}

	o.R.ParkingspotidParkingspot = related
	return nil
}

// LoadBookingParkingspotidParkingspot loads the booking's ParkingspotidParkingspot into the .R struct
func (os BookingSlice) LoadBookingParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	parkingspots, err := os.ParkingspotidParkingspot(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range parkingspots {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidBookings = append(rel.R.ParkingspotidBookings, o)

			o.R.ParkingspotidParkingspot = rel
			break
		}
	}

	return nil
}

func PreloadBookingUseridUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "UseridUser",
		Sides: []orm.RelSide{
			{
				From: TableNames.Bookings,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Bookings.Userid,
				},
				ToColumns: []string{
					ColumnNames.Users.Userid,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadBookingUseridUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingUseridUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingUseridUser", retrieved)
		}

		err := loader.LoadBookingUseridUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingUseridUser loads the booking's UseridUser into the .R struct
func (o *Booking) LoadBookingUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridUser = nil

	related, err := o.UseridUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UseridBookings = BookingSlice{o}

	o.R.UseridUser = related
	return nil
}

// LoadBookingUseridUser loads the booking's UseridUser into the .R struct
func (os BookingSlice) LoadBookingUseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UseridUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridBookings = append(rel.R.UseridBookings, o)

			o.R.UseridUser = rel
			break
		}
	}

	return nil
}

func ThenLoadBookingBookingidTimeunits(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingBookingidTimeunits(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingBookingidTimeunits", retrieved)
		}

		err := loader.LoadBookingBookingidTimeunits(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingBookingidTimeunits loads the booking's BookingidTimeunits into the .R struct
func (o *Booking) LoadBookingBookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BookingidTimeunits = nil

	related, err := o.BookingidTimeunits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.BookingidBooking = o
	}

	o.R.BookingidTimeunits = related
	return nil
}

// LoadBookingBookingidTimeunits loads the booking's BookingidTimeunits into the .R struct
func (os BookingSlice) LoadBookingBookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	timeunits, err := os.BookingidTimeunits(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.BookingidTimeunits = nil
	}

	for _, o := range os {
		for _, rel := range timeunits {
			if o.Bookingid != rel.Bookingid.GetOrZero() {
				continue
			}

			rel.R.BookingidBooking = o

			o.R.BookingidTimeunits = append(o.R.BookingidTimeunits, rel)
		}
	}

	return nil
}

func attachBookingCaridCar0(ctx context.Context, exec bob.Executor, count int, booking0 *Booking, car1 *Car) (*Booking, error) {
	setter := &BookingSetter{
		Carid: omit.From(car1.Carid),
	}

	err := booking0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookingCaridCar0: %w", err)
	}

	return booking0, nil
}

func (booking0 *Booking) InsertCaridCar(ctx context.Context, exec bob.Executor, related *CarSetter) error {
	car1, err := Cars.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBookingCaridCar0(ctx, exec, 1, booking0, car1)
	if err != nil {
		return err
	}

	booking0.R.CaridCar = car1

	car1.R.CaridBookings = append(car1.R.CaridBookings, booking0)

	return nil
}

func (booking0 *Booking) AttachCaridCar(ctx context.Context, exec bob.Executor, car1 *Car) error {
	var err error

	_, err = attachBookingCaridCar0(ctx, exec, 1, booking0, car1)
	if err != nil {
		return err
	}

	booking0.R.CaridCar = car1

	car1.R.CaridBookings = append(car1.R.CaridBookings, booking0)

	return nil
}

func attachBookingParkingspotidParkingspot0(ctx context.Context, exec bob.Executor, count int, booking0 *Booking, parkingspot1 *Parkingspot) (*Booking, error) {
	setter := &BookingSetter{
		Parkingspotid: omit.From(parkingspot1.Parkingspotid),
	}

	err := booking0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookingParkingspotidParkingspot0: %w", err)
	}

	return booking0, nil
}

func (booking0 *Booking) InsertParkingspotidParkingspot(ctx context.Context, exec bob.Executor, related *ParkingspotSetter) error {
	parkingspot1, err := Parkingspots.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBookingParkingspotidParkingspot0(ctx, exec, 1, booking0, parkingspot1)
	if err != nil {
		return err
	}

	booking0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidBookings = append(parkingspot1.R.ParkingspotidBookings, booking0)

	return nil
}

func (booking0 *Booking) AttachParkingspotidParkingspot(ctx context.Context, exec bob.Executor, parkingspot1 *Parkingspot) error {
	var err error

	_, err = attachBookingParkingspotidParkingspot0(ctx, exec, 1, booking0, parkingspot1)
	if err != nil {
		return err
	}

	booking0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidBookings = append(parkingspot1.R.ParkingspotidBookings, booking0)

	return nil
}

func attachBookingUseridUser0(ctx context.Context, exec bob.Executor, count int, booking0 *Booking, user1 *User) (*Booking, error) {
	setter := &BookingSetter{
		Userid: omit.From(user1.Userid),
	}

	err := booking0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookingUseridUser0: %w", err)
	}

	return booking0, nil
}

func (booking0 *Booking) InsertUseridUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBookingUseridUser0(ctx, exec, 1, booking0, user1)
	if err != nil {
		return err
	}

	booking0.R.UseridUser = user1

	user1.R.UseridBookings = append(user1.R.UseridBookings, booking0)

	return nil
}

func (booking0 *Booking) AttachUseridUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachBookingUseridUser0(ctx, exec, 1, booking0, user1)
	if err != nil {
		return err
	}

	booking0.R.UseridUser = user1

	user1.R.UseridBookings = append(user1.R.UseridBookings, booking0)

	return nil
}

func insertBookingBookingidTimeunits0(ctx context.Context, exec bob.Executor, timeunits1 []*TimeunitSetter, booking0 *Booking) (TimeunitSlice, error) {
	for i := range timeunits1 {
		timeunits1[i].Bookingid = omitnull.From(booking0.Bookingid)
	}

	ret, err := Timeunits.Insert(bob.ToMods(timeunits1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookingBookingidTimeunits0: %w", err)
	}

	return ret, nil
}

func attachBookingBookingidTimeunits0(ctx context.Context, exec bob.Executor, count int, timeunits1 TimeunitSlice, booking0 *Booking) (TimeunitSlice, error) {
	setter := &TimeunitSetter{
		Bookingid: omitnull.From(booking0.Bookingid),
	}

	err := timeunits1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookingBookingidTimeunits0: %w", err)
	}

	return timeunits1, nil
}

func (booking0 *Booking) InsertBookingidTimeunits(ctx context.Context, exec bob.Executor, related ...*TimeunitSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	timeunits1, err := insertBookingBookingidTimeunits0(ctx, exec, related, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidTimeunits = append(booking0.R.BookingidTimeunits, timeunits1...)

	for _, rel := range timeunits1 {
		rel.R.BookingidBooking = booking0
	}
	return nil
}

func (booking0 *Booking) AttachBookingidTimeunits(ctx context.Context, exec bob.Executor, related ...*Timeunit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	timeunits1 := TimeunitSlice(related)

	_, err = attachBookingBookingidTimeunits0(ctx, exec, len(related), timeunits1, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidTimeunits = append(booking0.R.BookingidTimeunits, timeunits1...)

	for _, rel := range related {
		rel.R.BookingidBooking = booking0
	}

	return nil
}
