// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Booking is an object representing the database table.
type Booking struct {
	Bookingid   int64   `db:"bookingid,pk" `
	Buyeruserid int64   `db:"buyeruserid" `
	Paidamount  float32 `db:"paidamount" `

	R bookingR `db:"-" `
}

// BookingSlice is an alias for a slice of pointers to Booking.
// This should almost always be used instead of []*Booking.
type BookingSlice []*Booking

// Bookings contains methods to work with the booking table
var Bookings = psql.NewTablex[*Booking, BookingSlice, *BookingSetter]("", "booking")

// BookingsQuery is a query on the booking table
type BookingsQuery = *psql.ViewQuery[*Booking, BookingSlice]

// BookingsStmt is a prepared statment on booking
type BookingsStmt = bob.QueryStmt[*Booking, BookingSlice]

// bookingR is where relationships are stored.
type bookingR struct {
	BuyeruseridUser           *User                // booking.booking_buyeruserid_fkey
	BookingidStandardbookings StandardbookingSlice // standardbooking.standardbooking_bookingid_fkey
	BookingidTimeunits        TimeunitSlice        // timeunit.timeunit_bookingid_fkey
}

// BookingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BookingSetter struct {
	Bookingid   omit.Val[int64]   `db:"bookingid,pk" `
	Buyeruserid omit.Val[int64]   `db:"buyeruserid" `
	Paidamount  omit.Val[float32] `db:"paidamount" `
}

func (s BookingSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.Bookingid.IsUnset() {
		vals = append(vals, "bookingid")
	}

	if !s.Buyeruserid.IsUnset() {
		vals = append(vals, "buyeruserid")
	}

	if !s.Paidamount.IsUnset() {
		vals = append(vals, "paidamount")
	}

	return vals
}

func (s BookingSetter) Overwrite(t *Booking) {
	if !s.Bookingid.IsUnset() {
		t.Bookingid, _ = s.Bookingid.Get()
	}
	if !s.Buyeruserid.IsUnset() {
		t.Buyeruserid, _ = s.Buyeruserid.Get()
	}
	if !s.Paidamount.IsUnset() {
		t.Paidamount, _ = s.Paidamount.Get()
	}
}

func (s BookingSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.Bookingid.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Bookingid)
	}

	if s.Buyeruserid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Buyeruserid)
	}

	if s.Paidamount.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Paidamount)
	}

	return im.Values(vals...)
}

func (s BookingSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s BookingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.Bookingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bookingid")...),
			psql.Arg(s.Bookingid),
		}})
	}

	if !s.Buyeruserid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "buyeruserid")...),
			psql.Arg(s.Buyeruserid),
		}})
	}

	if !s.Paidamount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "paidamount")...),
			psql.Arg(s.Paidamount),
		}})
	}

	return exprs
}

type bookingColumnNames struct {
	Bookingid   string
	Buyeruserid string
	Paidamount  string
}

var BookingColumns = buildBookingColumns("booking")

type bookingColumns struct {
	tableAlias  string
	Bookingid   psql.Expression
	Buyeruserid psql.Expression
	Paidamount  psql.Expression
}

func (c bookingColumns) Alias() string {
	return c.tableAlias
}

func (bookingColumns) AliasedAs(alias string) bookingColumns {
	return buildBookingColumns(alias)
}

func buildBookingColumns(alias string) bookingColumns {
	return bookingColumns{
		tableAlias:  alias,
		Bookingid:   psql.Quote(alias, "bookingid"),
		Buyeruserid: psql.Quote(alias, "buyeruserid"),
		Paidamount:  psql.Quote(alias, "paidamount"),
	}
}

type bookingWhere[Q psql.Filterable] struct {
	Bookingid   psql.WhereMod[Q, int64]
	Buyeruserid psql.WhereMod[Q, int64]
	Paidamount  psql.WhereMod[Q, float32]
}

func (bookingWhere[Q]) AliasedAs(alias string) bookingWhere[Q] {
	return buildBookingWhere[Q](buildBookingColumns(alias))
}

func buildBookingWhere[Q psql.Filterable](cols bookingColumns) bookingWhere[Q] {
	return bookingWhere[Q]{
		Bookingid:   psql.Where[Q, int64](cols.Bookingid),
		Buyeruserid: psql.Where[Q, int64](cols.Buyeruserid),
		Paidamount:  psql.Where[Q, float32](cols.Paidamount),
	}
}

type bookingJoins[Q dialect.Joinable] struct {
	typ                       string
	BuyeruseridUser           func(context.Context) modAs[Q, userColumns]
	BookingidStandardbookings func(context.Context) modAs[Q, standardbookingColumns]
	BookingidTimeunits        func(context.Context) modAs[Q, timeunitColumns]
}

func (j bookingJoins[Q]) aliasedAs(alias string) bookingJoins[Q] {
	return buildBookingJoins[Q](buildBookingColumns(alias), j.typ)
}

func buildBookingJoins[Q dialect.Joinable](cols bookingColumns, typ string) bookingJoins[Q] {
	return bookingJoins[Q]{
		typ:                       typ,
		BuyeruseridUser:           bookingsJoinBuyeruseridUser[Q](cols, typ),
		BookingidStandardbookings: bookingsJoinBookingidStandardbookings[Q](cols, typ),
		BookingidTimeunits:        bookingsJoinBookingidTimeunits[Q](cols, typ),
	}
}

// FindBooking retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBooking(ctx context.Context, exec bob.Executor, BookingidPK int64, cols ...string) (*Booking, error) {
	if len(cols) == 0 {
		return Bookings.Query(
			ctx, exec,
			SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
		).One()
	}

	return Bookings.Query(
		ctx, exec,
		SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
		sm.Columns(Bookings.Columns().Only(cols...)),
	).One()
}

// BookingExists checks the presence of a single record by primary key
func BookingExists(ctx context.Context, exec bob.Executor, BookingidPK int64) (bool, error) {
	return Bookings.Query(
		ctx, exec,
		SelectWhere.Bookings.Bookingid.EQ(BookingidPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Booking
func (o *Booking) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Bookingid)
}

// Update uses an executor to update the Booking
func (o *Booking) Update(ctx context.Context, exec bob.Executor, s *BookingSetter) error {
	return Bookings.Update(ctx, exec, s, o)
}

// Delete deletes a single Booking record with an executor
func (o *Booking) Delete(ctx context.Context, exec bob.Executor) error {
	return Bookings.Delete(ctx, exec, o)
}

// Reload refreshes the Booking using the executor
func (o *Booking) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Bookings.Query(
		ctx, exec,
		SelectWhere.Bookings.Bookingid.EQ(o.Bookingid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o BookingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BookingSetter) error {
	return Bookings.Update(ctx, exec, &vals, o...)
}

func (o BookingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Bookings.Delete(ctx, exec, o...)
}

func (o BookingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	BookingidPK := make([]int64, len(o))

	for i, o := range o {
		BookingidPK[i] = o.Bookingid
	}

	mods = append(mods,
		SelectWhere.Bookings.Bookingid.In(BookingidPK...),
	)

	o2, err := Bookings.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Bookingid != old.Bookingid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func bookingsJoinBuyeruseridUser[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name(ctx).As(to.Alias())).On(
						to.Userid.EQ(from.Buyeruserid),
					))
				}

				return mods
			},
		}
	}
}

func bookingsJoinBookingidStandardbookings[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, standardbookingColumns] {
	return func(ctx context.Context) modAs[Q, standardbookingColumns] {
		return modAs[Q, standardbookingColumns]{
			c: StandardbookingColumns,
			f: func(to standardbookingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Standardbookings.Name(ctx).As(to.Alias())).On(
						to.Bookingid.EQ(from.Bookingid),
					))
				}

				return mods
			},
		}
	}
}

func bookingsJoinBookingidTimeunits[Q dialect.Joinable](from bookingColumns, typ string) func(context.Context) modAs[Q, timeunitColumns] {
	return func(ctx context.Context) modAs[Q, timeunitColumns] {
		return modAs[Q, timeunitColumns]{
			c: TimeunitColumns,
			f: func(to timeunitColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Timeunits.Name(ctx).As(to.Alias())).On(
						to.Bookingid.EQ(from.Bookingid),
					))
				}

				return mods
			},
		}
	}
}

// BuyeruseridUser starts a query for related objects on users
func (o *Booking) BuyeruseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.Userid.EQ(psql.Arg(o.Buyeruserid))),
	)...)
}

func (os BookingSlice) BuyeruseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Buyeruserid)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(UserColumns.Userid).In(PKArgs...)),
	)...)
}

// BookingidStandardbookings starts a query for related objects on standardbooking
func (o *Booking) BookingidStandardbookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) StandardbookingsQuery {
	return Standardbookings.Query(ctx, exec, append(mods,
		sm.Where(StandardbookingColumns.Bookingid.EQ(psql.Arg(o.Bookingid))),
	)...)
}

func (os BookingSlice) BookingidStandardbookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) StandardbookingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Bookingid)
	}

	return Standardbookings.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(StandardbookingColumns.Bookingid).In(PKArgs...)),
	)...)
}

// BookingidTimeunits starts a query for related objects on timeunit
func (o *Booking) BookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	return Timeunits.Query(ctx, exec, append(mods,
		sm.Where(TimeunitColumns.Bookingid.EQ(psql.Arg(o.Bookingid))),
	)...)
}

func (os BookingSlice) BookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TimeunitsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Bookingid)
	}

	return Timeunits.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(TimeunitColumns.Bookingid).In(PKArgs...)),
	)...)
}

func (o *Booking) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BuyeruseridUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.BuyeruseridUser = rel

		if rel != nil {
			rel.R.BuyeruseridBookings = BookingSlice{o}
		}
		return nil
	case "BookingidStandardbookings":
		rels, ok := retrieved.(StandardbookingSlice)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.BookingidStandardbookings = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.BookingidBooking = o
			}
		}
		return nil
	case "BookingidTimeunits":
		rels, ok := retrieved.(TimeunitSlice)
		if !ok {
			return fmt.Errorf("booking cannot load %T as %q", retrieved, name)
		}

		o.R.BookingidTimeunits = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.BookingidBooking = o
			}
		}
		return nil
	default:
		return fmt.Errorf("booking has no relationship %q", name)
	}
}

func PreloadBookingBuyeruseridUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "BuyeruseridUser",
		Sides: []orm.RelSide{
			{
				From: "booking",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Bookings.Buyeruserid,
				},
				ToColumns: []string{
					ColumnNames.Users.Userid,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadBookingBuyeruseridUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingBuyeruseridUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingBuyeruseridUser", retrieved)
		}

		err := loader.LoadBookingBuyeruseridUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingBuyeruseridUser loads the booking's BuyeruseridUser into the .R struct
func (o *Booking) LoadBookingBuyeruseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BuyeruseridUser = nil

	related, err := o.BuyeruseridUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.BuyeruseridBookings = BookingSlice{o}

	o.R.BuyeruseridUser = related
	return nil
}

// LoadBookingBuyeruseridUser loads the booking's BuyeruseridUser into the .R struct
func (os BookingSlice) LoadBookingBuyeruseridUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.BuyeruseridUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.Buyeruserid != rel.Userid {
				continue
			}

			rel.R.BuyeruseridBookings = append(rel.R.BuyeruseridBookings, o)

			o.R.BuyeruseridUser = rel
			break
		}
	}

	return nil
}

func ThenLoadBookingBookingidStandardbookings(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingBookingidStandardbookings(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingBookingidStandardbookings", retrieved)
		}

		err := loader.LoadBookingBookingidStandardbookings(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingBookingidStandardbookings loads the booking's BookingidStandardbookings into the .R struct
func (o *Booking) LoadBookingBookingidStandardbookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BookingidStandardbookings = nil

	related, err := o.BookingidStandardbookings(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.BookingidBooking = o
	}

	o.R.BookingidStandardbookings = related
	return nil
}

// LoadBookingBookingidStandardbookings loads the booking's BookingidStandardbookings into the .R struct
func (os BookingSlice) LoadBookingBookingidStandardbookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	standardbookings, err := os.BookingidStandardbookings(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.BookingidStandardbookings = nil
	}

	for _, o := range os {
		for _, rel := range standardbookings {
			if o.Bookingid != rel.Bookingid {
				continue
			}

			rel.R.BookingidBooking = o

			o.R.BookingidStandardbookings = append(o.R.BookingidStandardbookings, rel)
		}
	}

	return nil
}

func ThenLoadBookingBookingidTimeunits(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookingBookingidTimeunits(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookingBookingidTimeunits", retrieved)
		}

		err := loader.LoadBookingBookingidTimeunits(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookingBookingidTimeunits loads the booking's BookingidTimeunits into the .R struct
func (o *Booking) LoadBookingBookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BookingidTimeunits = nil

	related, err := o.BookingidTimeunits(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.BookingidBooking = o
	}

	o.R.BookingidTimeunits = related
	return nil
}

// LoadBookingBookingidTimeunits loads the booking's BookingidTimeunits into the .R struct
func (os BookingSlice) LoadBookingBookingidTimeunits(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	timeunits, err := os.BookingidTimeunits(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.BookingidTimeunits = nil
	}

	for _, o := range os {
		for _, rel := range timeunits {
			if o.Bookingid != rel.Bookingid.GetOrZero() {
				continue
			}

			rel.R.BookingidBooking = o

			o.R.BookingidTimeunits = append(o.R.BookingidTimeunits, rel)
		}
	}

	return nil
}

func attachBookingBuyeruseridUser0(ctx context.Context, exec bob.Executor, count int, booking0 *Booking, user1 *User) (*Booking, error) {
	setter := &BookingSetter{
		Buyeruserid: omit.From(user1.Userid),
	}

	err := Bookings.Update(ctx, exec, setter, booking0)
	if err != nil {
		return nil, fmt.Errorf("attachBookingBuyeruseridUser0: %w", err)
	}

	return booking0, nil
}

func (booking0 *Booking) InsertBuyeruseridUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBookingBuyeruseridUser0(ctx, exec, 1, booking0, user1)
	if err != nil {
		return err
	}

	booking0.R.BuyeruseridUser = user1

	user1.R.BuyeruseridBookings = append(user1.R.BuyeruseridBookings, booking0)

	return nil
}

func (booking0 *Booking) AttachBuyeruseridUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachBookingBuyeruseridUser0(ctx, exec, 1, booking0, user1)
	if err != nil {
		return err
	}

	booking0.R.BuyeruseridUser = user1

	user1.R.BuyeruseridBookings = append(user1.R.BuyeruseridBookings, booking0)

	return nil
}

func insertBookingBookingidStandardbookings0(ctx context.Context, exec bob.Executor, standardbookings1 []*StandardbookingSetter, booking0 *Booking) (StandardbookingSlice, error) {
	for i := range standardbookings1 {
		standardbookings1[i].Bookingid = omit.From(booking0.Bookingid)
	}

	ret, err := Standardbookings.InsertMany(ctx, exec, standardbookings1...)
	if err != nil {
		return ret, fmt.Errorf("insertBookingBookingidStandardbookings0: %w", err)
	}

	return ret, nil
}

func attachBookingBookingidStandardbookings0(ctx context.Context, exec bob.Executor, count int, standardbookings1 StandardbookingSlice, booking0 *Booking) (StandardbookingSlice, error) {
	setter := &StandardbookingSetter{
		Bookingid: omit.From(booking0.Bookingid),
	}

	err := Standardbookings.Update(ctx, exec, setter, standardbookings1...)
	if err != nil {
		return nil, fmt.Errorf("attachBookingBookingidStandardbookings0: %w", err)
	}

	return standardbookings1, nil
}

func (booking0 *Booking) InsertBookingidStandardbookings(ctx context.Context, exec bob.Executor, related ...*StandardbookingSetter) error {
	if len(related) == 0 {
		return nil
	}

	standardbookings1, err := insertBookingBookingidStandardbookings0(ctx, exec, related, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidStandardbookings = append(booking0.R.BookingidStandardbookings, standardbookings1...)

	for _, rel := range standardbookings1 {
		rel.R.BookingidBooking = booking0
	}
	return nil
}

func (booking0 *Booking) AttachBookingidStandardbookings(ctx context.Context, exec bob.Executor, related ...*Standardbooking) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	standardbookings1 := StandardbookingSlice(related)

	_, err = attachBookingBookingidStandardbookings0(ctx, exec, len(related), standardbookings1, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidStandardbookings = append(booking0.R.BookingidStandardbookings, standardbookings1...)

	for _, rel := range related {
		rel.R.BookingidBooking = booking0
	}

	return nil
}

func insertBookingBookingidTimeunits0(ctx context.Context, exec bob.Executor, timeunits1 []*TimeunitSetter, booking0 *Booking) (TimeunitSlice, error) {
	for i := range timeunits1 {
		timeunits1[i].Bookingid = omitnull.From(booking0.Bookingid)
	}

	ret, err := Timeunits.InsertMany(ctx, exec, timeunits1...)
	if err != nil {
		return ret, fmt.Errorf("insertBookingBookingidTimeunits0: %w", err)
	}

	return ret, nil
}

func attachBookingBookingidTimeunits0(ctx context.Context, exec bob.Executor, count int, timeunits1 TimeunitSlice, booking0 *Booking) (TimeunitSlice, error) {
	setter := &TimeunitSetter{
		Bookingid: omitnull.From(booking0.Bookingid),
	}

	err := Timeunits.Update(ctx, exec, setter, timeunits1...)
	if err != nil {
		return nil, fmt.Errorf("attachBookingBookingidTimeunits0: %w", err)
	}

	return timeunits1, nil
}

func (booking0 *Booking) InsertBookingidTimeunits(ctx context.Context, exec bob.Executor, related ...*TimeunitSetter) error {
	if len(related) == 0 {
		return nil
	}

	timeunits1, err := insertBookingBookingidTimeunits0(ctx, exec, related, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidTimeunits = append(booking0.R.BookingidTimeunits, timeunits1...)

	for _, rel := range timeunits1 {
		rel.R.BookingidBooking = booking0
	}
	return nil
}

func (booking0 *Booking) AttachBookingidTimeunits(ctx context.Context, exec bob.Executor, related ...*Timeunit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	timeunits1 := TimeunitSlice(related)

	_, err = attachBookingBookingidTimeunits0(ctx, exec, len(related), timeunits1, booking0)
	if err != nil {
		return err
	}

	booking0.R.BookingidTimeunits = append(booking0.R.BookingidTimeunits, timeunits1...)

	for _, rel := range related {
		rel.R.BookingidBooking = booking0
	}

	return nil
}
