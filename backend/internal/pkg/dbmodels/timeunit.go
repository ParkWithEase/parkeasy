// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Timeunit is an object representing the database table.
type Timeunit struct {
	Unitnum   int16           `db:"unitnum,pk" `
	Date      time.Time       `db:"date,pk" `
	Listingid int64           `db:"listingid,pk" `
	Bookingid null.Val[int64] `db:"bookingid" `

	R timeunitR `db:"-" `
}

// TimeunitSlice is an alias for a slice of pointers to Timeunit.
// This should almost always be used instead of []*Timeunit.
type TimeunitSlice []*Timeunit

// Timeunits contains methods to work with the timeunit table
var Timeunits = psql.NewTablex[*Timeunit, TimeunitSlice, *TimeunitSetter]("", "timeunit")

// TimeunitsQuery is a query on the timeunit table
type TimeunitsQuery = *psql.ViewQuery[*Timeunit, TimeunitSlice]

// TimeunitsStmt is a prepared statment on timeunit
type TimeunitsStmt = bob.QueryStmt[*Timeunit, TimeunitSlice]

// timeunitR is where relationships are stored.
type timeunitR struct {
	BookingidBooking *Booking // timeunit.timeunit_bookingid_fkey
	ListingidListing *Listing // timeunit.timeunit_listingid_fkey
}

// TimeunitSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TimeunitSetter struct {
	Unitnum   omit.Val[int16]     `db:"unitnum,pk" `
	Date      omit.Val[time.Time] `db:"date,pk" `
	Listingid omit.Val[int64]     `db:"listingid,pk" `
	Bookingid omitnull.Val[int64] `db:"bookingid" `
}

func (s TimeunitSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.Unitnum.IsUnset() {
		vals = append(vals, "unitnum")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	if !s.Listingid.IsUnset() {
		vals = append(vals, "listingid")
	}

	if !s.Bookingid.IsUnset() {
		vals = append(vals, "bookingid")
	}

	return vals
}

func (s TimeunitSetter) Overwrite(t *Timeunit) {
	if !s.Unitnum.IsUnset() {
		t.Unitnum, _ = s.Unitnum.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
	if !s.Listingid.IsUnset() {
		t.Listingid, _ = s.Listingid.Get()
	}
	if !s.Bookingid.IsUnset() {
		t.Bookingid, _ = s.Bookingid.GetNull()
	}
}

func (s TimeunitSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 4)
	if s.Unitnum.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Unitnum)
	}

	if s.Date.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Date)
	}

	if s.Listingid.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Listingid)
	}

	if s.Bookingid.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Bookingid)
	}

	return im.Values(vals...)
}

func (s TimeunitSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s TimeunitSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.Unitnum.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "unitnum")...),
			psql.Arg(s.Unitnum),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "date")...),
			psql.Arg(s.Date),
		}})
	}

	if !s.Listingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "listingid")...),
			psql.Arg(s.Listingid),
		}})
	}

	if !s.Bookingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bookingid")...),
			psql.Arg(s.Bookingid),
		}})
	}

	return exprs
}

type timeunitColumnNames struct {
	Unitnum   string
	Date      string
	Listingid string
	Bookingid string
}

var TimeunitColumns = buildTimeunitColumns("timeunit")

type timeunitColumns struct {
	tableAlias string
	Unitnum    psql.Expression
	Date       psql.Expression
	Listingid  psql.Expression
	Bookingid  psql.Expression
}

func (c timeunitColumns) Alias() string {
	return c.tableAlias
}

func (timeunitColumns) AliasedAs(alias string) timeunitColumns {
	return buildTimeunitColumns(alias)
}

func buildTimeunitColumns(alias string) timeunitColumns {
	return timeunitColumns{
		tableAlias: alias,
		Unitnum:    psql.Quote(alias, "unitnum"),
		Date:       psql.Quote(alias, "date"),
		Listingid:  psql.Quote(alias, "listingid"),
		Bookingid:  psql.Quote(alias, "bookingid"),
	}
}

type timeunitWhere[Q psql.Filterable] struct {
	Unitnum   psql.WhereMod[Q, int16]
	Date      psql.WhereMod[Q, time.Time]
	Listingid psql.WhereMod[Q, int64]
	Bookingid psql.WhereNullMod[Q, int64]
}

func (timeunitWhere[Q]) AliasedAs(alias string) timeunitWhere[Q] {
	return buildTimeunitWhere[Q](buildTimeunitColumns(alias))
}

func buildTimeunitWhere[Q psql.Filterable](cols timeunitColumns) timeunitWhere[Q] {
	return timeunitWhere[Q]{
		Unitnum:   psql.Where[Q, int16](cols.Unitnum),
		Date:      psql.Where[Q, time.Time](cols.Date),
		Listingid: psql.Where[Q, int64](cols.Listingid),
		Bookingid: psql.WhereNull[Q, int64](cols.Bookingid),
	}
}

type timeunitJoins[Q dialect.Joinable] struct {
	typ              string
	BookingidBooking func(context.Context) modAs[Q, bookingColumns]
	ListingidListing func(context.Context) modAs[Q, listingColumns]
}

func (j timeunitJoins[Q]) aliasedAs(alias string) timeunitJoins[Q] {
	return buildTimeunitJoins[Q](buildTimeunitColumns(alias), j.typ)
}

func buildTimeunitJoins[Q dialect.Joinable](cols timeunitColumns, typ string) timeunitJoins[Q] {
	return timeunitJoins[Q]{
		typ:              typ,
		BookingidBooking: timeunitsJoinBookingidBooking[Q](cols, typ),
		ListingidListing: timeunitsJoinListingidListing[Q](cols, typ),
	}
}

// FindTimeunit retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTimeunit(ctx context.Context, exec bob.Executor, UnitnumPK int16, DatePK time.Time, ListingidPK int64, cols ...string) (*Timeunit, error) {
	if len(cols) == 0 {
		return Timeunits.Query(
			ctx, exec,
			SelectWhere.Timeunits.Unitnum.EQ(UnitnumPK),
			SelectWhere.Timeunits.Date.EQ(DatePK),
			SelectWhere.Timeunits.Listingid.EQ(ListingidPK),
		).One()
	}

	return Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Unitnum.EQ(UnitnumPK),
		SelectWhere.Timeunits.Date.EQ(DatePK),
		SelectWhere.Timeunits.Listingid.EQ(ListingidPK),
		sm.Columns(Timeunits.Columns().Only(cols...)),
	).One()
}

// TimeunitExists checks the presence of a single record by primary key
func TimeunitExists(ctx context.Context, exec bob.Executor, UnitnumPK int16, DatePK time.Time, ListingidPK int64) (bool, error) {
	return Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Unitnum.EQ(UnitnumPK),
		SelectWhere.Timeunits.Date.EQ(DatePK),
		SelectWhere.Timeunits.Listingid.EQ(ListingidPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Timeunit
func (o *Timeunit) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Unitnum,
		o.Date,
		o.Listingid,
	)
}

// Update uses an executor to update the Timeunit
func (o *Timeunit) Update(ctx context.Context, exec bob.Executor, s *TimeunitSetter) error {
	return Timeunits.Update(ctx, exec, s, o)
}

// Delete deletes a single Timeunit record with an executor
func (o *Timeunit) Delete(ctx context.Context, exec bob.Executor) error {
	return Timeunits.Delete(ctx, exec, o)
}

// Reload refreshes the Timeunit using the executor
func (o *Timeunit) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Unitnum.EQ(o.Unitnum),
		SelectWhere.Timeunits.Date.EQ(o.Date),
		SelectWhere.Timeunits.Listingid.EQ(o.Listingid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TimeunitSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TimeunitSetter) error {
	return Timeunits.Update(ctx, exec, &vals, o...)
}

func (o TimeunitSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Timeunits.Delete(ctx, exec, o...)
}

func (o TimeunitSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	UnitnumPK := make([]int16, len(o))
	DatePK := make([]time.Time, len(o))
	ListingidPK := make([]int64, len(o))

	for i, o := range o {
		UnitnumPK[i] = o.Unitnum
		DatePK[i] = o.Date
		ListingidPK[i] = o.Listingid
	}

	mods = append(mods,
		SelectWhere.Timeunits.Unitnum.In(UnitnumPK...),
		SelectWhere.Timeunits.Date.In(DatePK...),
		SelectWhere.Timeunits.Listingid.In(ListingidPK...),
	)

	o2, err := Timeunits.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Unitnum != old.Unitnum {
				continue
			}
			if new.Date.Equal(old.Date) {
				continue
			}
			if new.Listingid != old.Listingid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func timeunitsJoinBookingidBooking[Q dialect.Joinable](from timeunitColumns, typ string) func(context.Context) modAs[Q, bookingColumns] {
	return func(ctx context.Context) modAs[Q, bookingColumns] {
		return modAs[Q, bookingColumns]{
			c: BookingColumns,
			f: func(to bookingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Bookings.Name(ctx).As(to.Alias())).On(
						to.Bookingid.EQ(from.Bookingid),
					))
				}

				return mods
			},
		}
	}
}

func timeunitsJoinListingidListing[Q dialect.Joinable](from timeunitColumns, typ string) func(context.Context) modAs[Q, listingColumns] {
	return func(ctx context.Context) modAs[Q, listingColumns] {
		return modAs[Q, listingColumns]{
			c: ListingColumns,
			f: func(to listingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Listings.Name(ctx).As(to.Alias())).On(
						to.Listingid.EQ(from.Listingid),
					))
				}

				return mods
			},
		}
	}
}

// BookingidBooking starts a query for related objects on booking
func (o *Timeunit) BookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	return Bookings.Query(ctx, exec, append(mods,
		sm.Where(BookingColumns.Bookingid.EQ(psql.Arg(o.Bookingid))),
	)...)
}

func (os TimeunitSlice) BookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Bookingid)
	}

	return Bookings.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(BookingColumns.Bookingid).In(PKArgs...)),
	)...)
}

// ListingidListing starts a query for related objects on listing
func (o *Timeunit) ListingidListing(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ListingsQuery {
	return Listings.Query(ctx, exec, append(mods,
		sm.Where(ListingColumns.Listingid.EQ(psql.Arg(o.Listingid))),
	)...)
}

func (os TimeunitSlice) ListingidListing(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ListingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Listingid)
	}

	return Listings.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(ListingColumns.Listingid).In(PKArgs...)),
	)...)
}

func (o *Timeunit) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BookingidBooking":
		rel, ok := retrieved.(*Booking)
		if !ok {
			return fmt.Errorf("timeunit cannot load %T as %q", retrieved, name)
		}

		o.R.BookingidBooking = rel

		if rel != nil {
			rel.R.BookingidTimeunits = TimeunitSlice{o}
		}
		return nil
	case "ListingidListing":
		rel, ok := retrieved.(*Listing)
		if !ok {
			return fmt.Errorf("timeunit cannot load %T as %q", retrieved, name)
		}

		o.R.ListingidListing = rel

		if rel != nil {
			rel.R.ListingidTimeunits = TimeunitSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("timeunit has no relationship %q", name)
	}
}

func PreloadTimeunitBookingidBooking(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Booking, BookingSlice](orm.Relationship{
		Name: "BookingidBooking",
		Sides: []orm.RelSide{
			{
				From: "timeunit",
				To:   TableNames.Bookings,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Bookings.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Timeunits.Bookingid,
				},
				ToColumns: []string{
					ColumnNames.Bookings.Bookingid,
				},
			},
		},
	}, Bookings.Columns().Names(), opts...)
}

func ThenLoadTimeunitBookingidBooking(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTimeunitBookingidBooking(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TimeunitBookingidBooking", retrieved)
		}

		err := loader.LoadTimeunitBookingidBooking(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTimeunitBookingidBooking loads the timeunit's BookingidBooking into the .R struct
func (o *Timeunit) LoadTimeunitBookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BookingidBooking = nil

	related, err := o.BookingidBooking(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.BookingidTimeunits = TimeunitSlice{o}

	o.R.BookingidBooking = related
	return nil
}

// LoadTimeunitBookingidBooking loads the timeunit's BookingidBooking into the .R struct
func (os TimeunitSlice) LoadTimeunitBookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	bookings, err := os.BookingidBooking(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range bookings {
			if o.Bookingid.GetOrZero() != rel.Bookingid {
				continue
			}

			rel.R.BookingidTimeunits = append(rel.R.BookingidTimeunits, o)

			o.R.BookingidBooking = rel
			break
		}
	}

	return nil
}

func PreloadTimeunitListingidListing(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Listing, ListingSlice](orm.Relationship{
		Name: "ListingidListing",
		Sides: []orm.RelSide{
			{
				From: "timeunit",
				To:   TableNames.Listings,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Listings.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Timeunits.Listingid,
				},
				ToColumns: []string{
					ColumnNames.Listings.Listingid,
				},
			},
		},
	}, Listings.Columns().Names(), opts...)
}

func ThenLoadTimeunitListingidListing(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTimeunitListingidListing(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TimeunitListingidListing", retrieved)
		}

		err := loader.LoadTimeunitListingidListing(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTimeunitListingidListing loads the timeunit's ListingidListing into the .R struct
func (o *Timeunit) LoadTimeunitListingidListing(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ListingidListing = nil

	related, err := o.ListingidListing(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.ListingidTimeunits = TimeunitSlice{o}

	o.R.ListingidListing = related
	return nil
}

// LoadTimeunitListingidListing loads the timeunit's ListingidListing into the .R struct
func (os TimeunitSlice) LoadTimeunitListingidListing(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	listings, err := os.ListingidListing(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range listings {
			if o.Listingid != rel.Listingid {
				continue
			}

			rel.R.ListingidTimeunits = append(rel.R.ListingidTimeunits, o)

			o.R.ListingidListing = rel
			break
		}
	}

	return nil
}

func attachTimeunitBookingidBooking0(ctx context.Context, exec bob.Executor, count int, timeunit0 *Timeunit, booking1 *Booking) (*Timeunit, error) {
	setter := &TimeunitSetter{
		Bookingid: omitnull.From(booking1.Bookingid),
	}

	err := Timeunits.Update(ctx, exec, setter, timeunit0)
	if err != nil {
		return nil, fmt.Errorf("attachTimeunitBookingidBooking0: %w", err)
	}

	return timeunit0, nil
}

func (timeunit0 *Timeunit) InsertBookingidBooking(ctx context.Context, exec bob.Executor, related *BookingSetter) error {
	booking1, err := Bookings.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTimeunitBookingidBooking0(ctx, exec, 1, timeunit0, booking1)
	if err != nil {
		return err
	}

	timeunit0.R.BookingidBooking = booking1

	booking1.R.BookingidTimeunits = append(booking1.R.BookingidTimeunits, timeunit0)

	return nil
}

func (timeunit0 *Timeunit) AttachBookingidBooking(ctx context.Context, exec bob.Executor, booking1 *Booking) error {
	var err error

	_, err = attachTimeunitBookingidBooking0(ctx, exec, 1, timeunit0, booking1)
	if err != nil {
		return err
	}

	timeunit0.R.BookingidBooking = booking1

	booking1.R.BookingidTimeunits = append(booking1.R.BookingidTimeunits, timeunit0)

	return nil
}

func attachTimeunitListingidListing0(ctx context.Context, exec bob.Executor, count int, timeunit0 *Timeunit, listing1 *Listing) (*Timeunit, error) {
	setter := &TimeunitSetter{
		Listingid: omit.From(listing1.Listingid),
	}

	err := Timeunits.Update(ctx, exec, setter, timeunit0)
	if err != nil {
		return nil, fmt.Errorf("attachTimeunitListingidListing0: %w", err)
	}

	return timeunit0, nil
}

func (timeunit0 *Timeunit) InsertListingidListing(ctx context.Context, exec bob.Executor, related *ListingSetter) error {
	listing1, err := Listings.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTimeunitListingidListing0(ctx, exec, 1, timeunit0, listing1)
	if err != nil {
		return err
	}

	timeunit0.R.ListingidListing = listing1

	listing1.R.ListingidTimeunits = append(listing1.R.ListingidTimeunits, timeunit0)

	return nil
}

func (timeunit0 *Timeunit) AttachListingidListing(ctx context.Context, exec bob.Executor, listing1 *Listing) error {
	var err error

	_, err = attachTimeunitListingidListing0(ctx, exec, 1, timeunit0, listing1)
	if err != nil {
		return err
	}

	timeunit0.R.ListingidListing = listing1

	listing1.R.ListingidTimeunits = append(listing1.R.ListingidTimeunits, timeunit0)

	return nil
}
