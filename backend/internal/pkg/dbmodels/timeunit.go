// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/ParkWithEase/parkeasy/backend/internal/pkg/dbtype"
	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Timeunit is an object representing the database table.
type Timeunit struct {
	Timerange     dbtype.Tstzrange `db:"timerange,pk" `
	Parkingspotid int64            `db:"parkingspotid,pk" `

	R timeunitR `db:"-" `
}

// TimeunitSlice is an alias for a slice of pointers to Timeunit.
// This should almost always be used instead of []*Timeunit.
type TimeunitSlice []*Timeunit

// Timeunits contains methods to work with the timeunit table
var Timeunits = psql.NewTablex[*Timeunit, TimeunitSlice, *TimeunitSetter]("", "timeunit")

// TimeunitsQuery is a query on the timeunit table
type TimeunitsQuery = *psql.ViewQuery[*Timeunit, TimeunitSlice]

// TimeunitsStmt is a prepared statment on timeunit
type TimeunitsStmt = bob.QueryStmt[*Timeunit, TimeunitSlice]

// timeunitR is where relationships are stored.
type timeunitR struct {
	ParkingspotidParkingspot *Parkingspot // timeunit.timeunit_parkingspotid_fkey
}

// TimeunitSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TimeunitSetter struct {
	Timerange     omit.Val[dbtype.Tstzrange] `db:"timerange,pk" `
	Parkingspotid omit.Val[int64]            `db:"parkingspotid,pk" `
}

func (s TimeunitSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.Timerange.IsUnset() {
		vals = append(vals, "timerange")
	}

	if !s.Parkingspotid.IsUnset() {
		vals = append(vals, "parkingspotid")
	}

	return vals
}

func (s TimeunitSetter) Overwrite(t *Timeunit) {
	if !s.Timerange.IsUnset() {
		t.Timerange, _ = s.Timerange.Get()
	}
	if !s.Parkingspotid.IsUnset() {
		t.Parkingspotid, _ = s.Parkingspotid.Get()
	}
}

func (s TimeunitSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 2)
	if s.Timerange.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Timerange)
	}

	if s.Parkingspotid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Parkingspotid)
	}

	return im.Values(vals...)
}

func (s TimeunitSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s TimeunitSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.Timerange.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "timerange")...),
			psql.Arg(s.Timerange),
		}})
	}

	if !s.Parkingspotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotid")...),
			psql.Arg(s.Parkingspotid),
		}})
	}

	return exprs
}

type timeunitColumnNames struct {
	Timerange     string
	Parkingspotid string
}

var TimeunitColumns = buildTimeunitColumns("timeunit")

type timeunitColumns struct {
	tableAlias    string
	Timerange     psql.Expression
	Parkingspotid psql.Expression
}

func (c timeunitColumns) Alias() string {
	return c.tableAlias
}

func (timeunitColumns) AliasedAs(alias string) timeunitColumns {
	return buildTimeunitColumns(alias)
}

func buildTimeunitColumns(alias string) timeunitColumns {
	return timeunitColumns{
		tableAlias:    alias,
		Timerange:     psql.Quote(alias, "timerange"),
		Parkingspotid: psql.Quote(alias, "parkingspotid"),
	}
}

type timeunitWhere[Q psql.Filterable] struct {
	Timerange     psql.WhereMod[Q, dbtype.Tstzrange]
	Parkingspotid psql.WhereMod[Q, int64]
}

func (timeunitWhere[Q]) AliasedAs(alias string) timeunitWhere[Q] {
	return buildTimeunitWhere[Q](buildTimeunitColumns(alias))
}

func buildTimeunitWhere[Q psql.Filterable](cols timeunitColumns) timeunitWhere[Q] {
	return timeunitWhere[Q]{
		Timerange:     psql.Where[Q, dbtype.Tstzrange](cols.Timerange),
		Parkingspotid: psql.Where[Q, int64](cols.Parkingspotid),
	}
}

type timeunitJoins[Q dialect.Joinable] struct {
	typ                      string
	ParkingspotidParkingspot func(context.Context) modAs[Q, parkingspotColumns]
}

func (j timeunitJoins[Q]) aliasedAs(alias string) timeunitJoins[Q] {
	return buildTimeunitJoins[Q](buildTimeunitColumns(alias), j.typ)
}

func buildTimeunitJoins[Q dialect.Joinable](cols timeunitColumns, typ string) timeunitJoins[Q] {
	return timeunitJoins[Q]{
		typ:                      typ,
		ParkingspotidParkingspot: timeunitsJoinParkingspotidParkingspot[Q](cols, typ),
	}
}

// FindTimeunit retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTimeunit(ctx context.Context, exec bob.Executor, TimerangePK dbtype.Tstzrange, ParkingspotidPK int64, cols ...string) (*Timeunit, error) {
	if len(cols) == 0 {
		return Timeunits.Query(
			ctx, exec,
			SelectWhere.Timeunits.Timerange.EQ(TimerangePK),
			SelectWhere.Timeunits.Parkingspotid.EQ(ParkingspotidPK),
		).One()
	}

	return Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Timerange.EQ(TimerangePK),
		SelectWhere.Timeunits.Parkingspotid.EQ(ParkingspotidPK),
		sm.Columns(Timeunits.Columns().Only(cols...)),
	).One()
}

// TimeunitExists checks the presence of a single record by primary key
func TimeunitExists(ctx context.Context, exec bob.Executor, TimerangePK dbtype.Tstzrange, ParkingspotidPK int64) (bool, error) {
	return Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Timerange.EQ(TimerangePK),
		SelectWhere.Timeunits.Parkingspotid.EQ(ParkingspotidPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Timeunit
func (o *Timeunit) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Timerange,
		o.Parkingspotid,
	)
}

// Update uses an executor to update the Timeunit
func (o *Timeunit) Update(ctx context.Context, exec bob.Executor, s *TimeunitSetter) error {
	return Timeunits.Update(ctx, exec, s, o)
}

// Delete deletes a single Timeunit record with an executor
func (o *Timeunit) Delete(ctx context.Context, exec bob.Executor) error {
	return Timeunits.Delete(ctx, exec, o)
}

// Reload refreshes the Timeunit using the executor
func (o *Timeunit) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Timeunits.Query(
		ctx, exec,
		SelectWhere.Timeunits.Timerange.EQ(o.Timerange),
		SelectWhere.Timeunits.Parkingspotid.EQ(o.Parkingspotid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TimeunitSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TimeunitSetter) error {
	return Timeunits.Update(ctx, exec, &vals, o...)
}

func (o TimeunitSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Timeunits.Delete(ctx, exec, o...)
}

func (o TimeunitSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	TimerangePK := make([]dbtype.Tstzrange, len(o))
	ParkingspotidPK := make([]int64, len(o))

	for i, o := range o {
		TimerangePK[i] = o.Timerange
		ParkingspotidPK[i] = o.Parkingspotid
	}

	mods = append(mods,
		SelectWhere.Timeunits.Timerange.In(TimerangePK...),
		SelectWhere.Timeunits.Parkingspotid.In(ParkingspotidPK...),
	)

	o2, err := Timeunits.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Timerange != old.Timerange {
				continue
			}
			if new.Parkingspotid != old.Parkingspotid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func timeunitsJoinParkingspotidParkingspot[Q dialect.Joinable](from timeunitColumns, typ string) func(context.Context) modAs[Q, parkingspotColumns] {
	return func(ctx context.Context) modAs[Q, parkingspotColumns] {
		return modAs[Q, parkingspotColumns]{
			c: ParkingspotColumns,
			f: func(to parkingspotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Parkingspots.Name(ctx).As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

// ParkingspotidParkingspot starts a query for related objects on parkingspot
func (o *Timeunit) ParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	return Parkingspots.Query(ctx, exec, append(mods,
		sm.Where(ParkingspotColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os TimeunitSlice) ParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Parkingspots.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(ParkingspotColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

func (o *Timeunit) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ParkingspotidParkingspot":
		rel, ok := retrieved.(*Parkingspot)
		if !ok {
			return fmt.Errorf("timeunit cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidParkingspot = rel

		if rel != nil {
			rel.R.ParkingspotidTimeunits = TimeunitSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("timeunit has no relationship %q", name)
	}
}

func PreloadTimeunitParkingspotidParkingspot(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Parkingspot, ParkingspotSlice](orm.Relationship{
		Name: "ParkingspotidParkingspot",
		Sides: []orm.RelSide{
			{
				From: "timeunit",
				To:   TableNames.Parkingspots,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Parkingspots.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Timeunits.Parkingspotid,
				},
				ToColumns: []string{
					ColumnNames.Parkingspots.Parkingspotid,
				},
			},
		},
	}, Parkingspots.Columns().Names(), opts...)
}

func ThenLoadTimeunitParkingspotidParkingspot(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTimeunitParkingspotidParkingspot(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TimeunitParkingspotidParkingspot", retrieved)
		}

		err := loader.LoadTimeunitParkingspotidParkingspot(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTimeunitParkingspotidParkingspot loads the timeunit's ParkingspotidParkingspot into the .R struct
func (o *Timeunit) LoadTimeunitParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidParkingspot = nil

	related, err := o.ParkingspotidParkingspot(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.ParkingspotidTimeunits = TimeunitSlice{o}

	o.R.ParkingspotidParkingspot = related
	return nil
}

// LoadTimeunitParkingspotidParkingspot loads the timeunit's ParkingspotidParkingspot into the .R struct
func (os TimeunitSlice) LoadTimeunitParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	parkingspots, err := os.ParkingspotidParkingspot(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range parkingspots {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidTimeunits = append(rel.R.ParkingspotidTimeunits, o)

			o.R.ParkingspotidParkingspot = rel
			break
		}
	}

	return nil
}

func attachTimeunitParkingspotidParkingspot0(ctx context.Context, exec bob.Executor, count int, timeunit0 *Timeunit, parkingspot1 *Parkingspot) (*Timeunit, error) {
	setter := &TimeunitSetter{
		Parkingspotid: omit.From(parkingspot1.Parkingspotid),
	}

	err := Timeunits.Update(ctx, exec, setter, timeunit0)
	if err != nil {
		return nil, fmt.Errorf("attachTimeunitParkingspotidParkingspot0: %w", err)
	}

	return timeunit0, nil
}

func (timeunit0 *Timeunit) InsertParkingspotidParkingspot(ctx context.Context, exec bob.Executor, related *ParkingspotSetter) error {
	parkingspot1, err := Parkingspots.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTimeunitParkingspotidParkingspot0(ctx, exec, 1, timeunit0, parkingspot1)
	if err != nil {
		return err
	}

	timeunit0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidTimeunits = append(parkingspot1.R.ParkingspotidTimeunits, timeunit0)

	return nil
}

func (timeunit0 *Timeunit) AttachParkingspotidParkingspot(ctx context.Context, exec bob.Executor, parkingspot1 *Parkingspot) error {
	var err error

	_, err = attachTimeunitParkingspotidParkingspot0(ctx, exec, 1, timeunit0, parkingspot1)
	if err != nil {
		return err
	}

	timeunit0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidTimeunits = append(parkingspot1.R.ParkingspotidTimeunits, timeunit0)

	return nil
}
