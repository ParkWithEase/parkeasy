// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// User is an object representing the database table.
type User struct {
	Userid     int32     `db:"userid,pk" `
	Authuuid   uuid.UUID `db:"authuuid" `
	Useruuid   uuid.UUID `db:"useruuid" `
	Fullname   string    `db:"fullname" `
	Email      string    `db:"email" `
	Isverified bool      `db:"isverified" `
	Addedat    time.Time `db:"addedat" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// UsersStmt is a prepared statment on users
type UsersStmt = bob.QueryStmt[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	UseruuidCar  *Car  // car.car_useruuid_fkey
	AuthuuidAuth *Auth // users.users_authuuid_fkey
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	Userid     omit.Val[int32]     `db:"userid,pk" `
	Authuuid   omit.Val[uuid.UUID] `db:"authuuid" `
	Useruuid   omit.Val[uuid.UUID] `db:"useruuid" `
	Fullname   omit.Val[string]    `db:"fullname" `
	Email      omit.Val[string]    `db:"email" `
	Isverified omit.Val[bool]      `db:"isverified" `
	Addedat    omit.Val[time.Time] `db:"addedat" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.Userid.IsUnset() {
		vals = append(vals, "userid")
	}

	if !s.Authuuid.IsUnset() {
		vals = append(vals, "authuuid")
	}

	if !s.Useruuid.IsUnset() {
		vals = append(vals, "useruuid")
	}

	if !s.Fullname.IsUnset() {
		vals = append(vals, "fullname")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	if !s.Isverified.IsUnset() {
		vals = append(vals, "isverified")
	}

	if !s.Addedat.IsUnset() {
		vals = append(vals, "addedat")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if !s.Userid.IsUnset() {
		t.Userid, _ = s.Userid.Get()
	}
	if !s.Authuuid.IsUnset() {
		t.Authuuid, _ = s.Authuuid.Get()
	}
	if !s.Useruuid.IsUnset() {
		t.Useruuid, _ = s.Useruuid.Get()
	}
	if !s.Fullname.IsUnset() {
		t.Fullname, _ = s.Fullname.Get()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.Get()
	}
	if !s.Isverified.IsUnset() {
		t.Isverified, _ = s.Isverified.Get()
	}
	if !s.Addedat.IsUnset() {
		t.Addedat, _ = s.Addedat.Get()
	}
}

func (s UserSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 7)
	if s.Userid.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Userid)
	}

	if s.Authuuid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Authuuid)
	}

	if s.Useruuid.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Useruuid)
	}

	if s.Fullname.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Fullname)
	}

	if s.Email.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.Email)
	}

	if s.Isverified.IsUnset() {
		vals[5] = psql.Raw("DEFAULT")
	} else {
		vals[5] = psql.Arg(s.Isverified)
	}

	if s.Addedat.IsUnset() {
		vals[6] = psql.Raw("DEFAULT")
	} else {
		vals[6] = psql.Arg(s.Addedat)
	}

	return im.Values(vals...)
}

func (s UserSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.Userid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "userid")...),
			psql.Arg(s.Userid),
		}})
	}

	if !s.Authuuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "authuuid")...),
			psql.Arg(s.Authuuid),
		}})
	}

	if !s.Useruuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "useruuid")...),
			psql.Arg(s.Useruuid),
		}})
	}

	if !s.Fullname.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fullname")...),
			psql.Arg(s.Fullname),
		}})
	}

	if !s.Email.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if !s.Isverified.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "isverified")...),
			psql.Arg(s.Isverified),
		}})
	}

	if !s.Addedat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "addedat")...),
			psql.Arg(s.Addedat),
		}})
	}

	return exprs
}

type userColumnNames struct {
	Userid     string
	Authuuid   string
	Useruuid   string
	Fullname   string
	Email      string
	Isverified string
	Addedat    string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias string
	Userid     psql.Expression
	Authuuid   psql.Expression
	Useruuid   psql.Expression
	Fullname   psql.Expression
	Email      psql.Expression
	Isverified psql.Expression
	Addedat    psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias: alias,
		Userid:     psql.Quote(alias, "userid"),
		Authuuid:   psql.Quote(alias, "authuuid"),
		Useruuid:   psql.Quote(alias, "useruuid"),
		Fullname:   psql.Quote(alias, "fullname"),
		Email:      psql.Quote(alias, "email"),
		Isverified: psql.Quote(alias, "isverified"),
		Addedat:    psql.Quote(alias, "addedat"),
	}
}

type userWhere[Q psql.Filterable] struct {
	Userid     psql.WhereMod[Q, int32]
	Authuuid   psql.WhereMod[Q, uuid.UUID]
	Useruuid   psql.WhereMod[Q, uuid.UUID]
	Fullname   psql.WhereMod[Q, string]
	Email      psql.WhereMod[Q, string]
	Isverified psql.WhereMod[Q, bool]
	Addedat    psql.WhereMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		Userid:     psql.Where[Q, int32](cols.Userid),
		Authuuid:   psql.Where[Q, uuid.UUID](cols.Authuuid),
		Useruuid:   psql.Where[Q, uuid.UUID](cols.Useruuid),
		Fullname:   psql.Where[Q, string](cols.Fullname),
		Email:      psql.Where[Q, string](cols.Email),
		Isverified: psql.Where[Q, bool](cols.Isverified),
		Addedat:    psql.Where[Q, time.Time](cols.Addedat),
	}
}

type userJoins[Q dialect.Joinable] struct {
	typ          string
	UseruuidCar  func(context.Context) modAs[Q, carColumns]
	AuthuuidAuth func(context.Context) modAs[Q, authColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ:          typ,
		UseruuidCar:  usersJoinUseruuidCar[Q](cols, typ),
		AuthuuidAuth: usersJoinAuthuuidAuth[Q](cols, typ),
	}
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, UseridPK int32, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			ctx, exec,
			SelectWhere.Users.Userid.EQ(UseridPK),
		).One()
	}

	return Users.Query(
		ctx, exec,
		SelectWhere.Users.Userid.EQ(UseridPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One()
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, UseridPK int32) (bool, error) {
	return Users.Query(
		ctx, exec,
		SelectWhere.Users.Userid.EQ(UseridPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the User
func (o *User) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Userid)
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	return Users.Update(ctx, exec, s, o)
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	return Users.Delete(ctx, exec, o)
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		ctx, exec,
		SelectWhere.Users.Userid.EQ(o.Userid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	return Users.Update(ctx, exec, &vals, o...)
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Users.Delete(ctx, exec, o...)
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	UseridPK := make([]int32, len(o))

	for i, o := range o {
		UseridPK[i] = o.Userid
	}

	mods = append(mods,
		SelectWhere.Users.Userid.In(UseridPK...),
	)

	o2, err := Users.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Userid != old.Userid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func usersJoinUseruuidCar[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, carColumns] {
	return func(ctx context.Context) modAs[Q, carColumns] {
		return modAs[Q, carColumns]{
			c: CarColumns,
			f: func(to carColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Cars.Name(ctx).As(to.Alias())).On(
						to.Useruuid.EQ(from.Useruuid),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinAuthuuidAuth[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, authColumns] {
	return func(ctx context.Context) modAs[Q, authColumns] {
		return modAs[Q, authColumns]{
			c: AuthColumns,
			f: func(to authColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Auths.Name(ctx).As(to.Alias())).On(
						to.Authuuid.EQ(from.Authuuid),
					))
				}

				return mods
			},
		}
	}
}

// UseruuidCar starts a query for related objects on car
func (o *User) UseruuidCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	return Cars.Query(ctx, exec, append(mods,
		sm.Where(CarColumns.Useruuid.EQ(psql.Arg(o.Useruuid))),
	)...)
}

func (os UserSlice) UseruuidCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Useruuid)
	}

	return Cars.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(CarColumns.Useruuid).In(PKArgs...)),
	)...)
}

// AuthuuidAuth starts a query for related objects on auth
func (o *User) AuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	return Auths.Query(ctx, exec, append(mods,
		sm.Where(AuthColumns.Authuuid.EQ(psql.Arg(o.Authuuid))),
	)...)
}

func (os UserSlice) AuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Authuuid)
	}

	return Auths.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(AuthColumns.Authuuid).In(PKArgs...)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "UseruuidCar":
		rel, ok := retrieved.(*Car)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UseruuidCar = rel

		if rel != nil {
			rel.R.UseruuidUser = o
		}
		return nil
	case "AuthuuidAuth":
		rel, ok := retrieved.(*Auth)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.AuthuuidAuth = rel

		if rel != nil {
			rel.R.AuthuuidUser = o
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

func PreloadUserUseruuidCar(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Car, CarSlice](orm.Relationship{
		Name: "UseruuidCar",
		Sides: []orm.RelSide{
			{
				From: "users",
				To:   TableNames.Cars,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Cars.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Users.Useruuid,
				},
				ToColumns: []string{
					ColumnNames.Cars.Useruuid,
				},
			},
		},
	}, Cars.Columns().Names(), opts...)
}

func ThenLoadUserUseruuidCar(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUseruuidCar(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUseruuidCar", retrieved)
		}

		err := loader.LoadUserUseruuidCar(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUseruuidCar loads the user's UseruuidCar into the .R struct
func (o *User) LoadUserUseruuidCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseruuidCar = nil

	related, err := o.UseruuidCar(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.UseruuidUser = o

	o.R.UseruuidCar = related
	return nil
}

// LoadUserUseruuidCar loads the user's UseruuidCar into the .R struct
func (os UserSlice) LoadUserUseruuidCar(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cars, err := os.UseruuidCar(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range cars {
			if o.Useruuid != rel.Useruuid {
				continue
			}

			rel.R.UseruuidUser = o

			o.R.UseruuidCar = rel
			break
		}
	}

	return nil
}

func PreloadUserAuthuuidAuth(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Auth, AuthSlice](orm.Relationship{
		Name: "AuthuuidAuth",
		Sides: []orm.RelSide{
			{
				From: "users",
				To:   TableNames.Auths,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Auths.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Users.Authuuid,
				},
				ToColumns: []string{
					ColumnNames.Auths.Authuuid,
				},
			},
		},
	}, Auths.Columns().Names(), opts...)
}

func ThenLoadUserAuthuuidAuth(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserAuthuuidAuth(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserAuthuuidAuth", retrieved)
		}

		err := loader.LoadUserAuthuuidAuth(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserAuthuuidAuth loads the user's AuthuuidAuth into the .R struct
func (o *User) LoadUserAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthuuidAuth = nil

	related, err := o.AuthuuidAuth(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.AuthuuidUser = o

	o.R.AuthuuidAuth = related
	return nil
}

// LoadUserAuthuuidAuth loads the user's AuthuuidAuth into the .R struct
func (os UserSlice) LoadUserAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	auths, err := os.AuthuuidAuth(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range auths {
			if o.Authuuid != rel.Authuuid {
				continue
			}

			rel.R.AuthuuidUser = o

			o.R.AuthuuidAuth = rel
			break
		}
	}

	return nil
}

func insertUserUseruuidCar0(ctx context.Context, exec bob.Executor, car1 *CarSetter, user0 *User) (*Car, error) {
	car1.Useruuid = omit.From(user0.Useruuid)

	ret, err := Cars.Insert(ctx, exec, car1)
	if err != nil {
		return ret, fmt.Errorf("insertUserUseruuidCar0: %w", err)
	}

	return ret, nil
}

func attachUserUseruuidCar0(ctx context.Context, exec bob.Executor, count int, car1 *Car, user0 *User) (*Car, error) {
	setter := &CarSetter{
		Useruuid: omit.From(user0.Useruuid),
	}

	err := Cars.Update(ctx, exec, setter, car1)
	if err != nil {
		return nil, fmt.Errorf("attachUserUseruuidCar0: %w", err)
	}

	return car1, nil
}

func (user0 *User) InsertUseruuidCar(ctx context.Context, exec bob.Executor, related *CarSetter) error {
	car1, err := insertUserUseruuidCar0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UseruuidCar = car1

	car1.R.UseruuidUser = user0

	return nil
}

func (user0 *User) AttachUseruuidCar(ctx context.Context, exec bob.Executor, car1 *Car) error {
	var err error

	_, err = attachUserUseruuidCar0(ctx, exec, 1, car1, user0)
	if err != nil {
		return err
	}

	user0.R.UseruuidCar = car1

	car1.R.UseruuidUser = user0

	return nil
}

func attachUserAuthuuidAuth0(ctx context.Context, exec bob.Executor, count int, user0 *User, auth1 *Auth) (*User, error) {
	setter := &UserSetter{
		Authuuid: omit.From(auth1.Authuuid),
	}

	err := Users.Update(ctx, exec, setter, user0)
	if err != nil {
		return nil, fmt.Errorf("attachUserAuthuuidAuth0: %w", err)
	}

	return user0, nil
}

func (user0 *User) InsertAuthuuidAuth(ctx context.Context, exec bob.Executor, related *AuthSetter) error {
	auth1, err := Auths.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserAuthuuidAuth0(ctx, exec, 1, user0, auth1)
	if err != nil {
		return err
	}

	user0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidUser = user0

	return nil
}

func (user0 *User) AttachAuthuuidAuth(ctx context.Context, exec bob.Executor, auth1 *Auth) error {
	var err error

	_, err = attachUserAuthuuidAuth0(ctx, exec, 1, user0, auth1)
	if err != nil {
		return err
	}

	user0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidUser = user0

	return nil
}
