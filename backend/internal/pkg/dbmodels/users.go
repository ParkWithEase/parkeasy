// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// User is an object representing the database table.
type User struct {
	Userid     int64     `db:"userid,pk" `
	Useruuid   uuid.UUID `db:"useruuid" `
	Authuuid   uuid.UUID `db:"authuuid" `
	Fullname   string    `db:"fullname" `
	Email      string    `db:"email" `
	Isverified bool      `db:"isverified" `
	Addedat    time.Time `db:"addedat" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	UseridBookings        BookingSlice        // booking.booking_userid_fkey
	UseridCars            CarSlice            // car.car_userid_fkey
	UseridParkingspots    ParkingspotSlice    // parkingspot.parkingspot_userid_fkey
	UseridPreferencespots PreferencespotSlice // preferencespot.preferencespot_userid_fkey
	AuthuuidAuth          *Auth               // users.users_authuuid_fkey
}

type userColumnNames struct {
	Userid     string
	Useruuid   string
	Authuuid   string
	Fullname   string
	Email      string
	Isverified string
	Addedat    string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias string
	Userid     psql.Expression
	Useruuid   psql.Expression
	Authuuid   psql.Expression
	Fullname   psql.Expression
	Email      psql.Expression
	Isverified psql.Expression
	Addedat    psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias: alias,
		Userid:     psql.Quote(alias, "userid"),
		Useruuid:   psql.Quote(alias, "useruuid"),
		Authuuid:   psql.Quote(alias, "authuuid"),
		Fullname:   psql.Quote(alias, "fullname"),
		Email:      psql.Quote(alias, "email"),
		Isverified: psql.Quote(alias, "isverified"),
		Addedat:    psql.Quote(alias, "addedat"),
	}
}

type userWhere[Q psql.Filterable] struct {
	Userid     psql.WhereMod[Q, int64]
	Useruuid   psql.WhereMod[Q, uuid.UUID]
	Authuuid   psql.WhereMod[Q, uuid.UUID]
	Fullname   psql.WhereMod[Q, string]
	Email      psql.WhereMod[Q, string]
	Isverified psql.WhereMod[Q, bool]
	Addedat    psql.WhereMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		Userid:     psql.Where[Q, int64](cols.Userid),
		Useruuid:   psql.Where[Q, uuid.UUID](cols.Useruuid),
		Authuuid:   psql.Where[Q, uuid.UUID](cols.Authuuid),
		Fullname:   psql.Where[Q, string](cols.Fullname),
		Email:      psql.Where[Q, string](cols.Email),
		Isverified: psql.Where[Q, bool](cols.Isverified),
		Addedat:    psql.Where[Q, time.Time](cols.Addedat),
	}
}

var UserErrors = &userErrors{
	ErrUniqueAuthuuid: &errUniqueConstraint{s: "users_authuuid_key"},

	ErrUniqueEmail: &errUniqueConstraint{s: "users_email_key"},

	ErrUniqueUseruuid: &errUniqueConstraint{s: "users_useruuid_key"},
}

type userErrors struct {
	ErrUniqueAuthuuid error

	ErrUniqueEmail error

	ErrUniqueUseruuid error
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	Userid     omit.Val[int64]     `db:"userid,pk" `
	Useruuid   omit.Val[uuid.UUID] `db:"useruuid" `
	Authuuid   omit.Val[uuid.UUID] `db:"authuuid" `
	Fullname   omit.Val[string]    `db:"fullname" `
	Email      omit.Val[string]    `db:"email" `
	Isverified omit.Val[bool]      `db:"isverified" `
	Addedat    omit.Val[time.Time] `db:"addedat" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.Userid.IsUnset() {
		vals = append(vals, "userid")
	}

	if !s.Useruuid.IsUnset() {
		vals = append(vals, "useruuid")
	}

	if !s.Authuuid.IsUnset() {
		vals = append(vals, "authuuid")
	}

	if !s.Fullname.IsUnset() {
		vals = append(vals, "fullname")
	}

	if !s.Email.IsUnset() {
		vals = append(vals, "email")
	}

	if !s.Isverified.IsUnset() {
		vals = append(vals, "isverified")
	}

	if !s.Addedat.IsUnset() {
		vals = append(vals, "addedat")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if !s.Userid.IsUnset() {
		t.Userid, _ = s.Userid.Get()
	}
	if !s.Useruuid.IsUnset() {
		t.Useruuid, _ = s.Useruuid.Get()
	}
	if !s.Authuuid.IsUnset() {
		t.Authuuid, _ = s.Authuuid.Get()
	}
	if !s.Fullname.IsUnset() {
		t.Fullname, _ = s.Fullname.Get()
	}
	if !s.Email.IsUnset() {
		t.Email, _ = s.Email.Get()
	}
	if !s.Isverified.IsUnset() {
		t.Isverified, _ = s.Isverified.Get()
	}
	if !s.Addedat.IsUnset() {
		t.Addedat, _ = s.Addedat.Get()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.Userid.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.Userid)
		}

		if s.Useruuid.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Useruuid)
		}

		if s.Authuuid.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Authuuid)
		}

		if s.Fullname.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Fullname)
		}

		if s.Email.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.Email)
		}

		if s.Isverified.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.Isverified)
		}

		if s.Addedat.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.Addedat)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.Userid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "userid")...),
			psql.Arg(s.Userid),
		}})
	}

	if !s.Useruuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "useruuid")...),
			psql.Arg(s.Useruuid),
		}})
	}

	if !s.Authuuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "authuuid")...),
			psql.Arg(s.Authuuid),
		}})
	}

	if !s.Fullname.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fullname")...),
			psql.Arg(s.Fullname),
		}})
	}

	if !s.Email.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if !s.Isverified.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "isverified")...),
			psql.Arg(s.Isverified),
		}})
	}

	if !s.Addedat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "addedat")...),
			psql.Arg(s.Addedat),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, UseridPK int64, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.Userid.EQ(UseridPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.Userid.EQ(UseridPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, UseridPK int64) (bool, error) {
	return Users.Query(
		SelectWhere.Users.Userid.EQ(UseridPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the User
func (o *User) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Userid)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "userid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.Userid.EQ(o.Userid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	return psql.Quote("users", "userid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.Userid != old.Userid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ                   string
	UseridBookings        func(context.Context) modAs[Q, bookingColumns]
	UseridCars            func(context.Context) modAs[Q, carColumns]
	UseridParkingspots    func(context.Context) modAs[Q, parkingspotColumns]
	UseridPreferencespots func(context.Context) modAs[Q, preferencespotColumns]
	AuthuuidAuth          func(context.Context) modAs[Q, authColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ:                   typ,
		UseridBookings:        usersJoinUseridBookings[Q](cols, typ),
		UseridCars:            usersJoinUseridCars[Q](cols, typ),
		UseridParkingspots:    usersJoinUseridParkingspots[Q](cols, typ),
		UseridPreferencespots: usersJoinUseridPreferencespots[Q](cols, typ),
		AuthuuidAuth:          usersJoinAuthuuidAuth[Q](cols, typ),
	}
}

func usersJoinUseridBookings[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, bookingColumns] {
	return func(ctx context.Context) modAs[Q, bookingColumns] {
		return modAs[Q, bookingColumns]{
			c: BookingColumns,
			f: func(to bookingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Bookings.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinUseridCars[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, carColumns] {
	return func(ctx context.Context) modAs[Q, carColumns] {
		return modAs[Q, carColumns]{
			c: CarColumns,
			f: func(to carColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Cars.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinUseridParkingspots[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, parkingspotColumns] {
	return func(ctx context.Context) modAs[Q, parkingspotColumns] {
		return modAs[Q, parkingspotColumns]{
			c: ParkingspotColumns,
			f: func(to parkingspotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Parkingspots.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinUseridPreferencespots[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, preferencespotColumns] {
	return func(ctx context.Context) modAs[Q, preferencespotColumns] {
		return modAs[Q, preferencespotColumns]{
			c: PreferencespotColumns,
			f: func(to preferencespotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Preferencespots.Name().As(to.Alias())).On(
						to.Userid.EQ(from.Userid),
					))
				}

				return mods
			},
		}
	}
}

func usersJoinAuthuuidAuth[Q dialect.Joinable](from userColumns, typ string) func(context.Context) modAs[Q, authColumns] {
	return func(ctx context.Context) modAs[Q, authColumns] {
		return modAs[Q, authColumns]{
			c: AuthColumns,
			f: func(to authColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Auths.Name().As(to.Alias())).On(
						to.Authuuid.EQ(from.Authuuid),
					))
				}

				return mods
			},
		}
	}
}

// UseridBookings starts a query for related objects on booking
func (o *User) UseridBookings(mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	return Bookings.Query(append(mods,
		sm.Where(BookingColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os UserSlice) UseridBookings(mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Bookings.Query(append(mods,
		sm.Where(psql.Group(BookingColumns.Userid).In(PKArgs...)),
	)...)
}

// UseridCars starts a query for related objects on car
func (o *User) UseridCars(mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	return Cars.Query(append(mods,
		sm.Where(CarColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os UserSlice) UseridCars(mods ...bob.Mod[*dialect.SelectQuery]) CarsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Cars.Query(append(mods,
		sm.Where(psql.Group(CarColumns.Userid).In(PKArgs...)),
	)...)
}

// UseridParkingspots starts a query for related objects on parkingspot
func (o *User) UseridParkingspots(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	return Parkingspots.Query(append(mods,
		sm.Where(ParkingspotColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os UserSlice) UseridParkingspots(mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Parkingspots.Query(append(mods,
		sm.Where(psql.Group(ParkingspotColumns.Userid).In(PKArgs...)),
	)...)
}

// UseridPreferencespots starts a query for related objects on preferencespot
func (o *User) UseridPreferencespots(mods ...bob.Mod[*dialect.SelectQuery]) PreferencespotsQuery {
	return Preferencespots.Query(append(mods,
		sm.Where(PreferencespotColumns.Userid.EQ(psql.Arg(o.Userid))),
	)...)
}

func (os UserSlice) UseridPreferencespots(mods ...bob.Mod[*dialect.SelectQuery]) PreferencespotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Userid)
	}

	return Preferencespots.Query(append(mods,
		sm.Where(psql.Group(PreferencespotColumns.Userid).In(PKArgs...)),
	)...)
}

// AuthuuidAuth starts a query for related objects on auth
func (o *User) AuthuuidAuth(mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	return Auths.Query(append(mods,
		sm.Where(AuthColumns.Authuuid.EQ(psql.Arg(o.Authuuid))),
	)...)
}

func (os UserSlice) AuthuuidAuth(mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Authuuid)
	}

	return Auths.Query(append(mods,
		sm.Where(psql.Group(AuthColumns.Authuuid).In(PKArgs...)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "UseridBookings":
		rels, ok := retrieved.(BookingSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UseridBookings = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UseridUser = o
			}
		}
		return nil
	case "UseridCars":
		rels, ok := retrieved.(CarSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UseridCars = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UseridUser = o
			}
		}
		return nil
	case "UseridParkingspots":
		rels, ok := retrieved.(ParkingspotSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UseridParkingspots = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UseridUser = o
			}
		}
		return nil
	case "UseridPreferencespots":
		rels, ok := retrieved.(PreferencespotSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UseridPreferencespots = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UseridUser = o
			}
		}
		return nil
	case "AuthuuidAuth":
		rel, ok := retrieved.(*Auth)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.AuthuuidAuth = rel

		if rel != nil {
			rel.R.AuthuuidUser = o
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

func ThenLoadUserUseridBookings(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUseridBookings(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUseridBookings", retrieved)
		}

		err := loader.LoadUserUseridBookings(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUseridBookings loads the user's UseridBookings into the .R struct
func (o *User) LoadUserUseridBookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridBookings = nil

	related, err := o.UseridBookings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UseridUser = o
	}

	o.R.UseridBookings = related
	return nil
}

// LoadUserUseridBookings loads the user's UseridBookings into the .R struct
func (os UserSlice) LoadUserUseridBookings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	bookings, err := os.UseridBookings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UseridBookings = nil
	}

	for _, o := range os {
		for _, rel := range bookings {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridUser = o

			o.R.UseridBookings = append(o.R.UseridBookings, rel)
		}
	}

	return nil
}

func ThenLoadUserUseridCars(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUseridCars(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUseridCars", retrieved)
		}

		err := loader.LoadUserUseridCars(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUseridCars loads the user's UseridCars into the .R struct
func (o *User) LoadUserUseridCars(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridCars = nil

	related, err := o.UseridCars(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UseridUser = o
	}

	o.R.UseridCars = related
	return nil
}

// LoadUserUseridCars loads the user's UseridCars into the .R struct
func (os UserSlice) LoadUserUseridCars(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	cars, err := os.UseridCars(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UseridCars = nil
	}

	for _, o := range os {
		for _, rel := range cars {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridUser = o

			o.R.UseridCars = append(o.R.UseridCars, rel)
		}
	}

	return nil
}

func ThenLoadUserUseridParkingspots(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUseridParkingspots(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUseridParkingspots", retrieved)
		}

		err := loader.LoadUserUseridParkingspots(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUseridParkingspots loads the user's UseridParkingspots into the .R struct
func (o *User) LoadUserUseridParkingspots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridParkingspots = nil

	related, err := o.UseridParkingspots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UseridUser = o
	}

	o.R.UseridParkingspots = related
	return nil
}

// LoadUserUseridParkingspots loads the user's UseridParkingspots into the .R struct
func (os UserSlice) LoadUserUseridParkingspots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	parkingspots, err := os.UseridParkingspots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UseridParkingspots = nil
	}

	for _, o := range os {
		for _, rel := range parkingspots {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridUser = o

			o.R.UseridParkingspots = append(o.R.UseridParkingspots, rel)
		}
	}

	return nil
}

func ThenLoadUserUseridPreferencespots(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserUseridPreferencespots(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserUseridPreferencespots", retrieved)
		}

		err := loader.LoadUserUseridPreferencespots(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserUseridPreferencespots loads the user's UseridPreferencespots into the .R struct
func (o *User) LoadUserUseridPreferencespots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UseridPreferencespots = nil

	related, err := o.UseridPreferencespots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UseridUser = o
	}

	o.R.UseridPreferencespots = related
	return nil
}

// LoadUserUseridPreferencespots loads the user's UseridPreferencespots into the .R struct
func (os UserSlice) LoadUserUseridPreferencespots(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	preferencespots, err := os.UseridPreferencespots(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UseridPreferencespots = nil
	}

	for _, o := range os {
		for _, rel := range preferencespots {
			if o.Userid != rel.Userid {
				continue
			}

			rel.R.UseridUser = o

			o.R.UseridPreferencespots = append(o.R.UseridPreferencespots, rel)
		}
	}

	return nil
}

func PreloadUserAuthuuidAuth(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Auth, AuthSlice](orm.Relationship{
		Name: "AuthuuidAuth",
		Sides: []orm.RelSide{
			{
				From: TableNames.Users,
				To:   TableNames.Auths,
				FromColumns: []string{
					ColumnNames.Users.Authuuid,
				},
				ToColumns: []string{
					ColumnNames.Auths.Authuuid,
				},
			},
		},
	}, Auths.Columns().Names(), opts...)
}

func ThenLoadUserAuthuuidAuth(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserAuthuuidAuth(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserAuthuuidAuth", retrieved)
		}

		err := loader.LoadUserAuthuuidAuth(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserAuthuuidAuth loads the user's AuthuuidAuth into the .R struct
func (o *User) LoadUserAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthuuidAuth = nil

	related, err := o.AuthuuidAuth(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.AuthuuidUser = o

	o.R.AuthuuidAuth = related
	return nil
}

// LoadUserAuthuuidAuth loads the user's AuthuuidAuth into the .R struct
func (os UserSlice) LoadUserAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	auths, err := os.AuthuuidAuth(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range auths {
			if o.Authuuid != rel.Authuuid {
				continue
			}

			rel.R.AuthuuidUser = o

			o.R.AuthuuidAuth = rel
			break
		}
	}

	return nil
}

func insertUserUseridBookings0(ctx context.Context, exec bob.Executor, bookings1 []*BookingSetter, user0 *User) (BookingSlice, error) {
	for i := range bookings1 {
		bookings1[i].Userid = omit.From(user0.Userid)
	}

	ret, err := Bookings.Insert(bob.ToMods(bookings1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUseridBookings0: %w", err)
	}

	return ret, nil
}

func attachUserUseridBookings0(ctx context.Context, exec bob.Executor, count int, bookings1 BookingSlice, user0 *User) (BookingSlice, error) {
	setter := &BookingSetter{
		Userid: omit.From(user0.Userid),
	}

	err := bookings1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUseridBookings0: %w", err)
	}

	return bookings1, nil
}

func (user0 *User) InsertUseridBookings(ctx context.Context, exec bob.Executor, related ...*BookingSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	bookings1, err := insertUserUseridBookings0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UseridBookings = append(user0.R.UseridBookings, bookings1...)

	for _, rel := range bookings1 {
		rel.R.UseridUser = user0
	}
	return nil
}

func (user0 *User) AttachUseridBookings(ctx context.Context, exec bob.Executor, related ...*Booking) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	bookings1 := BookingSlice(related)

	_, err = attachUserUseridBookings0(ctx, exec, len(related), bookings1, user0)
	if err != nil {
		return err
	}

	user0.R.UseridBookings = append(user0.R.UseridBookings, bookings1...)

	for _, rel := range related {
		rel.R.UseridUser = user0
	}

	return nil
}

func insertUserUseridCars0(ctx context.Context, exec bob.Executor, cars1 []*CarSetter, user0 *User) (CarSlice, error) {
	for i := range cars1 {
		cars1[i].Userid = omit.From(user0.Userid)
	}

	ret, err := Cars.Insert(bob.ToMods(cars1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUseridCars0: %w", err)
	}

	return ret, nil
}

func attachUserUseridCars0(ctx context.Context, exec bob.Executor, count int, cars1 CarSlice, user0 *User) (CarSlice, error) {
	setter := &CarSetter{
		Userid: omit.From(user0.Userid),
	}

	err := cars1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUseridCars0: %w", err)
	}

	return cars1, nil
}

func (user0 *User) InsertUseridCars(ctx context.Context, exec bob.Executor, related ...*CarSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	cars1, err := insertUserUseridCars0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UseridCars = append(user0.R.UseridCars, cars1...)

	for _, rel := range cars1 {
		rel.R.UseridUser = user0
	}
	return nil
}

func (user0 *User) AttachUseridCars(ctx context.Context, exec bob.Executor, related ...*Car) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	cars1 := CarSlice(related)

	_, err = attachUserUseridCars0(ctx, exec, len(related), cars1, user0)
	if err != nil {
		return err
	}

	user0.R.UseridCars = append(user0.R.UseridCars, cars1...)

	for _, rel := range related {
		rel.R.UseridUser = user0
	}

	return nil
}

func insertUserUseridParkingspots0(ctx context.Context, exec bob.Executor, parkingspots1 []*ParkingspotSetter, user0 *User) (ParkingspotSlice, error) {
	for i := range parkingspots1 {
		parkingspots1[i].Userid = omit.From(user0.Userid)
	}

	ret, err := Parkingspots.Insert(bob.ToMods(parkingspots1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUseridParkingspots0: %w", err)
	}

	return ret, nil
}

func attachUserUseridParkingspots0(ctx context.Context, exec bob.Executor, count int, parkingspots1 ParkingspotSlice, user0 *User) (ParkingspotSlice, error) {
	setter := &ParkingspotSetter{
		Userid: omit.From(user0.Userid),
	}

	err := parkingspots1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUseridParkingspots0: %w", err)
	}

	return parkingspots1, nil
}

func (user0 *User) InsertUseridParkingspots(ctx context.Context, exec bob.Executor, related ...*ParkingspotSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	parkingspots1, err := insertUserUseridParkingspots0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UseridParkingspots = append(user0.R.UseridParkingspots, parkingspots1...)

	for _, rel := range parkingspots1 {
		rel.R.UseridUser = user0
	}
	return nil
}

func (user0 *User) AttachUseridParkingspots(ctx context.Context, exec bob.Executor, related ...*Parkingspot) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	parkingspots1 := ParkingspotSlice(related)

	_, err = attachUserUseridParkingspots0(ctx, exec, len(related), parkingspots1, user0)
	if err != nil {
		return err
	}

	user0.R.UseridParkingspots = append(user0.R.UseridParkingspots, parkingspots1...)

	for _, rel := range related {
		rel.R.UseridUser = user0
	}

	return nil
}

func insertUserUseridPreferencespots0(ctx context.Context, exec bob.Executor, preferencespots1 []*PreferencespotSetter, user0 *User) (PreferencespotSlice, error) {
	for i := range preferencespots1 {
		preferencespots1[i].Userid = omit.From(user0.Userid)
	}

	ret, err := Preferencespots.Insert(bob.ToMods(preferencespots1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUseridPreferencespots0: %w", err)
	}

	return ret, nil
}

func attachUserUseridPreferencespots0(ctx context.Context, exec bob.Executor, count int, preferencespots1 PreferencespotSlice, user0 *User) (PreferencespotSlice, error) {
	setter := &PreferencespotSetter{
		Userid: omit.From(user0.Userid),
	}

	err := preferencespots1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUseridPreferencespots0: %w", err)
	}

	return preferencespots1, nil
}

func (user0 *User) InsertUseridPreferencespots(ctx context.Context, exec bob.Executor, related ...*PreferencespotSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	preferencespots1, err := insertUserUseridPreferencespots0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UseridPreferencespots = append(user0.R.UseridPreferencespots, preferencespots1...)

	for _, rel := range preferencespots1 {
		rel.R.UseridUser = user0
	}
	return nil
}

func (user0 *User) AttachUseridPreferencespots(ctx context.Context, exec bob.Executor, related ...*Preferencespot) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	preferencespots1 := PreferencespotSlice(related)

	_, err = attachUserUseridPreferencespots0(ctx, exec, len(related), preferencespots1, user0)
	if err != nil {
		return err
	}

	user0.R.UseridPreferencespots = append(user0.R.UseridPreferencespots, preferencespots1...)

	for _, rel := range related {
		rel.R.UseridUser = user0
	}

	return nil
}

func attachUserAuthuuidAuth0(ctx context.Context, exec bob.Executor, count int, user0 *User, auth1 *Auth) (*User, error) {
	setter := &UserSetter{
		Authuuid: omit.From(auth1.Authuuid),
	}

	err := user0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserAuthuuidAuth0: %w", err)
	}

	return user0, nil
}

func (user0 *User) InsertAuthuuidAuth(ctx context.Context, exec bob.Executor, related *AuthSetter) error {
	auth1, err := Auths.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserAuthuuidAuth0(ctx, exec, 1, user0, auth1)
	if err != nil {
		return err
	}

	user0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidUser = user0

	return nil
}

func (user0 *User) AttachAuthuuidAuth(ctx context.Context, exec bob.Executor, auth1 *Auth) error {
	var err error

	_, err = attachUserAuthuuidAuth0(ctx, exec, 1, user0, auth1)
	if err != nil {
		return err
	}

	user0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidUser = user0

	return nil
}
