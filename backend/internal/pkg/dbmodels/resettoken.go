// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Resettoken is an object representing the database table.
type Resettoken struct {
	Token    string    `db:"token,pk" `
	Authuuid uuid.UUID `db:"authuuid" `
	Expiry   time.Time `db:"expiry" `

	R resettokenR `db:"-" `
}

// ResettokenSlice is an alias for a slice of pointers to Resettoken.
// This should almost always be used instead of []*Resettoken.
type ResettokenSlice []*Resettoken

// Resettokens contains methods to work with the resettoken table
var Resettokens = psql.NewTablex[*Resettoken, ResettokenSlice, *ResettokenSetter]("", "resettoken")

// ResettokensQuery is a query on the resettoken table
type ResettokensQuery = *psql.ViewQuery[*Resettoken, ResettokenSlice]

// ResettokensStmt is a prepared statment on resettoken
type ResettokensStmt = bob.QueryStmt[*Resettoken, ResettokenSlice]

// resettokenR is where relationships are stored.
type resettokenR struct {
	AuthuuidAuth *Auth // resettoken.resettoken_authuuid_fkey
}

// ResettokenSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ResettokenSetter struct {
	Token    omit.Val[string]    `db:"token,pk" `
	Authuuid omit.Val[uuid.UUID] `db:"authuuid" `
	Expiry   omit.Val[time.Time] `db:"expiry" `
}

func (s ResettokenSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.Token.IsUnset() {
		vals = append(vals, "token")
	}

	if !s.Authuuid.IsUnset() {
		vals = append(vals, "authuuid")
	}

	if !s.Expiry.IsUnset() {
		vals = append(vals, "expiry")
	}

	return vals
}

func (s ResettokenSetter) Overwrite(t *Resettoken) {
	if !s.Token.IsUnset() {
		t.Token, _ = s.Token.Get()
	}
	if !s.Authuuid.IsUnset() {
		t.Authuuid, _ = s.Authuuid.Get()
	}
	if !s.Expiry.IsUnset() {
		t.Expiry, _ = s.Expiry.Get()
	}
}

func (s ResettokenSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.Token.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Token)
	}

	if s.Authuuid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Authuuid)
	}

	if s.Expiry.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Expiry)
	}

	return im.Values(vals...)
}

func (s ResettokenSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s ResettokenSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.Token.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "token")...),
			psql.Arg(s.Token),
		}})
	}

	if !s.Authuuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "authuuid")...),
			psql.Arg(s.Authuuid),
		}})
	}

	if !s.Expiry.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "expiry")...),
			psql.Arg(s.Expiry),
		}})
	}

	return exprs
}

type resettokenColumnNames struct {
	Token    string
	Authuuid string
	Expiry   string
}

var ResettokenColumns = buildResettokenColumns("resettoken")

type resettokenColumns struct {
	tableAlias string
	Token      psql.Expression
	Authuuid   psql.Expression
	Expiry     psql.Expression
}

func (c resettokenColumns) Alias() string {
	return c.tableAlias
}

func (resettokenColumns) AliasedAs(alias string) resettokenColumns {
	return buildResettokenColumns(alias)
}

func buildResettokenColumns(alias string) resettokenColumns {
	return resettokenColumns{
		tableAlias: alias,
		Token:      psql.Quote(alias, "token"),
		Authuuid:   psql.Quote(alias, "authuuid"),
		Expiry:     psql.Quote(alias, "expiry"),
	}
}

type resettokenWhere[Q psql.Filterable] struct {
	Token    psql.WhereMod[Q, string]
	Authuuid psql.WhereMod[Q, uuid.UUID]
	Expiry   psql.WhereMod[Q, time.Time]
}

func (resettokenWhere[Q]) AliasedAs(alias string) resettokenWhere[Q] {
	return buildResettokenWhere[Q](buildResettokenColumns(alias))
}

func buildResettokenWhere[Q psql.Filterable](cols resettokenColumns) resettokenWhere[Q] {
	return resettokenWhere[Q]{
		Token:    psql.Where[Q, string](cols.Token),
		Authuuid: psql.Where[Q, uuid.UUID](cols.Authuuid),
		Expiry:   psql.Where[Q, time.Time](cols.Expiry),
	}
}

type resettokenJoins[Q dialect.Joinable] struct {
	typ          string
	AuthuuidAuth func(context.Context) modAs[Q, authColumns]
}

func (j resettokenJoins[Q]) aliasedAs(alias string) resettokenJoins[Q] {
	return buildResettokenJoins[Q](buildResettokenColumns(alias), j.typ)
}

func buildResettokenJoins[Q dialect.Joinable](cols resettokenColumns, typ string) resettokenJoins[Q] {
	return resettokenJoins[Q]{
		typ:          typ,
		AuthuuidAuth: resettokensJoinAuthuuidAuth[Q](cols, typ),
	}
}

// FindResettoken retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindResettoken(ctx context.Context, exec bob.Executor, TokenPK string, cols ...string) (*Resettoken, error) {
	if len(cols) == 0 {
		return Resettokens.Query(
			ctx, exec,
			SelectWhere.Resettokens.Token.EQ(TokenPK),
		).One()
	}

	return Resettokens.Query(
		ctx, exec,
		SelectWhere.Resettokens.Token.EQ(TokenPK),
		sm.Columns(Resettokens.Columns().Only(cols...)),
	).One()
}

// ResettokenExists checks the presence of a single record by primary key
func ResettokenExists(ctx context.Context, exec bob.Executor, TokenPK string) (bool, error) {
	return Resettokens.Query(
		ctx, exec,
		SelectWhere.Resettokens.Token.EQ(TokenPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Resettoken
func (o *Resettoken) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Token)
}

// Update uses an executor to update the Resettoken
func (o *Resettoken) Update(ctx context.Context, exec bob.Executor, s *ResettokenSetter) error {
	return Resettokens.Update(ctx, exec, s, o)
}

// Delete deletes a single Resettoken record with an executor
func (o *Resettoken) Delete(ctx context.Context, exec bob.Executor) error {
	return Resettokens.Delete(ctx, exec, o)
}

// Reload refreshes the Resettoken using the executor
func (o *Resettoken) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Resettokens.Query(
		ctx, exec,
		SelectWhere.Resettokens.Token.EQ(o.Token),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o ResettokenSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ResettokenSetter) error {
	return Resettokens.Update(ctx, exec, &vals, o...)
}

func (o ResettokenSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Resettokens.Delete(ctx, exec, o...)
}

func (o ResettokenSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	TokenPK := make([]string, len(o))

	for i, o := range o {
		TokenPK[i] = o.Token
	}

	mods = append(mods,
		SelectWhere.Resettokens.Token.In(TokenPK...),
	)

	o2, err := Resettokens.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Token != old.Token {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func resettokensJoinAuthuuidAuth[Q dialect.Joinable](from resettokenColumns, typ string) func(context.Context) modAs[Q, authColumns] {
	return func(ctx context.Context) modAs[Q, authColumns] {
		return modAs[Q, authColumns]{
			c: AuthColumns,
			f: func(to authColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Auths.Name(ctx).As(to.Alias())).On(
						to.Authuuid.EQ(from.Authuuid),
					))
				}

				return mods
			},
		}
	}
}

// AuthuuidAuth starts a query for related objects on auth
func (o *Resettoken) AuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	return Auths.Query(ctx, exec, append(mods,
		sm.Where(AuthColumns.Authuuid.EQ(psql.Arg(o.Authuuid))),
	)...)
}

func (os ResettokenSlice) AuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AuthsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Authuuid)
	}

	return Auths.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(AuthColumns.Authuuid).In(PKArgs...)),
	)...)
}

func (o *Resettoken) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AuthuuidAuth":
		rel, ok := retrieved.(*Auth)
		if !ok {
			return fmt.Errorf("resettoken cannot load %T as %q", retrieved, name)
		}

		o.R.AuthuuidAuth = rel

		if rel != nil {
			rel.R.AuthuuidResettoken = o
		}
		return nil
	default:
		return fmt.Errorf("resettoken has no relationship %q", name)
	}
}

func PreloadResettokenAuthuuidAuth(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Auth, AuthSlice](orm.Relationship{
		Name: "AuthuuidAuth",
		Sides: []orm.RelSide{
			{
				From: "resettoken",
				To:   TableNames.Auths,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Auths.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Resettokens.Authuuid,
				},
				ToColumns: []string{
					ColumnNames.Auths.Authuuid,
				},
			},
		},
	}, Auths.Columns().Names(), opts...)
}

func ThenLoadResettokenAuthuuidAuth(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadResettokenAuthuuidAuth(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ResettokenAuthuuidAuth", retrieved)
		}

		err := loader.LoadResettokenAuthuuidAuth(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadResettokenAuthuuidAuth loads the resettoken's AuthuuidAuth into the .R struct
func (o *Resettoken) LoadResettokenAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AuthuuidAuth = nil

	related, err := o.AuthuuidAuth(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.AuthuuidResettoken = o

	o.R.AuthuuidAuth = related
	return nil
}

// LoadResettokenAuthuuidAuth loads the resettoken's AuthuuidAuth into the .R struct
func (os ResettokenSlice) LoadResettokenAuthuuidAuth(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	auths, err := os.AuthuuidAuth(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range auths {
			if o.Authuuid != rel.Authuuid {
				continue
			}

			rel.R.AuthuuidResettoken = o

			o.R.AuthuuidAuth = rel
			break
		}
	}

	return nil
}

func attachResettokenAuthuuidAuth0(ctx context.Context, exec bob.Executor, count int, resettoken0 *Resettoken, auth1 *Auth) (*Resettoken, error) {
	setter := &ResettokenSetter{
		Authuuid: omit.From(auth1.Authuuid),
	}

	err := Resettokens.Update(ctx, exec, setter, resettoken0)
	if err != nil {
		return nil, fmt.Errorf("attachResettokenAuthuuidAuth0: %w", err)
	}

	return resettoken0, nil
}

func (resettoken0 *Resettoken) InsertAuthuuidAuth(ctx context.Context, exec bob.Executor, related *AuthSetter) error {
	auth1, err := Auths.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachResettokenAuthuuidAuth0(ctx, exec, 1, resettoken0, auth1)
	if err != nil {
		return err
	}

	resettoken0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidResettoken = resettoken0

	return nil
}

func (resettoken0 *Resettoken) AttachAuthuuidAuth(ctx context.Context, exec bob.Executor, auth1 *Auth) error {
	var err error

	_, err = attachResettokenAuthuuidAuth0(ctx, exec, 1, resettoken0, auth1)
	if err != nil {
		return err
	}

	resettoken0.R.AuthuuidAuth = auth1

	auth1.R.AuthuuidResettoken = resettoken0

	return nil
}
