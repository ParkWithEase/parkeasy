// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// SpatialRefSy is an object representing the database table.
type SpatialRefSy struct {
	Srid      int32            `db:"srid,pk" `
	AuthName  null.Val[string] `db:"auth_name" `
	AuthSrid  null.Val[int32]  `db:"auth_srid" `
	Srtext    null.Val[string] `db:"srtext" `
	Proj4text null.Val[string] `db:"proj4text" `
}

// SpatialRefSySlice is an alias for a slice of pointers to SpatialRefSy.
// This should almost always be used instead of []*SpatialRefSy.
type SpatialRefSySlice []*SpatialRefSy

// SpatialRefSys contains methods to work with the spatial_ref_sys table
var SpatialRefSys = psql.NewTablex[*SpatialRefSy, SpatialRefSySlice, *SpatialRefSySetter]("", "spatial_ref_sys")

// SpatialRefSysQuery is a query on the spatial_ref_sys table
type SpatialRefSysQuery = *psql.ViewQuery[*SpatialRefSy, SpatialRefSySlice]

// SpatialRefSysStmt is a prepared statment on spatial_ref_sys
type SpatialRefSysStmt = bob.QueryStmt[*SpatialRefSy, SpatialRefSySlice]

// SpatialRefSySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SpatialRefSySetter struct {
	Srid      omit.Val[int32]      `db:"srid,pk" `
	AuthName  omitnull.Val[string] `db:"auth_name" `
	AuthSrid  omitnull.Val[int32]  `db:"auth_srid" `
	Srtext    omitnull.Val[string] `db:"srtext" `
	Proj4text omitnull.Val[string] `db:"proj4text" `
}

func (s SpatialRefSySetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.Srid.IsUnset() {
		vals = append(vals, "srid")
	}

	if !s.AuthName.IsUnset() {
		vals = append(vals, "auth_name")
	}

	if !s.AuthSrid.IsUnset() {
		vals = append(vals, "auth_srid")
	}

	if !s.Srtext.IsUnset() {
		vals = append(vals, "srtext")
	}

	if !s.Proj4text.IsUnset() {
		vals = append(vals, "proj4text")
	}

	return vals
}

func (s SpatialRefSySetter) Overwrite(t *SpatialRefSy) {
	if !s.Srid.IsUnset() {
		t.Srid, _ = s.Srid.Get()
	}
	if !s.AuthName.IsUnset() {
		t.AuthName, _ = s.AuthName.GetNull()
	}
	if !s.AuthSrid.IsUnset() {
		t.AuthSrid, _ = s.AuthSrid.GetNull()
	}
	if !s.Srtext.IsUnset() {
		t.Srtext, _ = s.Srtext.GetNull()
	}
	if !s.Proj4text.IsUnset() {
		t.Proj4text, _ = s.Proj4text.GetNull()
	}
}

func (s SpatialRefSySetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 5)
	if s.Srid.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Srid)
	}

	if s.AuthName.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.AuthName)
	}

	if s.AuthSrid.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.AuthSrid)
	}

	if s.Srtext.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Srtext)
	}

	if s.Proj4text.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.Proj4text)
	}

	return im.Values(vals...)
}

func (s SpatialRefSySetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s SpatialRefSySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.Srid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "srid")...),
			psql.Arg(s.Srid),
		}})
	}

	if !s.AuthName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auth_name")...),
			psql.Arg(s.AuthName),
		}})
	}

	if !s.AuthSrid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "auth_srid")...),
			psql.Arg(s.AuthSrid),
		}})
	}

	if !s.Srtext.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "srtext")...),
			psql.Arg(s.Srtext),
		}})
	}

	if !s.Proj4text.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "proj4text")...),
			psql.Arg(s.Proj4text),
		}})
	}

	return exprs
}

type spatialRefSyColumnNames struct {
	Srid      string
	AuthName  string
	AuthSrid  string
	Srtext    string
	Proj4text string
}

var SpatialRefSyColumns = buildSpatialRefSyColumns("spatial_ref_sys")

type spatialRefSyColumns struct {
	tableAlias string
	Srid       psql.Expression
	AuthName   psql.Expression
	AuthSrid   psql.Expression
	Srtext     psql.Expression
	Proj4text  psql.Expression
}

func (c spatialRefSyColumns) Alias() string {
	return c.tableAlias
}

func (spatialRefSyColumns) AliasedAs(alias string) spatialRefSyColumns {
	return buildSpatialRefSyColumns(alias)
}

func buildSpatialRefSyColumns(alias string) spatialRefSyColumns {
	return spatialRefSyColumns{
		tableAlias: alias,
		Srid:       psql.Quote(alias, "srid"),
		AuthName:   psql.Quote(alias, "auth_name"),
		AuthSrid:   psql.Quote(alias, "auth_srid"),
		Srtext:     psql.Quote(alias, "srtext"),
		Proj4text:  psql.Quote(alias, "proj4text"),
	}
}

type spatialRefSyWhere[Q psql.Filterable] struct {
	Srid      psql.WhereMod[Q, int32]
	AuthName  psql.WhereNullMod[Q, string]
	AuthSrid  psql.WhereNullMod[Q, int32]
	Srtext    psql.WhereNullMod[Q, string]
	Proj4text psql.WhereNullMod[Q, string]
}

func (spatialRefSyWhere[Q]) AliasedAs(alias string) spatialRefSyWhere[Q] {
	return buildSpatialRefSyWhere[Q](buildSpatialRefSyColumns(alias))
}

func buildSpatialRefSyWhere[Q psql.Filterable](cols spatialRefSyColumns) spatialRefSyWhere[Q] {
	return spatialRefSyWhere[Q]{
		Srid:      psql.Where[Q, int32](cols.Srid),
		AuthName:  psql.WhereNull[Q, string](cols.AuthName),
		AuthSrid:  psql.WhereNull[Q, int32](cols.AuthSrid),
		Srtext:    psql.WhereNull[Q, string](cols.Srtext),
		Proj4text: psql.WhereNull[Q, string](cols.Proj4text),
	}
}

// FindSpatialRefSy retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSpatialRefSy(ctx context.Context, exec bob.Executor, SridPK int32, cols ...string) (*SpatialRefSy, error) {
	if len(cols) == 0 {
		return SpatialRefSys.Query(
			ctx, exec,
			SelectWhere.SpatialRefSys.Srid.EQ(SridPK),
		).One()
	}

	return SpatialRefSys.Query(
		ctx, exec,
		SelectWhere.SpatialRefSys.Srid.EQ(SridPK),
		sm.Columns(SpatialRefSys.Columns().Only(cols...)),
	).One()
}

// SpatialRefSyExists checks the presence of a single record by primary key
func SpatialRefSyExists(ctx context.Context, exec bob.Executor, SridPK int32) (bool, error) {
	return SpatialRefSys.Query(
		ctx, exec,
		SelectWhere.SpatialRefSys.Srid.EQ(SridPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the SpatialRefSy
func (o *SpatialRefSy) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Srid)
}

// Update uses an executor to update the SpatialRefSy
func (o *SpatialRefSy) Update(ctx context.Context, exec bob.Executor, s *SpatialRefSySetter) error {
	return SpatialRefSys.Update(ctx, exec, s, o)
}

// Delete deletes a single SpatialRefSy record with an executor
func (o *SpatialRefSy) Delete(ctx context.Context, exec bob.Executor) error {
	return SpatialRefSys.Delete(ctx, exec, o)
}

// Reload refreshes the SpatialRefSy using the executor
func (o *SpatialRefSy) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SpatialRefSys.Query(
		ctx, exec,
		SelectWhere.SpatialRefSys.Srid.EQ(o.Srid),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o SpatialRefSySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SpatialRefSySetter) error {
	return SpatialRefSys.Update(ctx, exec, &vals, o...)
}

func (o SpatialRefSySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return SpatialRefSys.Delete(ctx, exec, o...)
}

func (o SpatialRefSySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	SridPK := make([]int32, len(o))

	for i, o := range o {
		SridPK[i] = o.Srid
	}

	mods = append(mods,
		SelectWhere.SpatialRefSys.Srid.In(SridPK...),
	)

	o2, err := SpatialRefSys.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Srid != old.Srid {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
