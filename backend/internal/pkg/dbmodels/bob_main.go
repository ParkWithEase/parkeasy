// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"hash/maphash"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
)

var TableNames = struct {
	Auths            string
	Bookings         string
	Cars             string
	Listings         string
	Parkingspots     string
	Resettokens      string
	Sessions         string
	Standardbookings string
	Timeunits        string
	Users            string
}{
	Auths:            "auth",
	Bookings:         "booking",
	Cars:             "car",
	Listings:         "listing",
	Parkingspots:     "parkingspot",
	Resettokens:      "resettoken",
	Sessions:         "sessions",
	Standardbookings: "standardbooking",
	Timeunits:        "timeunit",
	Users:            "users",
}

var ColumnNames = struct {
	Auths            authColumnNames
	Bookings         bookingColumnNames
	Cars             carColumnNames
	Listings         listingColumnNames
	Parkingspots     parkingspotColumnNames
	Resettokens      resettokenColumnNames
	Sessions         sessionColumnNames
	Standardbookings standardbookingColumnNames
	Timeunits        timeunitColumnNames
	Users            userColumnNames
}{
	Auths: authColumnNames{
		Authid:       "authid",
		Authuuid:     "authuuid",
		Email:        "email",
		Passwordhash: "passwordhash",
	},
	Bookings: bookingColumnNames{
		Bookingid:   "bookingid",
		Buyeruserid: "buyeruserid",
		Paidamount:  "paidamount",
	},
	Cars: carColumnNames{
		Carid:        "carid",
		Userid:       "userid",
		Caruuid:      "caruuid",
		Licenseplate: "licenseplate",
		Make:         "make",
		Model:        "model",
		Color:        "color",
	},
	Listings: listingColumnNames{
		Listingid:     "listingid",
		Parkingspotid: "parkingspotid",
		Listinguuid:   "listinguuid",
		Priceperhour:  "priceperhour",
		Isactive:      "isactive",
	},
	Parkingspots: parkingspotColumnNames{
		Parkingspotid:      "parkingspotid",
		Userid:             "userid",
		Parkingspotuuid:    "parkingspotuuid",
		Postalcode:         "postalcode",
		Countrycode:        "countrycode",
		City:               "city",
		Streetaddress:      "streetaddress",
		Longitude:          "longitude",
		Latitude:           "latitude",
		Hasshelter:         "hasshelter",
		Hasplugin:          "hasplugin",
		Haschargingstation: "haschargingstation",
		Ispublic:           "ispublic",
	},
	Resettokens: resettokenColumnNames{
		Token:    "token",
		Authuuid: "authuuid",
		Expiry:   "expiry",
	},
	Sessions: sessionColumnNames{
		Token:  "token",
		Data:   "data",
		Expiry: "expiry",
	},
	Standardbookings: standardbookingColumnNames{
		Standardbookingid:   "standardbookingid",
		Standardbookinguuid: "standardbookinguuid",
		Bookingid:           "bookingid",
		Listingid:           "listingid",
		Startunitnum:        "startunitnum",
		Endunitnum:          "endunitnum",
		Date:                "date",
	},
	Timeunits: timeunitColumnNames{
		Unitnum:   "unitnum",
		Date:      "date",
		Listingid: "listingid",
		Bookingid: "bookingid",
	},
	Users: userColumnNames{
		Userid:     "userid",
		Useruuid:   "useruuid",
		Authuuid:   "authuuid",
		Fullname:   "fullname",
		Email:      "email",
		Isverified: "isverified",
		Addedat:    "addedat",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q psql.Filterable]() struct {
	Auths            authWhere[Q]
	Bookings         bookingWhere[Q]
	Cars             carWhere[Q]
	Listings         listingWhere[Q]
	Parkingspots     parkingspotWhere[Q]
	Resettokens      resettokenWhere[Q]
	Sessions         sessionWhere[Q]
	Standardbookings standardbookingWhere[Q]
	Timeunits        timeunitWhere[Q]
	Users            userWhere[Q]
} {
	return struct {
		Auths            authWhere[Q]
		Bookings         bookingWhere[Q]
		Cars             carWhere[Q]
		Listings         listingWhere[Q]
		Parkingspots     parkingspotWhere[Q]
		Resettokens      resettokenWhere[Q]
		Sessions         sessionWhere[Q]
		Standardbookings standardbookingWhere[Q]
		Timeunits        timeunitWhere[Q]
		Users            userWhere[Q]
	}{
		Auths:            buildAuthWhere[Q](AuthColumns),
		Bookings:         buildBookingWhere[Q](BookingColumns),
		Cars:             buildCarWhere[Q](CarColumns),
		Listings:         buildListingWhere[Q](ListingColumns),
		Parkingspots:     buildParkingspotWhere[Q](ParkingspotColumns),
		Resettokens:      buildResettokenWhere[Q](ResettokenColumns),
		Sessions:         buildSessionWhere[Q](SessionColumns),
		Standardbookings: buildStandardbookingWhere[Q](StandardbookingColumns),
		Timeunits:        buildTimeunitWhere[Q](TimeunitColumns),
		Users:            buildUserWhere[Q](UserColumns),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]()
	UpdateJoins = getJoins[*dialect.UpdateQuery]()
	DeleteJoins = getJoins[*dialect.DeleteQuery]()
)

type joinSet[Q interface{ aliasedAs(string) Q }] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

func (j joinSet[Q]) AliasedAs(alias string) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: j.InnerJoin.aliasedAs(alias),
		LeftJoin:  j.LeftJoin.aliasedAs(alias),
		RightJoin: j.RightJoin.aliasedAs(alias),
	}
}

type joins[Q dialect.Joinable] struct {
	Auths            joinSet[authJoins[Q]]
	Bookings         joinSet[bookingJoins[Q]]
	Cars             joinSet[carJoins[Q]]
	Listings         joinSet[listingJoins[Q]]
	Parkingspots     joinSet[parkingspotJoins[Q]]
	Resettokens      joinSet[resettokenJoins[Q]]
	Standardbookings joinSet[standardbookingJoins[Q]]
	Timeunits        joinSet[timeunitJoins[Q]]
	Users            joinSet[userJoins[Q]]
}

func buildJoinSet[Q interface{ aliasedAs(string) Q }, C any, F func(C, string) Q](c C, f F) joinSet[Q] {
	return joinSet[Q]{
		InnerJoin: f(c, clause.InnerJoin),
		LeftJoin:  f(c, clause.LeftJoin),
		RightJoin: f(c, clause.RightJoin),
	}
}

func getJoins[Q dialect.Joinable]() joins[Q] {
	return joins[Q]{
		Auths:            buildJoinSet[authJoins[Q]](AuthColumns, buildAuthJoins),
		Bookings:         buildJoinSet[bookingJoins[Q]](BookingColumns, buildBookingJoins),
		Cars:             buildJoinSet[carJoins[Q]](CarColumns, buildCarJoins),
		Listings:         buildJoinSet[listingJoins[Q]](ListingColumns, buildListingJoins),
		Parkingspots:     buildJoinSet[parkingspotJoins[Q]](ParkingspotColumns, buildParkingspotJoins),
		Resettokens:      buildJoinSet[resettokenJoins[Q]](ResettokenColumns, buildResettokenJoins),
		Standardbookings: buildJoinSet[standardbookingJoins[Q]](StandardbookingColumns, buildStandardbookingJoins),
		Timeunits:        buildJoinSet[timeunitJoins[Q]](TimeunitColumns, buildTimeunitJoins),
		Users:            buildJoinSet[userJoins[Q]](UserColumns, buildUserJoins),
	}
}

type modAs[Q any, C interface{ AliasedAs(string) C }] struct {
	c C
	f func(C) bob.Mod[Q]
}

func (m modAs[Q, C]) Apply(q Q) {
	m.f(m.c).Apply(q)
}

func (m modAs[Q, C]) AliasedAs(alias string) bob.Mod[Q] {
	m.c = m.c.AliasedAs(alias)
	return m
}

func randInt() int64 {
	out := int64(new(maphash.Hash).Sum64())

	if out < 0 {
		return -out % 10000
	}

	return out % 10000
}
