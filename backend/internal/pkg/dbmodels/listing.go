// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Listing is an object representing the database table.
type Listing struct {
	Listingid     int64             `db:"listingid,pk" `
	Parkingspotid int64             `db:"parkingspotid" `
	Listinguuid   uuid.UUID         `db:"listinguuid" `
	Priceperhour  null.Val[float32] `db:"priceperhour" `
	Isactive      bool              `db:"isactive" `

	R listingR `db:"-" `
}

// ListingSlice is an alias for a slice of pointers to Listing.
// This should almost always be used instead of []*Listing.
type ListingSlice []*Listing

// Listings contains methods to work with the listing table
var Listings = psql.NewTablex[*Listing, ListingSlice, *ListingSetter]("", "listing")

// ListingsQuery is a query on the listing table
type ListingsQuery = *psql.ViewQuery[*Listing, ListingSlice]

// ListingsStmt is a prepared statment on listing
type ListingsStmt = bob.QueryStmt[*Listing, ListingSlice]

// listingR is where relationships are stored.
type listingR struct {
	ParkingspotidParkingspot *Parkingspot // listing.listing_parkingspotid_fkey
}

// ListingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ListingSetter struct {
	Listingid     omit.Val[int64]       `db:"listingid,pk" `
	Parkingspotid omit.Val[int64]       `db:"parkingspotid" `
	Listinguuid   omit.Val[uuid.UUID]   `db:"listinguuid" `
	Priceperhour  omitnull.Val[float32] `db:"priceperhour" `
	Isactive      omit.Val[bool]        `db:"isactive" `
}

func (s ListingSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.Listingid.IsUnset() {
		vals = append(vals, "listingid")
	}

	if !s.Parkingspotid.IsUnset() {
		vals = append(vals, "parkingspotid")
	}

	if !s.Listinguuid.IsUnset() {
		vals = append(vals, "listinguuid")
	}

	if !s.Priceperhour.IsUnset() {
		vals = append(vals, "priceperhour")
	}

	if !s.Isactive.IsUnset() {
		vals = append(vals, "isactive")
	}

	return vals
}

func (s ListingSetter) Overwrite(t *Listing) {
	if !s.Listingid.IsUnset() {
		t.Listingid, _ = s.Listingid.Get()
	}
	if !s.Parkingspotid.IsUnset() {
		t.Parkingspotid, _ = s.Parkingspotid.Get()
	}
	if !s.Listinguuid.IsUnset() {
		t.Listinguuid, _ = s.Listinguuid.Get()
	}
	if !s.Priceperhour.IsUnset() {
		t.Priceperhour, _ = s.Priceperhour.GetNull()
	}
	if !s.Isactive.IsUnset() {
		t.Isactive, _ = s.Isactive.Get()
	}
}

func (s ListingSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 5)
	if s.Listingid.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Listingid)
	}

	if s.Parkingspotid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Parkingspotid)
	}

	if s.Listinguuid.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Listinguuid)
	}

	if s.Priceperhour.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Priceperhour)
	}

	if s.Isactive.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.Isactive)
	}

	return im.Values(vals...)
}

func (s ListingSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s ListingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.Listingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "listingid")...),
			psql.Arg(s.Listingid),
		}})
	}

	if !s.Parkingspotid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "parkingspotid")...),
			psql.Arg(s.Parkingspotid),
		}})
	}

	if !s.Listinguuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "listinguuid")...),
			psql.Arg(s.Listinguuid),
		}})
	}

	if !s.Priceperhour.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "priceperhour")...),
			psql.Arg(s.Priceperhour),
		}})
	}

	if !s.Isactive.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "isactive")...),
			psql.Arg(s.Isactive),
		}})
	}

	return exprs
}

type listingColumnNames struct {
	Listingid     string
	Parkingspotid string
	Listinguuid   string
	Priceperhour  string
	Isactive      string
}

var ListingColumns = buildListingColumns("listing")

type listingColumns struct {
	tableAlias    string
	Listingid     psql.Expression
	Parkingspotid psql.Expression
	Listinguuid   psql.Expression
	Priceperhour  psql.Expression
	Isactive      psql.Expression
}

func (c listingColumns) Alias() string {
	return c.tableAlias
}

func (listingColumns) AliasedAs(alias string) listingColumns {
	return buildListingColumns(alias)
}

func buildListingColumns(alias string) listingColumns {
	return listingColumns{
		tableAlias:    alias,
		Listingid:     psql.Quote(alias, "listingid"),
		Parkingspotid: psql.Quote(alias, "parkingspotid"),
		Listinguuid:   psql.Quote(alias, "listinguuid"),
		Priceperhour:  psql.Quote(alias, "priceperhour"),
		Isactive:      psql.Quote(alias, "isactive"),
	}
}

type listingWhere[Q psql.Filterable] struct {
	Listingid     psql.WhereMod[Q, int64]
	Parkingspotid psql.WhereMod[Q, int64]
	Listinguuid   psql.WhereMod[Q, uuid.UUID]
	Priceperhour  psql.WhereNullMod[Q, float32]
	Isactive      psql.WhereMod[Q, bool]
}

func (listingWhere[Q]) AliasedAs(alias string) listingWhere[Q] {
	return buildListingWhere[Q](buildListingColumns(alias))
}

func buildListingWhere[Q psql.Filterable](cols listingColumns) listingWhere[Q] {
	return listingWhere[Q]{
		Listingid:     psql.Where[Q, int64](cols.Listingid),
		Parkingspotid: psql.Where[Q, int64](cols.Parkingspotid),
		Listinguuid:   psql.Where[Q, uuid.UUID](cols.Listinguuid),
		Priceperhour:  psql.WhereNull[Q, float32](cols.Priceperhour),
		Isactive:      psql.Where[Q, bool](cols.Isactive),
	}
}

type listingJoins[Q dialect.Joinable] struct {
	typ                      string
	ParkingspotidParkingspot func(context.Context) modAs[Q, parkingspotColumns]
}

func (j listingJoins[Q]) aliasedAs(alias string) listingJoins[Q] {
	return buildListingJoins[Q](buildListingColumns(alias), j.typ)
}

func buildListingJoins[Q dialect.Joinable](cols listingColumns, typ string) listingJoins[Q] {
	return listingJoins[Q]{
		typ:                      typ,
		ParkingspotidParkingspot: listingsJoinParkingspotidParkingspot[Q](cols, typ),
	}
}

// FindListing retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindListing(ctx context.Context, exec bob.Executor, ListingidPK int64, cols ...string) (*Listing, error) {
	if len(cols) == 0 {
		return Listings.Query(
			ctx, exec,
			SelectWhere.Listings.Listingid.EQ(ListingidPK),
		).One()
	}

	return Listings.Query(
		ctx, exec,
		SelectWhere.Listings.Listingid.EQ(ListingidPK),
		sm.Columns(Listings.Columns().Only(cols...)),
	).One()
}

// ListingExists checks the presence of a single record by primary key
func ListingExists(ctx context.Context, exec bob.Executor, ListingidPK int64) (bool, error) {
	return Listings.Query(
		ctx, exec,
		SelectWhere.Listings.Listingid.EQ(ListingidPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Listing
func (o *Listing) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Listingid)
}

// Update uses an executor to update the Listing
func (o *Listing) Update(ctx context.Context, exec bob.Executor, s *ListingSetter) error {
	return Listings.Update(ctx, exec, s, o)
}

// Delete deletes a single Listing record with an executor
func (o *Listing) Delete(ctx context.Context, exec bob.Executor) error {
	return Listings.Delete(ctx, exec, o)
}

// Reload refreshes the Listing using the executor
func (o *Listing) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Listings.Query(
		ctx, exec,
		SelectWhere.Listings.Listingid.EQ(o.Listingid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o ListingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ListingSetter) error {
	return Listings.Update(ctx, exec, &vals, o...)
}

func (o ListingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Listings.Delete(ctx, exec, o...)
}

func (o ListingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	ListingidPK := make([]int64, len(o))

	for i, o := range o {
		ListingidPK[i] = o.Listingid
	}

	mods = append(mods,
		SelectWhere.Listings.Listingid.In(ListingidPK...),
	)

	o2, err := Listings.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Listingid != old.Listingid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func listingsJoinParkingspotidParkingspot[Q dialect.Joinable](from listingColumns, typ string) func(context.Context) modAs[Q, parkingspotColumns] {
	return func(ctx context.Context) modAs[Q, parkingspotColumns] {
		return modAs[Q, parkingspotColumns]{
			c: ParkingspotColumns,
			f: func(to parkingspotColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Parkingspots.Name(ctx).As(to.Alias())).On(
						to.Parkingspotid.EQ(from.Parkingspotid),
					))
				}

				return mods
			},
		}
	}
}

// ParkingspotidParkingspot starts a query for related objects on parkingspot
func (o *Listing) ParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	return Parkingspots.Query(ctx, exec, append(mods,
		sm.Where(ParkingspotColumns.Parkingspotid.EQ(psql.Arg(o.Parkingspotid))),
	)...)
}

func (os ListingSlice) ParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ParkingspotsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Parkingspotid)
	}

	return Parkingspots.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(ParkingspotColumns.Parkingspotid).In(PKArgs...)),
	)...)
}

func (o *Listing) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "ParkingspotidParkingspot":
		rel, ok := retrieved.(*Parkingspot)
		if !ok {
			return fmt.Errorf("listing cannot load %T as %q", retrieved, name)
		}

		o.R.ParkingspotidParkingspot = rel

		if rel != nil {
			rel.R.ParkingspotidListings = ListingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("listing has no relationship %q", name)
	}
}

func PreloadListingParkingspotidParkingspot(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Parkingspot, ParkingspotSlice](orm.Relationship{
		Name: "ParkingspotidParkingspot",
		Sides: []orm.RelSide{
			{
				From: "listing",
				To:   TableNames.Parkingspots,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Parkingspots.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Listings.Parkingspotid,
				},
				ToColumns: []string{
					ColumnNames.Parkingspots.Parkingspotid,
				},
			},
		},
	}, Parkingspots.Columns().Names(), opts...)
}

func ThenLoadListingParkingspotidParkingspot(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadListingParkingspotidParkingspot(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ListingParkingspotidParkingspot", retrieved)
		}

		err := loader.LoadListingParkingspotidParkingspot(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadListingParkingspotidParkingspot loads the listing's ParkingspotidParkingspot into the .R struct
func (o *Listing) LoadListingParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParkingspotidParkingspot = nil

	related, err := o.ParkingspotidParkingspot(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.ParkingspotidListings = ListingSlice{o}

	o.R.ParkingspotidParkingspot = related
	return nil
}

// LoadListingParkingspotidParkingspot loads the listing's ParkingspotidParkingspot into the .R struct
func (os ListingSlice) LoadListingParkingspotidParkingspot(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	parkingspots, err := os.ParkingspotidParkingspot(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range parkingspots {
			if o.Parkingspotid != rel.Parkingspotid {
				continue
			}

			rel.R.ParkingspotidListings = append(rel.R.ParkingspotidListings, o)

			o.R.ParkingspotidParkingspot = rel
			break
		}
	}

	return nil
}

func attachListingParkingspotidParkingspot0(ctx context.Context, exec bob.Executor, count int, listing0 *Listing, parkingspot1 *Parkingspot) (*Listing, error) {
	setter := &ListingSetter{
		Parkingspotid: omit.From(parkingspot1.Parkingspotid),
	}

	err := Listings.Update(ctx, exec, setter, listing0)
	if err != nil {
		return nil, fmt.Errorf("attachListingParkingspotidParkingspot0: %w", err)
	}

	return listing0, nil
}

func (listing0 *Listing) InsertParkingspotidParkingspot(ctx context.Context, exec bob.Executor, related *ParkingspotSetter) error {
	parkingspot1, err := Parkingspots.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachListingParkingspotidParkingspot0(ctx, exec, 1, listing0, parkingspot1)
	if err != nil {
		return err
	}

	listing0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidListings = append(parkingspot1.R.ParkingspotidListings, listing0)

	return nil
}

func (listing0 *Listing) AttachParkingspotidParkingspot(ctx context.Context, exec bob.Executor, parkingspot1 *Parkingspot) error {
	var err error

	_, err = attachListingParkingspotidParkingspot0(ctx, exec, 1, listing0, parkingspot1)
	if err != nil {
		return err
	}

	listing0.R.ParkingspotidParkingspot = parkingspot1

	parkingspot1.R.ParkingspotidListings = append(parkingspot1.R.ParkingspotidListings, listing0)

	return nil
}
