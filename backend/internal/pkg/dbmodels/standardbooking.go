// Code generated by modelgen. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Standardbooking is an object representing the database table.
type Standardbooking struct {
	Standardbookingid   int64     `db:"standardbookingid,pk" `
	Standardbookinguuid uuid.UUID `db:"standardbookinguuid" `
	Bookingid           int64     `db:"bookingid" `
	Listingid           int64     `db:"listingid" `
	Startunitnum        int16     `db:"startunitnum" `
	Endunitnum          int16     `db:"endunitnum" `
	Date                time.Time `db:"date" `

	R standardbookingR `db:"-" `
}

// StandardbookingSlice is an alias for a slice of pointers to Standardbooking.
// This should almost always be used instead of []*Standardbooking.
type StandardbookingSlice []*Standardbooking

// Standardbookings contains methods to work with the standardbooking table
var Standardbookings = psql.NewTablex[*Standardbooking, StandardbookingSlice, *StandardbookingSetter]("", "standardbooking")

// StandardbookingsQuery is a query on the standardbooking table
type StandardbookingsQuery = *psql.ViewQuery[*Standardbooking, StandardbookingSlice]

// StandardbookingsStmt is a prepared statment on standardbooking
type StandardbookingsStmt = bob.QueryStmt[*Standardbooking, StandardbookingSlice]

// standardbookingR is where relationships are stored.
type standardbookingR struct {
	BookingidBooking *Booking // standardbooking.standardbooking_bookingid_fkey
}

// StandardbookingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type StandardbookingSetter struct {
	Standardbookingid   omit.Val[int64]     `db:"standardbookingid,pk" `
	Standardbookinguuid omit.Val[uuid.UUID] `db:"standardbookinguuid" `
	Bookingid           omit.Val[int64]     `db:"bookingid" `
	Listingid           omit.Val[int64]     `db:"listingid" `
	Startunitnum        omit.Val[int16]     `db:"startunitnum" `
	Endunitnum          omit.Val[int16]     `db:"endunitnum" `
	Date                omit.Val[time.Time] `db:"date" `
}

func (s StandardbookingSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.Standardbookingid.IsUnset() {
		vals = append(vals, "standardbookingid")
	}

	if !s.Standardbookinguuid.IsUnset() {
		vals = append(vals, "standardbookinguuid")
	}

	if !s.Bookingid.IsUnset() {
		vals = append(vals, "bookingid")
	}

	if !s.Listingid.IsUnset() {
		vals = append(vals, "listingid")
	}

	if !s.Startunitnum.IsUnset() {
		vals = append(vals, "startunitnum")
	}

	if !s.Endunitnum.IsUnset() {
		vals = append(vals, "endunitnum")
	}

	if !s.Date.IsUnset() {
		vals = append(vals, "date")
	}

	return vals
}

func (s StandardbookingSetter) Overwrite(t *Standardbooking) {
	if !s.Standardbookingid.IsUnset() {
		t.Standardbookingid, _ = s.Standardbookingid.Get()
	}
	if !s.Standardbookinguuid.IsUnset() {
		t.Standardbookinguuid, _ = s.Standardbookinguuid.Get()
	}
	if !s.Bookingid.IsUnset() {
		t.Bookingid, _ = s.Bookingid.Get()
	}
	if !s.Listingid.IsUnset() {
		t.Listingid, _ = s.Listingid.Get()
	}
	if !s.Startunitnum.IsUnset() {
		t.Startunitnum, _ = s.Startunitnum.Get()
	}
	if !s.Endunitnum.IsUnset() {
		t.Endunitnum, _ = s.Endunitnum.Get()
	}
	if !s.Date.IsUnset() {
		t.Date, _ = s.Date.Get()
	}
}

func (s StandardbookingSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 7)
	if s.Standardbookingid.IsUnset() {
		vals[0] = psql.Raw("DEFAULT")
	} else {
		vals[0] = psql.Arg(s.Standardbookingid)
	}

	if s.Standardbookinguuid.IsUnset() {
		vals[1] = psql.Raw("DEFAULT")
	} else {
		vals[1] = psql.Arg(s.Standardbookinguuid)
	}

	if s.Bookingid.IsUnset() {
		vals[2] = psql.Raw("DEFAULT")
	} else {
		vals[2] = psql.Arg(s.Bookingid)
	}

	if s.Listingid.IsUnset() {
		vals[3] = psql.Raw("DEFAULT")
	} else {
		vals[3] = psql.Arg(s.Listingid)
	}

	if s.Startunitnum.IsUnset() {
		vals[4] = psql.Raw("DEFAULT")
	} else {
		vals[4] = psql.Arg(s.Startunitnum)
	}

	if s.Endunitnum.IsUnset() {
		vals[5] = psql.Raw("DEFAULT")
	} else {
		vals[5] = psql.Arg(s.Endunitnum)
	}

	if s.Date.IsUnset() {
		vals[6] = psql.Raw("DEFAULT")
	} else {
		vals[6] = psql.Arg(s.Date)
	}

	return im.Values(vals...)
}

func (s StandardbookingSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s StandardbookingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.Standardbookingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "standardbookingid")...),
			psql.Arg(s.Standardbookingid),
		}})
	}

	if !s.Standardbookinguuid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "standardbookinguuid")...),
			psql.Arg(s.Standardbookinguuid),
		}})
	}

	if !s.Bookingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bookingid")...),
			psql.Arg(s.Bookingid),
		}})
	}

	if !s.Listingid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "listingid")...),
			psql.Arg(s.Listingid),
		}})
	}

	if !s.Startunitnum.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "startunitnum")...),
			psql.Arg(s.Startunitnum),
		}})
	}

	if !s.Endunitnum.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "endunitnum")...),
			psql.Arg(s.Endunitnum),
		}})
	}

	if !s.Date.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "date")...),
			psql.Arg(s.Date),
		}})
	}

	return exprs
}

type standardbookingColumnNames struct {
	Standardbookingid   string
	Standardbookinguuid string
	Bookingid           string
	Listingid           string
	Startunitnum        string
	Endunitnum          string
	Date                string
}

var StandardbookingColumns = buildStandardbookingColumns("standardbooking")

type standardbookingColumns struct {
	tableAlias          string
	Standardbookingid   psql.Expression
	Standardbookinguuid psql.Expression
	Bookingid           psql.Expression
	Listingid           psql.Expression
	Startunitnum        psql.Expression
	Endunitnum          psql.Expression
	Date                psql.Expression
}

func (c standardbookingColumns) Alias() string {
	return c.tableAlias
}

func (standardbookingColumns) AliasedAs(alias string) standardbookingColumns {
	return buildStandardbookingColumns(alias)
}

func buildStandardbookingColumns(alias string) standardbookingColumns {
	return standardbookingColumns{
		tableAlias:          alias,
		Standardbookingid:   psql.Quote(alias, "standardbookingid"),
		Standardbookinguuid: psql.Quote(alias, "standardbookinguuid"),
		Bookingid:           psql.Quote(alias, "bookingid"),
		Listingid:           psql.Quote(alias, "listingid"),
		Startunitnum:        psql.Quote(alias, "startunitnum"),
		Endunitnum:          psql.Quote(alias, "endunitnum"),
		Date:                psql.Quote(alias, "date"),
	}
}

type standardbookingWhere[Q psql.Filterable] struct {
	Standardbookingid   psql.WhereMod[Q, int64]
	Standardbookinguuid psql.WhereMod[Q, uuid.UUID]
	Bookingid           psql.WhereMod[Q, int64]
	Listingid           psql.WhereMod[Q, int64]
	Startunitnum        psql.WhereMod[Q, int16]
	Endunitnum          psql.WhereMod[Q, int16]
	Date                psql.WhereMod[Q, time.Time]
}

func (standardbookingWhere[Q]) AliasedAs(alias string) standardbookingWhere[Q] {
	return buildStandardbookingWhere[Q](buildStandardbookingColumns(alias))
}

func buildStandardbookingWhere[Q psql.Filterable](cols standardbookingColumns) standardbookingWhere[Q] {
	return standardbookingWhere[Q]{
		Standardbookingid:   psql.Where[Q, int64](cols.Standardbookingid),
		Standardbookinguuid: psql.Where[Q, uuid.UUID](cols.Standardbookinguuid),
		Bookingid:           psql.Where[Q, int64](cols.Bookingid),
		Listingid:           psql.Where[Q, int64](cols.Listingid),
		Startunitnum:        psql.Where[Q, int16](cols.Startunitnum),
		Endunitnum:          psql.Where[Q, int16](cols.Endunitnum),
		Date:                psql.Where[Q, time.Time](cols.Date),
	}
}

type standardbookingJoins[Q dialect.Joinable] struct {
	typ              string
	BookingidBooking func(context.Context) modAs[Q, bookingColumns]
}

func (j standardbookingJoins[Q]) aliasedAs(alias string) standardbookingJoins[Q] {
	return buildStandardbookingJoins[Q](buildStandardbookingColumns(alias), j.typ)
}

func buildStandardbookingJoins[Q dialect.Joinable](cols standardbookingColumns, typ string) standardbookingJoins[Q] {
	return standardbookingJoins[Q]{
		typ:              typ,
		BookingidBooking: standardbookingsJoinBookingidBooking[Q](cols, typ),
	}
}

// FindStandardbooking retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindStandardbooking(ctx context.Context, exec bob.Executor, StandardbookingidPK int64, cols ...string) (*Standardbooking, error) {
	if len(cols) == 0 {
		return Standardbookings.Query(
			ctx, exec,
			SelectWhere.Standardbookings.Standardbookingid.EQ(StandardbookingidPK),
		).One()
	}

	return Standardbookings.Query(
		ctx, exec,
		SelectWhere.Standardbookings.Standardbookingid.EQ(StandardbookingidPK),
		sm.Columns(Standardbookings.Columns().Only(cols...)),
	).One()
}

// StandardbookingExists checks the presence of a single record by primary key
func StandardbookingExists(ctx context.Context, exec bob.Executor, StandardbookingidPK int64) (bool, error) {
	return Standardbookings.Query(
		ctx, exec,
		SelectWhere.Standardbookings.Standardbookingid.EQ(StandardbookingidPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Standardbooking
func (o *Standardbooking) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.Standardbookingid)
}

// Update uses an executor to update the Standardbooking
func (o *Standardbooking) Update(ctx context.Context, exec bob.Executor, s *StandardbookingSetter) error {
	return Standardbookings.Update(ctx, exec, s, o)
}

// Delete deletes a single Standardbooking record with an executor
func (o *Standardbooking) Delete(ctx context.Context, exec bob.Executor) error {
	return Standardbookings.Delete(ctx, exec, o)
}

// Reload refreshes the Standardbooking using the executor
func (o *Standardbooking) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Standardbookings.Query(
		ctx, exec,
		SelectWhere.Standardbookings.Standardbookingid.EQ(o.Standardbookingid),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o StandardbookingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals StandardbookingSetter) error {
	return Standardbookings.Update(ctx, exec, &vals, o...)
}

func (o StandardbookingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Standardbookings.Delete(ctx, exec, o...)
}

func (o StandardbookingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	StandardbookingidPK := make([]int64, len(o))

	for i, o := range o {
		StandardbookingidPK[i] = o.Standardbookingid
	}

	mods = append(mods,
		SelectWhere.Standardbookings.Standardbookingid.In(StandardbookingidPK...),
	)

	o2, err := Standardbookings.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.Standardbookingid != old.Standardbookingid {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func standardbookingsJoinBookingidBooking[Q dialect.Joinable](from standardbookingColumns, typ string) func(context.Context) modAs[Q, bookingColumns] {
	return func(ctx context.Context) modAs[Q, bookingColumns] {
		return modAs[Q, bookingColumns]{
			c: BookingColumns,
			f: func(to bookingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Bookings.Name(ctx).As(to.Alias())).On(
						to.Bookingid.EQ(from.Bookingid),
					))
				}

				return mods
			},
		}
	}
}

// BookingidBooking starts a query for related objects on booking
func (o *Standardbooking) BookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	return Bookings.Query(ctx, exec, append(mods,
		sm.Where(BookingColumns.Bookingid.EQ(psql.Arg(o.Bookingid))),
	)...)
}

func (os StandardbookingSlice) BookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BookingsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.Bookingid)
	}

	return Bookings.Query(ctx, exec, append(mods,
		sm.Where(psql.Group(BookingColumns.Bookingid).In(PKArgs...)),
	)...)
}

func (o *Standardbooking) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "BookingidBooking":
		rel, ok := retrieved.(*Booking)
		if !ok {
			return fmt.Errorf("standardbooking cannot load %T as %q", retrieved, name)
		}

		o.R.BookingidBooking = rel

		if rel != nil {
			rel.R.BookingidStandardbookings = StandardbookingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("standardbooking has no relationship %q", name)
	}
}

func PreloadStandardbookingBookingidBooking(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Booking, BookingSlice](orm.Relationship{
		Name: "BookingidBooking",
		Sides: []orm.RelSide{
			{
				From: "standardbooking",
				To:   TableNames.Bookings,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Bookings.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Standardbookings.Bookingid,
				},
				ToColumns: []string{
					ColumnNames.Bookings.Bookingid,
				},
			},
		},
	}, Bookings.Columns().Names(), opts...)
}

func ThenLoadStandardbookingBookingidBooking(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadStandardbookingBookingidBooking(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load StandardbookingBookingidBooking", retrieved)
		}

		err := loader.LoadStandardbookingBookingidBooking(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadStandardbookingBookingidBooking loads the standardbooking's BookingidBooking into the .R struct
func (o *Standardbooking) LoadStandardbookingBookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.BookingidBooking = nil

	related, err := o.BookingidBooking(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.BookingidStandardbookings = StandardbookingSlice{o}

	o.R.BookingidBooking = related
	return nil
}

// LoadStandardbookingBookingidBooking loads the standardbooking's BookingidBooking into the .R struct
func (os StandardbookingSlice) LoadStandardbookingBookingidBooking(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	bookings, err := os.BookingidBooking(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range bookings {
			if o.Bookingid != rel.Bookingid {
				continue
			}

			rel.R.BookingidStandardbookings = append(rel.R.BookingidStandardbookings, o)

			o.R.BookingidBooking = rel
			break
		}
	}

	return nil
}

func attachStandardbookingBookingidBooking0(ctx context.Context, exec bob.Executor, count int, standardbooking0 *Standardbooking, booking1 *Booking) (*Standardbooking, error) {
	setter := &StandardbookingSetter{
		Bookingid: omit.From(booking1.Bookingid),
	}

	err := Standardbookings.Update(ctx, exec, setter, standardbooking0)
	if err != nil {
		return nil, fmt.Errorf("attachStandardbookingBookingidBooking0: %w", err)
	}

	return standardbooking0, nil
}

func (standardbooking0 *Standardbooking) InsertBookingidBooking(ctx context.Context, exec bob.Executor, related *BookingSetter) error {
	booking1, err := Bookings.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachStandardbookingBookingidBooking0(ctx, exec, 1, standardbooking0, booking1)
	if err != nil {
		return err
	}

	standardbooking0.R.BookingidBooking = booking1

	booking1.R.BookingidStandardbookings = append(booking1.R.BookingidStandardbookings, standardbooking0)

	return nil
}

func (standardbooking0 *Standardbooking) AttachBookingidBooking(ctx context.Context, exec bob.Executor, booking1 *Booking) error {
	var err error

	_, err = attachStandardbookingBookingidBooking0(ctx, exec, 1, standardbooking0, booking1)
	if err != nil {
		return err
	}

	standardbooking0.R.BookingidBooking = booking1

	booking1.R.BookingidStandardbookings = append(booking1.R.BookingidStandardbookings, standardbooking0)

	return nil
}
