// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/ParkWithEase/parkeasy/backend/internal/pkg/dbmodels"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	Userid     func() int32
	Authuuid   func() uuid.UUID
	Useruuid   func() uuid.UUID
	Fullname   func() string
	Email      func() string
	Isverified func() bool
	Addedat    func() time.Time

	r userR
	f *Factory
}

type userR struct {
	UseridCar    *userRUseridCarR
	AuthuuidAuth *userRAuthuuidAuthR
}

type userRUseridCarR struct {
	o *CarTemplate
}
type userRAuthuuidAuthR struct {
	o *AuthTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.Userid != nil {
		m.Userid = o.Userid()
	}
	if o.Authuuid != nil {
		m.Authuuid = o.Authuuid()
	}
	if o.Useruuid != nil {
		m.Useruuid = o.Useruuid()
	}
	if o.Fullname != nil {
		m.Fullname = o.Fullname()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.Isverified != nil {
		m.Isverified = o.Isverified()
	}
	if o.Addedat != nil {
		m.Addedat = o.Addedat()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.UseridCar != nil {
		rel := t.r.UseridCar.o.toModel()
		rel.R.UseridUser = o
		rel.Userid = o.Userid
		o.R.UseridCar = rel
	}

	if t.r.AuthuuidAuth != nil {
		rel := t.r.AuthuuidAuth.o.toModel()
		rel.R.AuthuuidUser = o
		o.Authuuid = rel.Authuuid
		o.R.AuthuuidAuth = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.Userid != nil {
		m.Userid = omit.From(o.Userid())
	}
	if o.Authuuid != nil {
		m.Authuuid = omit.From(o.Authuuid())
	}
	if o.Useruuid != nil {
		m.Useruuid = omit.From(o.Useruuid())
	}
	if o.Fullname != nil {
		m.Fullname = omit.From(o.Fullname())
	}
	if o.Email != nil {
		m.Email = omit.From(o.Email())
	}
	if o.Isverified != nil {
		m.Isverified = omit.From(o.Isverified())
	}
	if o.Addedat != nil {
		m.Addedat = omit.From(o.Addedat())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.Authuuid.IsUnset() {
		m.Authuuid = omit.From(random_uuid_UUID(nil))
	}
	if m.Fullname.IsUnset() {
		m.Fullname = omit.From(random_string(nil))
	}
	if m.Email.IsUnset() {
		m.Email = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	if o.r.UseridCar != nil {
		var rel0 *models.Car
		ctx, rel0, err = o.r.UseridCar.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachUseridCar(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	var rel1 *models.Auth
	if o.r.AuthuuidAuth == nil {
		var ok bool
		rel1, ok = authCtx.Value(ctx)
		if !ok {
			UserMods.WithNewAuthuuidAuth().Apply(o)
		}
	}
	if o.r.AuthuuidAuth != nil {
		ctx, rel1, err = o.r.AuthuuidAuth.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.Authuuid = omit.From(rel1.Authuuid)

	m, err := models.Users.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	m.R.AuthuuidAuth = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomUserid(f),
		UserMods.RandomAuthuuid(f),
		UserMods.RandomUseruuid(f),
		UserMods.RandomFullname(f),
		UserMods.RandomEmail(f),
		UserMods.RandomIsverified(f),
		UserMods.RandomAddedat(f),
	}
}

// Set the model columns to this value
func (m userMods) Userid(val int32) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Userid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m userMods) UseridFunc(f func() int32) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Userid = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUserid() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Userid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUserid(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Userid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Authuuid(val uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Authuuid = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userMods) AuthuuidFunc(f func() uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Authuuid = f
	})
}

// Clear any values for the column
func (m userMods) UnsetAuthuuid() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Authuuid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomAuthuuid(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Authuuid = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Useruuid(val uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Useruuid = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userMods) UseruuidFunc(f func() uuid.UUID) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Useruuid = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUseruuid() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Useruuid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUseruuid(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Useruuid = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Fullname(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Fullname = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) FullnameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Fullname = f
	})
}

// Clear any values for the column
func (m userMods) UnsetFullname() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Fullname = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomFullname(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Fullname = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Email(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmail() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmail(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Isverified(val bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Isverified = func() bool { return val }
	})
}

// Set the Column from the function
func (m userMods) IsverifiedFunc(f func() bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Isverified = f
	})
}

// Clear any values for the column
func (m userMods) UnsetIsverified() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Isverified = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomIsverified(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Isverified = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Addedat(val time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Addedat = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) AddedatFunc(f func() time.Time) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Addedat = f
	})
}

// Clear any values for the column
func (m userMods) UnsetAddedat() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Addedat = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomAddedat(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Addedat = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userMods) WithUseridCar(rel *CarTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UseridCar = &userRUseridCarR{
			o: rel,
		}
	})
}

func (m userMods) WithNewUseridCar(mods ...CarMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewCar(mods...)

		m.WithUseridCar(related).Apply(o)
	})
}

func (m userMods) WithoutUseridCar() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.UseridCar = nil
	})
}

func (m userMods) WithAuthuuidAuth(rel *AuthTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.AuthuuidAuth = &userRAuthuuidAuthR{
			o: rel,
		}
	})
}

func (m userMods) WithNewAuthuuidAuth(mods ...AuthMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewAuth(mods...)

		m.WithAuthuuidAuth(related).Apply(o)
	})
}

func (m userMods) WithoutAuthuuidAuth() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.AuthuuidAuth = nil
	})
}
