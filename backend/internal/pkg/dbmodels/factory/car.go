// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "github.com/ParkWithEase/parkeasy/backend/internal/pkg/dbmodels"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type CarMod interface {
	Apply(*CarTemplate)
}

type CarModFunc func(*CarTemplate)

func (f CarModFunc) Apply(n *CarTemplate) {
	f(n)
}

type CarModSlice []CarMod

func (mods CarModSlice) Apply(n *CarTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CarTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CarTemplate struct {
	Carid        func() int32
	Userid       func() int64
	Caruuid      func() uuid.UUID
	Licenseplate func() string
	Make         func() string
	Model        func() string
	Color        func() string

	r carR
	f *Factory
}

type carR struct {
	UseridUser *carRUseridUserR
}

type carRUseridUserR struct {
	o *UserTemplate
}

// Apply mods to the CarTemplate
func (o *CarTemplate) Apply(mods ...CarMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Car
// this does nothing with the relationship templates
func (o CarTemplate) toModel() *models.Car {
	m := &models.Car{}

	if o.Carid != nil {
		m.Carid = o.Carid()
	}
	if o.Userid != nil {
		m.Userid = o.Userid()
	}
	if o.Caruuid != nil {
		m.Caruuid = o.Caruuid()
	}
	if o.Licenseplate != nil {
		m.Licenseplate = o.Licenseplate()
	}
	if o.Make != nil {
		m.Make = o.Make()
	}
	if o.Model != nil {
		m.Model = o.Model()
	}
	if o.Color != nil {
		m.Color = o.Color()
	}

	return m
}

// toModels returns an models.CarSlice
// this does nothing with the relationship templates
func (o CarTemplate) toModels(number int) models.CarSlice {
	m := make(models.CarSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Car
// according to the relationships in the template. Nothing is inserted into the db
func (t CarTemplate) setModelRels(o *models.Car) {
	if t.r.UseridUser != nil {
		rel := t.r.UseridUser.o.toModel()
		rel.R.UseridCar = o
		o.Userid = rel.Userid
		o.R.UseridUser = rel
	}
}

// BuildSetter returns an *models.CarSetter
// this does nothing with the relationship templates
func (o CarTemplate) BuildSetter() *models.CarSetter {
	m := &models.CarSetter{}

	if o.Carid != nil {
		m.Carid = omit.From(o.Carid())
	}
	if o.Userid != nil {
		m.Userid = omit.From(o.Userid())
	}
	if o.Caruuid != nil {
		m.Caruuid = omit.From(o.Caruuid())
	}
	if o.Licenseplate != nil {
		m.Licenseplate = omit.From(o.Licenseplate())
	}
	if o.Make != nil {
		m.Make = omit.From(o.Make())
	}
	if o.Model != nil {
		m.Model = omit.From(o.Model())
	}
	if o.Color != nil {
		m.Color = omit.From(o.Color())
	}

	return m
}

// BuildManySetter returns an []*models.CarSetter
// this does nothing with the relationship templates
func (o CarTemplate) BuildManySetter(number int) []*models.CarSetter {
	m := make([]*models.CarSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Car
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CarTemplate.Create
func (o CarTemplate) Build() *models.Car {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CarSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CarTemplate.CreateMany
func (o CarTemplate) BuildMany(number int) models.CarSlice {
	m := make(models.CarSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableCar(m *models.CarSetter) {
	if m.Userid.IsUnset() {
		m.Userid = omit.From(random_int64(nil))
	}
	if m.Licenseplate.IsUnset() {
		m.Licenseplate = omit.From(random_string(nil))
	}
	if m.Make.IsUnset() {
		m.Make = omit.From(random_string(nil))
	}
	if m.Model.IsUnset() {
		m.Model = omit.From(random_string(nil))
	}
	if m.Color.IsUnset() {
		m.Color = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Car
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *CarTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Car) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a car and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *CarTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Car, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a car and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *CarTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Car {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a car and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *CarTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Car {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a car and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *CarTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Car, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableCar(opt)

	var rel0 *models.User
	if o.r.UseridUser == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			CarMods.WithNewUseridUser().Apply(o)
		}
	}
	if o.r.UseridUser != nil {
		ctx, rel0, err = o.r.UseridUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.Userid = omit.From(rel0.Userid)

	m, err := models.Cars.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = carCtx.WithValue(ctx, m)

	m.R.UseridUser = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple cars and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o CarTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.CarSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple cars and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o CarTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.CarSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple cars and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o CarTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.CarSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple cars and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o CarTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.CarSlice, error) {
	var err error
	m := make(models.CarSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Car has methods that act as mods for the CarTemplate
var CarMods carMods

type carMods struct{}

func (m carMods) RandomizeAllColumns(f *faker.Faker) CarMod {
	return CarModSlice{
		CarMods.RandomCarid(f),
		CarMods.RandomUserid(f),
		CarMods.RandomCaruuid(f),
		CarMods.RandomLicenseplate(f),
		CarMods.RandomMake(f),
		CarMods.RandomModel(f),
		CarMods.RandomColor(f),
	}
}

// Set the model columns to this value
func (m carMods) Carid(val int32) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Carid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m carMods) CaridFunc(f func() int32) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Carid = f
	})
}

// Clear any values for the column
func (m carMods) UnsetCarid() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Carid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomCarid(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Carid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Userid(val int64) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Userid = func() int64 { return val }
	})
}

// Set the Column from the function
func (m carMods) UseridFunc(f func() int64) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Userid = f
	})
}

// Clear any values for the column
func (m carMods) UnsetUserid() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Userid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomUserid(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Userid = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Caruuid(val uuid.UUID) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Caruuid = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m carMods) CaruuidFunc(f func() uuid.UUID) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Caruuid = f
	})
}

// Clear any values for the column
func (m carMods) UnsetCaruuid() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Caruuid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomCaruuid(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Caruuid = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Licenseplate(val string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Licenseplate = func() string { return val }
	})
}

// Set the Column from the function
func (m carMods) LicenseplateFunc(f func() string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Licenseplate = f
	})
}

// Clear any values for the column
func (m carMods) UnsetLicenseplate() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Licenseplate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomLicenseplate(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Licenseplate = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Make(val string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Make = func() string { return val }
	})
}

// Set the Column from the function
func (m carMods) MakeFunc(f func() string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Make = f
	})
}

// Clear any values for the column
func (m carMods) UnsetMake() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Make = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomMake(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Make = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Model(val string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Model = func() string { return val }
	})
}

// Set the Column from the function
func (m carMods) ModelFunc(f func() string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Model = f
	})
}

// Clear any values for the column
func (m carMods) UnsetModel() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Model = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomModel(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Model = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m carMods) Color(val string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Color = func() string { return val }
	})
}

// Set the Column from the function
func (m carMods) ColorFunc(f func() string) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Color = f
	})
}

// Clear any values for the column
func (m carMods) UnsetColor() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Color = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m carMods) RandomColor(f *faker.Faker) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.Color = func() string {
			return random_string(f)
		}
	})
}

func (m carMods) WithUseridUser(rel *UserTemplate) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.r.UseridUser = &carRUseridUserR{
			o: rel,
		}
	})
}

func (m carMods) WithNewUseridUser(mods ...UserMod) CarMod {
	return CarModFunc(func(o *CarTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUseridUser(related).Apply(o)
	})
}

func (m carMods) WithoutUseridUser() CarMod {
	return CarModFunc(func(o *CarTemplate) {
		o.r.UseridUser = nil
	})
}
