// Code generated by BobGen psql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "github.com/ParkWithEase/parkeasy/backend/internal/pkg/dbmodels"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type AuthMod interface {
	Apply(*AuthTemplate)
}

type AuthModFunc func(*AuthTemplate)

func (f AuthModFunc) Apply(n *AuthTemplate) {
	f(n)
}

type AuthModSlice []AuthMod

func (mods AuthModSlice) Apply(n *AuthTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AuthTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AuthTemplate struct {
	Authid       func() int32
	Authuuid     func() uuid.UUID
	Email        func() string
	Passwordhash func() string

	r authR
	f *Factory
}

type authR struct {
	AuthuuidUser *authRAuthuuidUserR
}

type authRAuthuuidUserR struct {
	o *UserTemplate
}

// Apply mods to the AuthTemplate
func (o *AuthTemplate) Apply(mods ...AuthMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Auth
// this does nothing with the relationship templates
func (o AuthTemplate) toModel() *models.Auth {
	m := &models.Auth{}

	if o.Authid != nil {
		m.Authid = o.Authid()
	}
	if o.Authuuid != nil {
		m.Authuuid = o.Authuuid()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.Passwordhash != nil {
		m.Passwordhash = o.Passwordhash()
	}

	return m
}

// toModels returns an models.AuthSlice
// this does nothing with the relationship templates
func (o AuthTemplate) toModels(number int) models.AuthSlice {
	m := make(models.AuthSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Auth
// according to the relationships in the template. Nothing is inserted into the db
func (t AuthTemplate) setModelRels(o *models.Auth) {
	if t.r.AuthuuidUser != nil {
		rel := t.r.AuthuuidUser.o.toModel()
		rel.R.AuthuuidAuth = o
		rel.Authuuid = o.Authuuid
		o.R.AuthuuidUser = rel
	}
}

// BuildSetter returns an *models.AuthSetter
// this does nothing with the relationship templates
func (o AuthTemplate) BuildSetter() *models.AuthSetter {
	m := &models.AuthSetter{}

	if o.Authid != nil {
		m.Authid = omit.From(o.Authid())
	}
	if o.Authuuid != nil {
		m.Authuuid = omit.From(o.Authuuid())
	}
	if o.Email != nil {
		m.Email = omit.From(o.Email())
	}
	if o.Passwordhash != nil {
		m.Passwordhash = omit.From(o.Passwordhash())
	}

	return m
}

// BuildManySetter returns an []*models.AuthSetter
// this does nothing with the relationship templates
func (o AuthTemplate) BuildManySetter(number int) []*models.AuthSetter {
	m := make([]*models.AuthSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Auth
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthTemplate.Create
func (o AuthTemplate) Build() *models.Auth {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AuthSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthTemplate.CreateMany
func (o AuthTemplate) BuildMany(number int) models.AuthSlice {
	m := make(models.AuthSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAuth(m *models.AuthSetter) {
	if m.Email.IsUnset() {
		m.Email = omit.From(random_string(nil))
	}
	if m.Passwordhash.IsUnset() {
		m.Passwordhash = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Auth
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AuthTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Auth) (context.Context, error) {
	var err error

	if o.r.AuthuuidUser != nil {
		var rel0 *models.User
		ctx, rel0, err = o.r.AuthuuidUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachAuthuuidUser(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}
	}

	return ctx, err
}

// Create builds a auth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AuthTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Auth, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a auth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *AuthTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Auth {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a auth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *AuthTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Auth {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a auth and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AuthTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Auth, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAuth(opt)

	m, err := models.Auths.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = authCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple auths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AuthTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AuthSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple auths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o AuthTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.AuthSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple auths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o AuthTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.AuthSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple auths and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AuthTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AuthSlice, error) {
	var err error
	m := make(models.AuthSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Auth has methods that act as mods for the AuthTemplate
var AuthMods authMods

type authMods struct{}

func (m authMods) RandomizeAllColumns(f *faker.Faker) AuthMod {
	return AuthModSlice{
		AuthMods.RandomAuthid(f),
		AuthMods.RandomAuthuuid(f),
		AuthMods.RandomEmail(f),
		AuthMods.RandomPasswordhash(f),
	}
}

// Set the model columns to this value
func (m authMods) Authid(val int32) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m authMods) AuthidFunc(f func() int32) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authid = f
	})
}

// Clear any values for the column
func (m authMods) UnsetAuthid() AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authMods) RandomAuthid(f *faker.Faker) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m authMods) Authuuid(val uuid.UUID) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authuuid = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m authMods) AuthuuidFunc(f func() uuid.UUID) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authuuid = f
	})
}

// Clear any values for the column
func (m authMods) UnsetAuthuuid() AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authuuid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authMods) RandomAuthuuid(f *faker.Faker) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Authuuid = func() uuid.UUID {
			return random_uuid_UUID(f)
		}
	})
}

// Set the model columns to this value
func (m authMods) Email(val string) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m authMods) EmailFunc(f func() string) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m authMods) UnsetEmail() AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authMods) RandomEmail(f *faker.Faker) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m authMods) Passwordhash(val string) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Passwordhash = func() string { return val }
	})
}

// Set the Column from the function
func (m authMods) PasswordhashFunc(f func() string) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Passwordhash = f
	})
}

// Clear any values for the column
func (m authMods) UnsetPasswordhash() AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Passwordhash = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authMods) RandomPasswordhash(f *faker.Faker) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.Passwordhash = func() string {
			return random_string(f)
		}
	})
}

func (m authMods) WithAuthuuidUser(rel *UserTemplate) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.r.AuthuuidUser = &authRAuthuuidUserR{
			o: rel,
		}
	})
}

func (m authMods) WithNewAuthuuidUser(mods ...UserMod) AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		related := o.f.NewUser(mods...)

		m.WithAuthuuidUser(related).Apply(o)
	})
}

func (m authMods) WithoutAuthuuidUser() AuthMod {
	return AuthModFunc(func(o *AuthTemplate) {
		o.r.AuthuuidUser = nil
	})
}
